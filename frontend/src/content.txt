Title of Auth.js:
No Title Found
import { onAuthStateChanged } from 'firebase/auth';
import React, { useEffect, useState } from 'react';
import WorldLoader from './components/WorldLoader';
import { auth } from './firebase';


export const AuthContext = React.createContext();

export default function AuthProvider({children}) {
    const [currentUser, setCurrentUser] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        onAuthStateChanged(auth, (user) => {
          setCurrentUser(user);
          setLoading(false);
        });
      }, []);

      if (loading) {
        return (
          <div
            style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              height: '80vh',
            }}
          >
            <WorldLoader/>
          </div>
        );
      }
    
      return (
        <AuthContext.Provider
          value={{
            currentUser,
          }}
        >
          {children}
        </AuthContext.Provider>
      );
};
------------------------------
Title of index.js:
No Title Found
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import 'font-awesome/css/font-awesome.min.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  // <React.StrictMode>
    <App />
  // </React.StrictMode>
);
------------------------------
Title of firebase.js:
No Title Found
import { initializeApp } from "firebase/app";
import {
  GoogleAuthProvider,
  getAuth,
  signInWithPopup,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  sendPasswordResetEmail,
  signOut,
} from "firebase/auth";
import {
  getFirestore,
  query,
  getDocs,
  collection,
  where,
  addDoc,
  QuerySnapshot,
} from "firebase/firestore";

const firebaseConfig = {
    apiKey: "AIzaSyD2px5fXe5nX6sJoHjopFGE42AxVraXRCs",
    authDomain: "volta-61437.firebaseapp.com",
    projectId: "volta-61437",
    storageBucket: "volta-61437.appspot.com",
    messagingSenderId: "759060541583",
    appId: "1:759060541583:web:1029fdef41a4c6781f40fa",
    measurementId: "G-67FW1XN5FC"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

const googleProvider = new GoogleAuthProvider();
const signInWithGoogle = async () => {
    console.log('Signing in with Google');
  try {
    const res = await signInWithPopup(auth, googleProvider);
    const user = res.user;
    const q = query(collection(db, "users"), where("uid", "==", user.uid));
    const docs = await getDocs(q);
    if (docs.docs.length === 0) {
      await addDoc(collection(db, "users"), {
        uid: user.uid,
        name: user.displayName,
        authProvider: "google",
        email: user.email,
        photoURL: user.photoURL,
        trips: []
      });
    }
  } catch (err) {
    console.error(err);
    alert(err.message);
  }
};

const logInWithEmailAndPassword = async (email, password) => {
    try {
      await signInWithEmailAndPassword(auth, email, password);
    } catch (err) {
      console.error(err);
      alert(err);
    }
  };
  const registerWithEmailAndPassword = async (name, email, password) => {
    try {
      const res = await createUserWithEmailAndPassword(auth, email, password);
      const user = res.user;
      await addDoc(collection(db, "users"), {
        uid: user.uid,
        name,
        authProvider: "local",
        email,
      });
    } catch (err) {
      console.error(err);
      alert(err.message);
    }
  };
  const sendPasswordReset = async (email) => {
    try {
      await sendPasswordResetEmail(auth, email);
      alert("Password reset link sent!");
    } catch (err) {
      console.error(err);
      alert(err.message);
    }
  };
  const logout = () => {
    signOut(auth)
  };

const getTrips = async (uid) => {
    console.log('Finding user trips');
    try {
      const querySnapshot = await db.collection("trips").get();
      console.log(querySnapshot.docs.map((doc) => doc.data()));
    } catch (err) {
      console.error(err);
      alert(err.message);
    }
};

export {
    auth,
    db,
    signInWithGoogle,
    logInWithEmailAndPassword,
    registerWithEmailAndPassword,
    sendPasswordReset,
    logout,
    getTrips,
};
------------------------------
Title of App.js:
AuthProvider from './Auth';
import logo from './images/logo1.png';
import './App.css';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import MyTrips from './pages/myTrips';
import Explore from './pages/Explore';
import Trip from './pages/Trip/Trip';
import BucketList from './pages/BucketList';
import LoginPage from './pages/LoginPage';
import Home from './pages/Home';
import Error from './pages/Error';
import SignupPage from './pages/SignUpPage';
import AuthProvider from './Auth';
// import AuthProvider from './Auth';



function App() {

  // useEffect(() => {

  // }, [])

  return (
      <Router>
        <AuthProvider>
          <div className="App">
            <Routes>
              <Route exact path="/" element={<Home/>}/>
              <Route exact path="/trips" element={<MyTrips/>}/>
              <Route exact path="/trip" element={<Trip/>}/>
              {/* <Route exact path="/bucketlist" element={<BucketList/>}/> */}
              <Route exact path="/explore" element={<Explore/>}/>
              <Route exact path="/login" element={<LoginPage/>}/>
              <Route exact path="/signup" element={<SignupPage/>}/>
              <Route path='*' element={<Error/>}/>
            </Routes>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>
          </div>
        </AuthProvider>
      </Router>
  );
}

export default App;

------------------------------
Title of ThirdHero.js:
No Title Found
import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faQuoteRight, faPlane } from '@fortawesome/free-solid-svg-icons';
import { Link } from 'react-router-dom';


const HeroContainer = styled.div`
    min-height: 50vh;
    background-color: #081736;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    
    .quote-icon {
        color: #F1F1F1;
        font-size: 3em;
        margin-bottom: 30px;
    }
`

const Quote = styled.h2`
    color: #F1F1F1;
    font-family: "Lora", sans-serif;
    width: 100vw;
    text-align: center;
    padding: 0px 20px;
`

const ButtonsContainer = styled.div`
    margin-top: 30px;
`

const ContentButton = styled.button`
    background: none;
    border: 1px solid #F1F1F1;
    color: #fff !important;
    text-decoration: none !important;
    border-radius: 10px;
    padding: 5px;
    width: 150px;
    text-transform: uppercase;
    font-family: "Sen", sans-serif;
    transition: 0.15s all ease-in;
    margin: 0px 20px;

    .button-link {
        color: #fff;
        text-decoration: none;
    }

    &:hover {
        background-color: #fff;
        .button-link {
            color: #081736;
        }
    }
`


function ThirdHero() {
  return (
    <HeroContainer>
        <FontAwesomeIcon className='quote-icon' icon={faPlane}/>
        <Quote>
            The journey of a thousand miles begins with a single step.
        </Quote>
        <ButtonsContainer>
            <ContentButton><Link className='button-link' to='/signup'>Sign up</Link></ContentButton>
            <ContentButton><Link className='button-link' to='/login'>Log in</Link></ContentButton>
        </ButtonsContainer>
    </HeroContainer>
  );
}

export default ThirdHero;

------------------------------
Title of DateRange.js:
No Title Found
import React, { useState, useCallback, useEffect } from 'react';
import ReactDOM from 'react-dom';
import { useNavigate } from 'react-router-dom';


function DateRange(props) {
    const navigate = useNavigate();
    const [ range, setRange ] = useState(null)
    // const [date, setDate] = useState({
    //     start: props.date.start.toDate(),
    //     end: props.date.end.toDate(),
    // });

    useEffect(() => {
        try {
            if (!props.date || !props.date.start) {
                navigate('/trips');
            } else {
                setRange(`${props.date.start.toDate().toLocaleDateString()} to ${props.date.end.toDate().toLocaleDateString()}`);
            }
        } catch (error) {
            console.log(error.message);
            navigate('/trips');
        }
        
    });

    return (
        <span>
            {range}
        </span>
    );
}

export default DateRange;

------------------------------
Title of FourthHero.js:
No Title Found
import React, { useRef, useEffect, useState } from 'react';
import styled from 'styled-components';


const HeroContainer = styled.div`
    position: relative;
    height: 500px;
    background: #F1F1F1;
    width: 100%;
    background: green;
`

const Container = styled.div`
  display: flex;
  overflow-x: hidden;
  position: absolute;
  top: 0;
  /* left: 0; */
  width: 100%;
  height: 100%;
  border: 2px solid red;
`;

const Image = styled.img`
  width: 100px;
  height: 100px;
`;

function FourthHero() {
  const images = [
        "https://images.unsplash.com/photo-1567920139184-150ff48189b1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8aGF3YWl8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60",
        "https://images.unsplash.com/photo-1561789508-775d60abeb9d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8aGF3YWl8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60",
        "https://images.unsplash.com/photo-1520322082799-20c1288346e3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8aGF3YWl8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60",
        "https://images.unsplash.com/photo-1567920139184-150ff48189b1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8aGF3YWl8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60",
        "https://images.unsplash.com/photo-1561789508-775d60abeb9d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8aGF3YWl8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60",
        "https://images.unsplash.com/photo-1520322082799-20c1288346e3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8aGF3YWl8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60",
        "https://images.unsplash.com/photo-1567920139184-150ff48189b1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8aGF3YWl8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60",
        "https://images.unsplash.com/photo-1561789508-775d60abeb9d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8aGF3YWl8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60",
        "https://images.unsplash.com/photo-1520322082799-20c1288346e3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8aGF3YWl8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60",
  ];
  const [scrollX, setScrollX] = useState(0);
  const container1Ref = useRef(null);
  const container2Ref = useRef(null);


  useEffect(() => {
    let animationFrameId;

    const animate = () => {
      setScrollX(scrollX => (scrollX + 1) % (images.length * 100));
      animationFrameId = requestAnimationFrame(animate);
    };

    animationFrameId = requestAnimationFrame(animate);

    let c1 = document.getElementById('c1');
    let c2 = document.getElementById('c2');

    c2.style.left = c1.getBoundingClientRect().left;

    return () => {
      cancelAnimationFrame(animationFrameId);
    };
  }, [images.length]);

  return (
    <HeroContainer>
      <Container id="c1" ref={container2Ref} style={{ left: `${scrollX}` }}>
        {images.map((imageUrl, index) => (
          <Image
            key={index}
            src={imageUrl}
          />
        ))}
      </Container>
      <Container id="c2" ref={container2Ref} style={{ left: `${scrollX}` }}>
        {images.map((imageUrl, index) => (
          <Image
            key={index}
            src={imageUrl}
          />
        ))}
      </Container>
    </HeroContainer>
  );
}

export default FourthHero;
------------------------------
Title of Navbar.js:
No Title Found
import React, { useContext, useState } from 'react';
import ReactDOM from 'react-dom';
import { Link, useNavigate } from 'react-router-dom';
import logo from './../images/logo1.svg';
import styled from 'styled-components';
import { Nav, Navbar, Button } from "react-bootstrap";
import './Navbar.css';
import { logout } from '../firebase';
import { AuthContext } from '../Auth';

const LogButton = styled.button`
    font-size: 1.1rem;
    border-radius: 7px;
    padding: 7.5px 15px;
    height: 40px;
    font-family: "Sen", sans-serif;
    color: #fff;
    background-color: #1746A2;
    transition: all 0.2s ease;
    margin-right: 25px;
    border: 1px solid rgba(0,0,0,0);

    @media screen and (max-width: 991px) {
        margin-right: 0px;
    }

    &:hover {
        background-color: transparent;
        color: var(--darkBlue);
        border: 1px solid var(--darkBlue);
    }

    &:focus {
        background-color: transparent ;
        color: var(--darkBlue);
        border: 1px solid var(--darkBlue);
    }
`

const LogoImg = styled.img`
        height: 42.5px;
        margin: 10px;
        text-align: center;
        display: block;
        margin-left: auto;
        margin-right: auto;
`

function NavbarComponent(props)
{
    const [menu, setMenu] = useState(
        [
            {
                "title" : "My Trips",
                "link" : "/mytrips"
            },
            {
                "title" : "Explore",
                "link" : "/explore"
            },
            {
                "title" : "Bucket List",
                "link" : "/bucketlist"
            },
            {
                "title" : "Sign out",
                "link" : "/signout"
            }
        ]
    );

    const { currentUser } = useContext(AuthContext);
    const navigate = useNavigate();

    function handleLog() {
        if (currentUser) {
            navigate('/');
            logout();
        } else {
            navigate('/login');
        }
        
    }
 
    return (
        <Navbar collapseOnSelect expand="lg" bg="transparent" variant="light">
            <Navbar.Brand href="">
                <Link to="/">
                    <LogoImg src={logo}/>
                </Link>
            </Navbar.Brand>
            <Navbar.Toggle className='nav-toggle' aria-controls="responsive-navbar-nav" />
            <Navbar.Collapse id="responsive-navbar-nav">
                <Nav className="ms-auto nav-items">
                    <Nav.Link className={props.active == "my-trips" ? "nav-link active nav-item" : "nav-link nav-item"}><Link className='nav-link-style no-underline' to="/trips">My Trips</Link></Nav.Link>
                    {/* <Nav.Link className={props.active == "bucket-list" ? "nav-link active nav-item" : "nav-link nav-item"}><Link className='nav-link-style no-underline' to="/bucketlist">Bucket List</Link></Nav.Link> */}
                    <Nav.Link className={props.active == "explore" ? "nav-link active nav-item" : "nav-link nav-item"}><Link className='nav-link-style no-underline' to="/explore">Explore</Link></Nav.Link>
                    <div className='log-button-container'>
                        <LogButton onClick={handleLog}>{currentUser ? <span>LOG OUT</span> : <span>LOG IN</span>}</LogButton>
                    </div>
                </Nav>
            </Navbar.Collapse>
        </Navbar>
    );
}


export default NavbarComponent;
------------------------------
Title of UnsplashPicker.js:
UnsplashImagePickerModal from 'unsplash-image-picker';
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import ListImageSearch from './Trip/ListImageSearch';
// import UnsplashImagePickerModal from 'unsplash-image-picker';


const Container = styled.div`
    border-radius: 10px;
    /* padding: 10px; */
    /* border: 2px solid red; */
`

// const UrlForm = styled.form`
//     padding: 10px;
//     display: flex;
//     flex-direction: column;
//     font-family: "Sen", sans-serif;
// `

// const UrlInput = styled.input``

// const FormButton = styled.button`
//     background-color: #1746A2;
//     border: none;
//     border-radius: 5px;
//     color: #fff;
//     margin-top: 10px;
//     padding: 5px;
// `


function UnsplashPicker(props) {
    const [ url, setUrl ] = useState("");

    const saveClick = (e) => {
        props.close()
    }

    return (
        <Container>
            {/* <UrlForm onSubmit={(event) => event.preventDefault()}>
                <UrlInput onChange={(e) => setUrl(e.target.value)} value={url} placeholder="Image URL here..." type="link"/>
                <FormButton type="submit" onClick={saveClick}>Save</FormButton>
            </UrlForm> */}
            <ListImageSearch/>
        </Container>
    );
}

export default UnsplashPicker;

------------------------------
Title of CalendarDatesPicker.js:
No Title Found
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { db } from '../firebase';
import { doc, Timestamp, updateDoc } from 'firebase/firestore';


const CalendarContainer = styled.div`

`


function CalendarDatesPicker(props) {
    const [ trip, setTrip ] = useState(props.trip);
    const [startDate, setStartDate] = useState(props.date.start.toDate());
    const [endDate, setEndDate] = useState(props.date.end.toDate());

    const [ newStart, setNewStart ] = useState(null);
    const [ newEnd, setNewEnd ] = useState(null);

    async function onChange (dates) {
      const [start, end] = dates;
      setStartDate(start);
      setEndDate(end);

      setStartDate(start);
      setEndDate(end)

      const tripRef = doc(db, "trips", props.id);

      if (start && end) {
            props.updateDate(
                {
                    start: Timestamp.fromDate(start),
                    end: Timestamp.fromDate(end)
                }
            )
          await updateDoc(tripRef, {
            date: {
                start: Timestamp.fromDate(start),
                end: Timestamp.fromDate(end)
            }
          }).then(() => {
            props.refreshTrip();
        });
      }
    };

    const onSelect = (date) => {
        if (!newStart) {
            setNewStart(date);
        } else {
            setNewEnd(date);
        }
        console.log(date);
    }

    useEffect(() => {
        console.log('underhere')
        console.log(props.date.start.toDate())
        // setTrip(props.trip);
        // setStartDate(props.trip.date.start.toDate());
        // setEndDate(props.trip.date.end.toDate());

    }, [props])

    return (
        <CalendarContainer>
            <DatePicker
                selected={startDate}
                onChange={onChange}
                startDate={startDate}
                endDate={endDate}
                selectsRange
                inline
                onSelect={onSelect}
                minDate={new Date()}
            />
        </CalendarContainer>
    );
}


export default CalendarDatesPicker;
------------------------------
Title of EmojiImg.js:
No Title Found
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';

const Emoji = styled.img`
    height: 20px;
    width: 20px;
    margin: 5px;
    /* display: inline; */
`

function EmojiImg(props)
{
    return (
        <Emoji style={{height: props.size, width: props.size}} src={"https://emojicdn.elk.sh/" + props.emoji}/>
    );
}


export default EmojiImg;
------------------------------
Title of DeleteConfirm.js:
No Title Found
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';


const DeleteModal = styled.div`
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
    z-index: 100;
    background-color: rgba(200, 200, 200, .3);
`

const DeleteBox = styled.div`
    width: 300px;
    height: 140px;
    background-color: #fff;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 10px;
    border-radius: 10px;
`

const DeleteTitle = styled.h4`
    font-family: "Lora", sans-serif;

`

const ButtonsContainer = styled.div`
    display: flex;
    flex-direction: column;
    padding: 5px;
    font-family: "Sen", sans-serif;
`

const DeleteButton = styled.button`
    margin: 3px 0px;
    background: none;
    border: 2px solid #ff2929;
    color: #ff2929;
    transition: 0.15s all ease-in;
    border-radius: 4px;
    
    &:hover {
        background-color: #ff2929;
        color: #fff;
    }
`

const CancelButton = styled.button`
    margin: 3px 0px;
    background: none;
    border-radius: 4px;
    transition: 0.15s all ease-in;
    color: #333333;
    border: 2px solid #333333;

    &:hover {
        background-color: #333333;
        color: #fff;
    }
`


function DeleteConfirm(props)
{
    // const [ trip, setTrip ] = useState(props.trip)

    // useEffect (() => {
    //     setTrip(props.trip)
    // }, [])

    const handleDelete = (e) => {
        if (props.deleteAction) {
            props.deleteAction()
        }
        
        props.handleDelete()
        e.stopPropagation()
    }

    const handleCancel = (e) => {
        props.parentCallback()
        e.stopPropagation()
    }

    return (
        <DeleteModal onClick={(e) => e.stopPropagation()}>
            <DeleteBox>
                <DeleteTitle>Are you sure?</DeleteTitle>
                <ButtonsContainer>
                    <DeleteButton onClick={handleDelete}>Delete</DeleteButton>
                    <CancelButton onClick={handleCancel}>Cancel</CancelButton>
                </ButtonsContainer>
            </DeleteBox>
        </DeleteModal>
    );
}


export default DeleteConfirm;
------------------------------
Title of WorldLoader.js:
No Title Found
import React, { useState, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';

const LoaderStyle = {
    height: "100%",
    width: "100%",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#fff",
    borderRadius: "100px"
}

const InnerStyle = {
    width: "100px",
    height: "100px"
}


function WorldLoader (){
    return (
        <div style={LoaderStyle}>
            <div style={InnerStyle}>
                <div className='lower-loader'><i class="fa fa-solid fa-globe"></i></div>
                <div className='higher-loader'><i className="fa fa-solid fa-plane"></i></div>
            </div>
        </div>
    );
}

export default WorldLoader;
------------------------------
Title of SecondHero.js:
No Title Found
import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faShare, faCalendar, faHeart, faDollarSign, faEarthAmericas, faPlaneDeparture, faBook } from '@fortawesome/free-solid-svg-icons'

const HeroContainer = styled.div`
    /* min-height: 50vh; */
    padding-top: 100px;
    padding-bottom: 100px;
    background-color: #F1F1F1;
`

const Box = styled.div`
    .icon {
        color: #081736;
        font-size: 2em;
    }

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 40px 15px;
    /* margin: 20px; */
    /* margin: 30px 0px; */
    /* border: 1px solid #fff; */
`

const BoxTitle = styled.h5`
    font-family: "Sen", sans-serif;
    color: #081736;
    margin-top: 15px;
`

function SecondHero() {
  return (
    <HeroContainer>
        <div className="container">
            <div className="row">
                <Box className="col-lg-4 col-md-6 col-sm-6">
                    <FontAwesomeIcon className='icon' icon={faShare}/>
                    <BoxTitle>Share trips</BoxTitle>
                </Box>
                <Box className="col-lg-4 col-md-6 col-sm-6">
                    <FontAwesomeIcon className='icon' icon={faBook}/>
                    <BoxTitle>Manage resources</BoxTitle>
                </Box>
                <Box className="col-lg-4 col-md-6 col-sm-6">
                    <FontAwesomeIcon className='icon' icon={faPlaneDeparture}/>
                    <BoxTitle>Book flights</BoxTitle>
                </Box>
                <Box className="col-lg-4 col-md-6 col-sm-6">
                    <FontAwesomeIcon className='icon' icon={faHeart}/>
                    <BoxTitle>Save places of interest</BoxTitle>
                </Box>
                <Box className="col-lg-4 col-md-6 col-sm-6">
                    <FontAwesomeIcon className='icon' icon={faDollarSign}/>
                    <BoxTitle>Create budget</BoxTitle>
                </Box>
                <Box className="col-lg-4 col-md-6 col-sm-6">
                    <FontAwesomeIcon className='icon' icon={faEarthAmericas}/>
                    <BoxTitle>Explore new destinations</BoxTitle>
                </Box>
            </div>
        </div>
    </HeroContainer>
  );
}

export default SecondHero;

------------------------------
Title of bucketListDashboard.js:
No Title Found
import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import { Link } from 'react-router-dom';
import logo from './../images/logo1.svg';
import styled from 'styled-components';
import EmojiImg from './EmojiImg';

function BucketListDashboard()
{
 
    let trips = [
        
    ]

    const MyTripsDashboardContainer = styled.div`
        padding: 30px;
    `

    const MyTripsHeading = styled.h1`
        font-family: 'Lora', serif;
        font-weight: 700;
        opacity: 1;
        margin-bottom: 30px;
    `

    const NoTrips = styled.h1`
        font-family: 'Sen', sans-serif;
        font-weight: 700;
        font-size: 4rem;
        margin-top: 100px;

        @media (max-width: 990px) {
            font-size: 3rem;
        }
    `

    const EmojiSpan = styled.span`
        opacity:  1;
    `

    const HeadingSpan = styled.span`
        opacity: 0.775;
    `

    const ExploreLink = styled.a`
        color: #292929;
        opacity: 1;
        text-decoration: none;
        cursor: pointer;
        background: 
		linear-gradient(to right, #1746A2, #1746A2),
		linear-gradient(to right, #2192FF, #38E54D);
        background-size: 100% 0.1em, 0 0.1em;
        background-position: 100% 100%, 0 100%;
        background-repeat: no-repeat;
        transition: all 400ms;

        &:hover, &focus {
            background-size: 0 0.1em, 100% 0.1em;
            color: #000;
        }
    `

    return (
        <MyTripsDashboardContainer>
                <MyTripsHeading>Bucket List {<EmojiImg size="45px" emoji="🪣"/>}</MyTripsHeading>
            <div className="container">
                <div className="dashboard-row row">
                        {trips.length > 0 ?
                        trips.map((trip) => (
                            <h1>bucket</h1>
                        )) :
                            <NoTrips><HeadingSpan>Oh no! You better add something to your bucket list. <Link style={{textDecoration:'none'}} to="/explore"><ExploreLink>Explore<EmojiSpan><EmojiImg emoji="🌎" size="60px"/></EmojiSpan></ExploreLink></Link></HeadingSpan></NoTrips>
                        }
                </div>
            </div>
        </MyTripsDashboardContainer>
    );
}


export default BucketListDashboard;
------------------------------
Title of ExploreDestinations.js:
No Title Found
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import ExploreDashboardDestination from './ExploreDashboardDestination';


const ExploreDestinationsContainer = styled.div`
    display: block;
    height: calc(100vh - 200px);
    width: calc(100vw - 340px);
    /* position: fixed; */
    margin-top: 10px;
    padding: 5px;
    border-radius: 15px;
    /* -webkit-box-shadow: 5px 5px 12px 5px rgba(0,0,0,0.17); 
    box-shadow: 5px 5px 12px 5px rgba(0,0,0,0.17); */
    background-color: #F8F8F8;

    @media screen and (max-width: 1200px) {
      width: 100%;
      margin-top: 30px;
    }  
`

const ExploreDestinationsBox = styled.div`
    height: calc(100vh - 200px);
    padding: 10px;
    /* width: calc(100vw - 340px); */
    overflow-y: scroll;
    &::-webkit-scrollbar {
      display: none;
    }
`

const ResultsText = styled.h6`
    /* margin-left: 10px;
    margin-top: 10px; */
    margin: 10px 0px 20px 10px;
`

function ExploreDestinations(props) {

  return (
      <ExploreDestinationsContainer>
        <ExploreDestinationsBox>
          <ResultsText>{props.destinations.length} results</ResultsText>
          {props.destinations.map((destination) => (
            <ExploreDashboardDestination destination={destination}/>
          ))}
        </ExploreDestinationsBox>
      </ExploreDestinationsContainer>
  )
}

export default ExploreDestinations;
------------------------------
Title of ImageSlider.js:
No Title Found
import React, { useContext, useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import Carousel from 'react-bootstrap/Carousel';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlaneDeparture } from '@fortawesome/free-solid-svg-icons';
import { useNavigate } from 'react-router-dom';
import { Timestamp, addDoc, collection } from 'firebase/firestore';
import { db } from '../../firebase';
import { AuthContext } from '../../Auth';


const SliderContainer = styled.div`
  border-radius: 15px 0px 0px 15px;
  position: relative;
  width: 300px;
  height: 300px;

  @media screen and (max-width: 800px) {
    border-radius: 15px 15px 0px 0px;
    width: 100%;
  }
`

const SliderImage = styled.img`
  height: 300px;
  border-radius: 15px 0px 0px 15px;

  @media screen and (max-width: 800px) {
    border-radius: 15px 15px 0px 0px;
  }
`

const CarouselItem = styled(Carousel.Item)`
  height: 300px;
`

const IconsContainer = styled.div`
  position: absolute;
  top: 10px;
  left: 10px;
  background: #fff;
  border-radius: 10px;
  z-index: 2000;
  color: #081736;
  padding: 5px;
  font-size: 1.3em;
  cursor: pointer;
`

const CreateTrip = styled.button`
  margin: 0;
  padding: 0;
  background: none;
  border: none;
  outline: none;
`

function ImageSlider(props) {

  const navigate = useNavigate();

  function getCountryFlag(countryCode) {
    const flagOffset = 127397; // Unicode offset for regional indicator symbols
    const alpha2Code = countryCode.toUpperCase(); // Convert to uppercase for consistency
  
    // Check if the country code is valid
    if (/^[A-Z]{2}$/.test(alpha2Code)) {
      // Compute the Unicode code point for the flag
      const codePoint = alpha2Code
        .split('')
        .map(char => char.charCodeAt(0) + flagOffset)
        .map(code => `\\u{${code.toString(16)}}`)
        .join('');
  
      // Replace the code point with the corresponding emoji
      const flagEmoji = codePoint.replace(/\\u\{([0-9a-f]{1,6})\}/gi, (_, hex) => String.fromCodePoint(parseInt(hex, 16)));
      return flagEmoji;
    }
  
    // If the country code is not valid, return a random emoji
    const randomEmojis = ['✈️', '🎒', '🧭'];
    const randomIndex = Math.floor(Math.random() * randomEmojis.length);
    return randomEmojis[randomIndex];
  }
  
  
  
  
  
  const { currentUser } = useContext(AuthContext);

  const handleClick = () => {
    if (currentUser) {
      var tripPlace = props.destination.title;
  
      const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${tripPlace}&key=AIzaSyBwLSV_KJEYZpoIn6DxFWN5rAowGsCKC9U`;
          fetch(url).then((response) => {
              const data = response.json().then(
                  (data) => {
                      var place_code = "";
                      console.log(data)
                      if (data.results.length > 0) {
                          var country;
                          try {
                            country = data.results[0].address_components.filter(
                              (component) => component.types.indexOf('country') !== -1
                              )[0].short_name;
                          } catch {
                            country = "US";
                          }
                         
                          console.log(country);
                          // setCountryCode(country);
                          place_code = country;
                      } else {
                          console.log('No country found');
                          // setCountryCode('');
                      }
  
                      var img = props.destination.images[0];
  
                      // Adding to firebase
                      if (tripPlace === '' || img === '') {
                          alert("Please fill out all fields");
                      } else {
                          const tripsCollectionRef = collection(db, 'trips');
                          const today = new Date(); // Get the current date
                          const start = new Date(today.getFullYear(), today.getMonth() + 1, today.getDate()); // Add 1 month
                          const end = new Date(today.getFullYear(), today.getMonth() + 1, today.getDate() + 7); // Add 1 month and 1 week
  
                          addDoc(
                              tripsCollectionRef,
                              {
                                  blocks: [],
                                  checklist: [],
                                  date: {
                                      start: Timestamp.fromDate(start),
                                      end: Timestamp.fromDate(end)
                                  },
                                  emoji: getCountryFlag(place_code),
                                  image: img,
                                  lists: [],
                                  members: [
                                      {
                                          img: currentUser.photoURL,
                                          uid: currentUser.uid,
                                          username: currentUser.email
                                      }
                                  ],
                                  place_code: place_code,
                                  title: tripPlace,
                                  users: [currentUser.uid],
                                  owner: currentUser.uid
                              }
                          ).then(() => {
                              console.log('Added trip')
                              navigate('/trips')
                          })
                      }
                  }
              );
              
          });
    } else {
      navigate('/login');
    }
  }

  return (
      <SliderContainer>
        <IconsContainer>
          <CreateTrip onClick={handleClick}><FontAwesomeIcon icon={faPlaneDeparture} /></CreateTrip>
        </IconsContainer>
        <Carousel fade style={{height: "100%"}} interval={null}>
            {props.images.map((image) => (
                <CarouselItem key={Math.random()}>
                    <SliderImage src={image} className="d-block w-100 h-100 carousel-img" alt="..."/>
                </CarouselItem>
            ))}
        </Carousel>
      </SliderContainer>
  );
}

export default ImageSlider;

------------------------------
Title of ExploreDashboardDestination.js:
No Title Found
import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import EmojiImg from '../EmojiImg';
import ImageSlider from './ImageSlider';


const filterDictionary = {
  "type-beach" : ["🏖️", "Beach vacation"],
  "type-city" : ["🏙️", "City trip"],
  "type-nature" : ["⛰️", "Nature adventure"],
  "type-winter" : ["❄️", "Winter vacation"],
  "society-architecture" : ["🏛️", "Architecture"],
  "society-sightseeing" : ["🗽", "Sightseeing"],
  "society-museums" : ["🏺", "Museums"],
  "society-culinary" : ["🍔", "Culinary"],
  "society-sports" : ["⚽️", "Sports"],
  "society-night" : ["🍺", "Night life"],
  "society-kid" : ["👶", "Kid friendly"],
  "location-europe" : ["🌍", "Europe"],
  "location-africa" : ["🌍", "Africa"],
  "location-america" : ["🌎", "North/South America"],
  "location-asiaoceania" : ["🌏", "Asia/Oceania"],
  "location-other" : ["🌕", "Other"]
}

const ExploreDashboardDestinationContainer = styled.div`
  background-color: white;
  border-radius: 15px;
  height: 300px;
  display: flex;
  flex-direction: row;
  -webkit-box-shadow: 0px 8px 15px 0px rgba(0,0,0,0.28); 
  box-shadow: 0px 8px 15px 0px rgba(0,0,0,0.28);
  margin-bottom: 35px;
  font-family: "Roboto", sans-serif;

  @media screen and (max-width: 800px) {
    flex-direction: column;
    height: auto;
  }
`

const DestinationInfo = styled.div`
  padding: 10px 20px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  height: 300px;

  @media screen and (max-width: 1200px) {
    margin-top: 10px;
  }
`

const InfoTitle = styled.h2`
font-family: 'Lora', serif;

  font-weight: 700;
`

const GraySpan = styled.span`
  color: #B0B0B0;
`

const InfoDescription = styled.p`

`

const TagsContainer = styled.div`
  /* display: flex;
  flex-direction: row; */
  border-top: 1px #E5E5E5 solid;
  border-bottom: 1px #E5E5E5 solid;
  padding: 7.5px 0px;
`

const TagsList = styled.div`
  margin-top: 7.5px;
`

const TagsTitle = styled.p`
  margin: 0px;
  font-weight: 600;
`

const InfoTag = styled.p`
  display: inline-block;
  background: #ECECEC;
  padding: 5px 10px;
  border-radius: 100px;
  margin-right: 10px;
  margin: 0px 10px 10px 0px;
`

const SliderContainer = styled.div`
  min-width: 300px;
  /* height: 100%; */
  /* border: 1px solid gold; */
`

const ScrollContainer = styled.div`
  overflow-y: scroll;

  &::-webkit-scrollbar {
    display: none;
  }
`

function ExploreDashboardDestination(props) {
  return (
      <ExploreDashboardDestinationContainer>
        <SliderContainer>
          <ImageSlider destination={props.destination} images={props.destination.images}/>
        </SliderContainer>
        <DestinationInfo>
          <InfoTitle>{props.destination.title} <GraySpan>{props.destination.region}</GraySpan></InfoTitle>
          <ScrollContainer>
            <InfoDescription>{props.destination.description}</InfoDescription>
            
            <TagsContainer>
              <TagsTitle>Perfect if you like...</TagsTitle>
                <TagsList>
                  {props.destination.tags.map((tag) => (
                      <InfoTag><EmojiImg emoji={filterDictionary[tag][0]}/>{filterDictionary[tag][1]}</InfoTag>
                  ))}
                </TagsList>
            </TagsContainer>
          </ScrollContainer>
        </DestinationInfo>
      </ExploreDashboardDestinationContainer>
  );
}

export default ExploreDashboardDestination;
------------------------------
Title of ExploreSearch.js:
No Title Found
import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import NavbarComponent from '../../components/Navbar';
import Globe from 'react-globe.gl';


const ExploreSearchContainer = styled.div`
    
`

const GlobeContainer = styled.div`

`

const N = 1;
const gData = [...Array(N).keys()].map(() => ({
  lat: -22.9110137,
  lng: -43.2093727,
  size: 0.6,
  color: ["red", "white", "blue", "green"][Math.round(Math.random() * 3)]
}));

function ExploreSearch() {
  return (
        <ExploreSearchContainer className="container">
          <div className="row">
            <div className="col-lg-6 col-md-12">
                <GlobeContainer>
                    <Globe
                        height="500"
                        width="500"
                        // globeImageUrl={worldMap}
                        globeImageUrl="//unpkg.com/three-globe/example/img/earth-day.jpg"
                        backgroundColor="rgb(0,0,0,0)"
                        pointsData={gData}
                        pointAltitude="size"
                        pointColor="color"
                    />
                </GlobeContainer>
            </div>
            <div className="col-lg-6 col-md-12">hey</div>
          </div>
        </ExploreSearchContainer>
  );
}

export default ExploreSearch;

------------------------------
Title of ExploreFilter.js:
No Title Found
import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import EmojiImg from '../EmojiImg';


const ExploreFilterContainer = styled.div`
    width: 280px;
    /* posit/ion: relative; */
    margin-top: -50px;
    margin-left: 20px;
    height: calc(100vh - 140px);
    /* background-color: tomato; */
    /* position: fixed; */
    /* right: 15px;
    bottom: 15px; */
    border-radius: 15px;
    -webkit-box-shadow: 5px 5px 12px 5px rgba(0,0,0,0.17); 
    box-shadow: 5px 5px 12px 5px rgba(0,0,0,0.17);
    font-family: 'Sen', sans-serif;
    overflow-y: scroll;
    &::-webkit-scrollbar {
      display: none;
    }

    @media screen and (max-width: 1200px) {
      margin-top: 20px;
      margin-left: 0px;
      width: 100%;
      height: auto;
    }  
`

const ExploreForm = styled.form`
  padding: 0px 15px;
  @media(max-width: 1200px) {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-evenly;
    padding: 20px 0px;
    height: auto;
  }
`

const CheckboxContainer = styled.div`
  margin: 10px;
`

const SectionItems = styled.div`
  display: flex;
  flex-direction: column;
`

const ExploreCheckbox = styled.input`
    margin-right: 11px;
    transform: scale(1.4);
`

const CheckboxLabel = styled.label`

`

const SectionLabel = styled.p`
  color: #505050;
  font-size: 1em;
  text-transform: uppercase;
  font-weight: 600;
  margin-top: 15px;
`

const FiltersExpand = styled.button`
  display: none;

  @media(max-width: 991px) {
    display: block;
  }
`

const FilterSection = styled.div`

`

function ExploreFilter() {
  const [filters, setFilters] = useState(
    {
      "Destination type": [
      {
        title: "Beach vacation",
        emoji: "🏖️",
        value: "type-beach"
      },
      {
        title: "City trip",
        emoji: "🏙️",
        value: "type-city"
      },
      {
        title: "Nature adventure",
        emoji: "⛰️",
        value: "type-nature"
      },
      {
        title: "Winter vacation",
        emoji: "❄️",
        value: "type-winter"
      },],
      "Society": [
      {
        title: "Architecture",
        emoji: "🏛️",
        value: "society-architecture"
      },
      {
        title: "Sightseeing",
        emoji: "🗽",
        value: "society-sightseeing"
      },
      {
        title: "Museums",
        emoji: "🏺",
        value: "society-museums"
      },
      {
        title: "Culinary",
        emoji: "🍔",
        value: "society-culinary"
      },
      {
        title: "Sports",
        emoji: "⚽️",
        value: "society-sports"
      },
      {
        title: "Night life",
        emoji: "🍺",
        value: "society-night"
      },
      {
        title: "Kid friendly",
        emoji: "👶",
        value: "society-kid"
      }],
      "Location": [
      {
        title: "Europe",
        emoji: "🌍",
        value: "location-europe"
      },
      {
        title: "Africa",
        emoji: "🌍",
        value: "location-africa"
      },
      {
        title: "America",
        emoji: "🌎",
        value: "location-america"
      },
      {
        title: "Asia/Oceania",
        emoji: "🌏",
        value: "location-asiaoceania"
      },
      {
        title: "Other",
        emoji: "🌕",
        value: "location-other"
      }]
    }
  );

  const [ triggerState, setTriggerState ] = useState(false);
 
  return (
      <ExploreFilterContainer>
        <ExploreForm>
          {
            Object.keys(filters).map((key, index) =>  {
              return (
                <FilterSection key={index}>
                  <SectionLabel>{key}</SectionLabel>
                  <SectionItems>
                    {filters[key].map((filter, index2) => (
                        <CheckboxContainer key={index2}>
                          <ExploreCheckbox onChange={() => setTriggerState(!triggerState)} id={filter.value} type="checkbox" value={filter.value}/>
                          <CheckboxLabel><EmojiImg emoji={filter.emoji}/> {filter.title}</CheckboxLabel>
                        </CheckboxContainer>
                    ))}
                  </SectionItems>
                </FilterSection>
              )
            })
          }
        </ExploreForm>
        <FiltersExpand>Filters</FiltersExpand>
      </ExploreFilterContainer>
  );
}

export default ExploreFilter;

------------------------------
Title of ExploreFilterValues.js:
No Title Found
const ExploreFilterValues = {
      "Destination type": [
      {
        title: "Beach vacation",
        emoji: "🏖️",
        value: "type-beach"
      },
      {
        title: "City trip",
        emoji: "🏙️",
        value: "type-city"
      },
      {
        title: "Nature adventure",
        emoji: "⛰️",
        value: "type-nature"
      },
      {
        title: "Winter vacation",
        emoji: "❄️",
        value: "type-winter"
      },],
      "Society": [
      {
        title: "Architecture",
        emoji: "🏛️",
        value: "society-architecture"
      },
      {
        title: "Sightseeing",
        emoji: "🗽",
        value: "society-sightseeing"
      },
      {
        title: "Museums",
        emoji: "🏺",
        value: "society-museums"
      },
      {
        title: "Culinary",
        emoji: "🍔",
        value: "society-culinary"
      },
      {
        title: "Sports",
        emoji: "⚽️",
        value: "society-sports"
      },
      {
        title: "Night life",
        emoji: "🍺",
        value: "society-night"
      },
      {
        title: "Kid friendly",
        emoji: "👶",
        value: "society-kid"
      }],
      "Location": [
      {
        title: "Europe",
        emoji: "🌍",
        value: "location-europe"
      },
      {
        title: "Africa",
        emoji: "🌍",
        value: "location-africa"
      },
      {
        title: "America",
        emoji: "🌎",
        value: "location-america"
      },
      {
        title: "Asia/Oceania",
        emoji: "🌏",
        value: "location-asiaoceania"
      },
      {
        title: "Other",
        emoji: "🌕",
        value: "location-other"
      }]
}

export default ExploreFilterValues;
------------------------------
Title of AddItem.js:
No Title Found
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCheck, faXmark } from '@fortawesome/free-solid-svg-icons';
import { arrayUnion, doc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase';


const AddContainer = styled.div`
    border: 1px #D6D6D6 solid;
    border-radius: 10px;
    height: 50px;
    color: #838383;
    margin-bottom: 20px;
    padding-left: 15px;
    display: flex;
    flex-direction: row;

    &:hover {
        background-color: #E8E8E8;
        cursor: pointer;
    }
`

const AddContainerForm = styled.div`
    border: 1px #D6D6D6 solid;
    border-radius: 10px;
    height: 50px;
    color: #838383;
    margin-bottom: 20px;
    padding-left: 15px;
    display: flex;
    flex-direction: row;

    &:hover {
        cursor: pointer;
    }
`

const AddTitle = styled.h1`
    font-size: 1.05rem;
    line-height: 50px;
    text-align: left;
    /* background-color: red; */
    & i {
        margin-right: 20px;
    }
`

const AddInput = styled.input`
    background: none;
    outline: none;
    font-size: 1.1em;
    font-weight: 600;
    border: none;
    font-family: "Sen", sans-serif;
    color: #081736;
    width: 80%;

    &::placeholder {
        color: #D1D1D1;
    }
`

const AddButtons = styled.div`
    display: flex;
    flex-direction: row;
`

const AddButton = styled.button`
    background: none;
    border: none;
    padding: 0px 5px;
    color: #081736;
    font-size: 1.2em;
`


function AddItem(props) {
    const [ newForm, setNewForm ] = useState(false);
    const [ title, setTitle ] = useState('');

    function handleAdd(e) {
        if (title === '') {
            alert('To-do title is empty...')
        } else {
            setNewForm(false);

            const tripRef = doc(db, "trips", props.id);
            updateDoc(tripRef, {
                checklist: arrayUnion({
                    assigned: null,
                    isAssigned: false,
                    status: 'to-do',
                    title: title
                })}).then(() => {
                console.log("Item added")
            }).catch(error => console.log(error.message));
            
            props.addItem(
                {
                    assigned: null,
                    isAssigned: false,
                    status: 'to-do',
                    title: title
                }
            )
            setTitle('');
        }
    }

    function handleCancel(e) {
        setNewForm(false);
        setTitle('');
    }

    return (
        <>
            {
                !newForm ? 
                <AddContainer onClick={() => setNewForm(true)}>
                    <AddTitle><i class="fa fa-solid fa-plus"></i>New</AddTitle>
                </AddContainer>
                :
                <AddContainerForm>
                    <AddInput value={title} onChange={(e) => setTitle(e.target.value)} placeholder="Untitled" type="text" />
                    <AddButtons>
                        <AddButton onClick={handleAdd}>
                            <FontAwesomeIcon icon={faCheck} />
                        </AddButton>
                        <AddButton onClick={handleCancel}>
                            <FontAwesomeIcon icon={faXmark} />
                        </AddButton>
                    </AddButtons>
                </AddContainerForm>
            }
        </>
    );
}

export default AddItem;
------------------------------
Title of OverviewContent.js:
No Title Found
import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus, faNoteSticky, faLink, faDollarSign } from '@fortawesome/free-solid-svg-icons';
import Popup from 'reactjs-popup';
import BlocksArea from './BlocksArea';
import { arrayUnion, doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase';


const ContentContainer = styled.div`
    width: 100vw;
    background: #fff;
    padding: 20px;

    @media screen and (max-width: 1001px) {
        width: 100vw;
    }
`

const OverviewTitle = styled.h4`
    font-family: "Lora", sans-serif;
    font-weight: 600;
`

const AddBlockButton = styled.button`
    background-color: #1746A2;
    color: #fff;
    border: none;
    border-radius: 100px;
    padding: 5px 10px;
    font-family: "Sen", sans-serif;
`

const OverviewHead = styled.div`
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    flex-wrap: wrap;
`

const BlocksOption = styled.ul`
    list-style: none;
    padding: 0px;
    margin: 0px;
`

const BlockOption = styled.li`

`

const BlockButton = styled.button`
    border: none;
    width: 100%;
    text-align: center;
    padding: 10px 5px;
    background: none;
    font-family: "Sen", sans-serif;

    &:hover {
        background: #EEEEEE;
    }
`


function OverviewContent(props) {
    const [trip, setTrip] = useState(props.trip);

    useEffect(() => {
        console.log(props);
        setTrip(props.trip);
    }, [props.trip])

    const popupStyle = {borderRadius:'10px', width: "255px", height: "auto", padding: "0px"};

    async function handleAdd(block) {
        console.log('Adding block')
        const tripRef = doc(db, "trips", props.id);
        // const docSnap = await getDoc(tripRef);
        // const currentTrip = docSnap.data();

        var newBlock;

        if (block === 'note') {
            newBlock = {
                type: 'note',
                title: "Notes",
                content: "",
                created: `${Math.random()}`
            }
        } else if (block === 'resources') {
            newBlock = {
                type: 'links',
                title: "Resources",
                content: [],
                created: `${Math.random()}`
              }
        } else if (block === 'budget') {
            newBlock = {
                type: 'budget',
                title: "Budget",
                content: {
                    'Accomodation': 0,
                    'Travel': 0,
                    'Entertainment': 0,
                    'Food': 0,
                    'Shopping': 0,
                    'Transportation': 0,
                    'Other': 0,
                },
                limit: 1000,
                created: `${Math.random()}`
            }
        }

        console.log(newBlock)

        updateDoc(tripRef, {
            blocks: arrayUnion(newBlock)
        }).then(async () => {
            console.log('Block added')
            const tripRefGet = doc(db, "trips", props.id);
            const docSnap = await getDoc(tripRefGet);
            const currentTrip = docSnap.data();
            // props.saveTrip(newBlock);
            var newTrip = {
                ...trip,
                blocks: [...currentTrip.blocks, newBlock]
            }
            // setTrip(newTrip);
            setTrip({ ...trip, blocks: [...trip.blocks, newBlock]})
        }).catch((error) => console.log(error.message))
    }

    const updateTrip = useCallback((newTrip) => {
        setTrip(newTrip)
    })

    return (
        <ContentContainer>
            <OverviewHead>
                <OverviewTitle>Hey, welcome to your {trip.title} trip</OverviewTitle>
                <Popup
                    trigger={<AddBlockButton><FontAwesomeIcon icon={faPlus}/> Add Block</AddBlockButton>}
                    position="left center"
                    contentStyle={popupStyle}
                    closeOnDocumentClick
                >
                    <BlocksOption>
                        <BlockOption><BlockButton style={{borderRadius: '10px 10px 0px 0px'}} onClick={() => handleAdd('note')}><FontAwesomeIcon icon={faNoteSticky} /> Notes</BlockButton></BlockOption>
                        <BlockOption><BlockButton onClick={() => handleAdd('resources')}><FontAwesomeIcon icon={faLink} /> Resources</BlockButton></BlockOption>
                        <BlockOption><BlockButton style={{borderRadius: '0px 0px 10px 10px'}} onClick={() => handleAdd('budget')}><FontAwesomeIcon icon={faDollarSign} /> Budget</BlockButton></BlockOption>
                    </BlocksOption>
                </Popup>
            </OverviewHead>
            <BlocksArea updateTrip={updateTrip} id={props.id} trip={trip}/>
        </ContentContainer>
    );
}

export default OverviewContent;

------------------------------
Title of TripLists.js:
No Title Found
import React, { useState, useEffect, useCallback } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import ListCategory from './ListCategory';
import NewList from './NewList';
import { doc, getDoc } from 'firebase/firestore';
import { db } from '../../firebase';


const ListsContainer = styled.div`
    margin: 0;
    padding: 30px 30px 15px 15px;
    width: 100vw;
    display: flex;
    flex-direction: row;
    justify-content: center;
    background-color: #fff;
    flex-wrap: wrap;
`


function TripLists(props) {
    const [ trip, setTrip ] = useState(props.trip);

    useEffect(() => {
        console.log(props);
        setTrip(props.trip);
    }, [])

    const saveList = useCallback((item) => {
        setTrip(prevTrip => ({
            ...prevTrip,
            lists: [...prevTrip.lists, item]
        }));
    }, []);

    const deleteList = useCallback((updatedLists) => {
        updateTrips()
        props.refreshTrip()
    }, []);


    async function updateTrips() {
        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef).then()

        if (docSnap.exists()) {
            console.log("Document data:", docSnap.data());
            var tripResponse = docSnap.data()
            setTrip(tripResponse)
        }
        else {
            console.log("Doesn't exist")
        }
    }

    return (
        <ListsContainer style={{display: props.display}}>
            {
                trip.lists.map((item) => (
                    <ListCategory refreshTrip={props.refreshTrip} updateTrip={props.updateTrip} key={item.title} deleteList={deleteList} trip={trip} id={props.id} list={item} />
                ))
            }
            <NewList id={props.id} trip={trip} saveList={saveList} />
        </ListsContainer>
    );
}

export default TripLists;

------------------------------
Title of Accomodations.js:
No Title Found
import React, { useState, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';

const AccomodationsContainer = styled.div`

`

function Accomodations(props) {
    const [trip, setTrip] = useState(props.trip)

    useEffect(() => {
        console.log(props);
        setTrip(props.trip);
        
    }, [props.trip])

    return (
        <AccomodationsContainer>
            
        </AccomodationsContainer>
    );
}

export default Accomodations;

------------------------------
Title of PlaceNotes.js:
No Title Found
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';

const NotesContainer = styled.div`
    font-family: "Sen", sans-serif;
    width: 100%;
    border: 1px solid #ccc;
    border-radius: 5px;
    padding: 10px;
    box-sizing: border-box;
`

const TextArea = styled.textarea`
    width: 100%;
    border: none;
    outline: none;
    resize: none;
    font-size: 16px;
    line-height: 1.5;
`

function PlaceNotes(props) {
    const [ item, setItem ] = useState(props.item);

    useEffect(() => {
        console.log(item)
        setItem(props.item);
    }, [])

    //test
    return (
        <NotesContainer>
            <TextArea placeholder="Add notes, links, etc."/>
        </NotesContainer>
    );
}

export default PlaceNotes;

------------------------------
Title of ListBanner.js:
No Title Found
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import EmojiImg from '../EmojiImg';
import Picker from '@emoji-mart/react';
import data from '@emoji-mart/data';
import Popup from 'reactjs-popup';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase';


const BannerContainer = styled.div`
    position: relative;
    border-radius: inherit;
    border-bottom-left-radius: 0px;
    border-bottom-right-radius: 0px;
    height: 150px;
    border-bottom: 2.5px solid #000;
    box-sizing: border-box;
`

const BannerHeader = styled.div`
    color: #000;
    background-color: #fff;
    z-index: 3;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 15px;
    border-radius: 10px;
    display: flex;
    justify-content: center;
    align-items: center;

    @media screen and (max-width: 600px) {
        padding: 10px;
    }

    @media screen and (max-width: 500px) {
        padding: 0px 10px;
    }
`

const BannerTitle = styled.p`
    font-weight: 700;
    font-size: 1.7em;
    font-family: 'Lora', serif;
    text-transform: uppercase;
    margin: 0px;
    display: inline;

    @media screen and (max-width: 600px) {
        font-size: 1.5em;
    }

    @media screen and (max-width: 500px) {
        font-size: 1.3em;
    }
`

const BackgroundImg = styled.img`
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    object-fit: cover;
    border-radius: inherit;
    z-index: 1;
`

const IconsContainer = styled.div`
    position: absolute;
    top: 0px;
    right: 0px;
    margin: 10px;
    display: flex;
    flex-direction: row;
    z-index: 5;
    font-size: 1.1em;
`

const IconI = styled.i`
    color: #fff;
    cursor: pointer;
    margin-right: 10px;
`

const EmojiContainer = styled.div`
    display: inline-flex;
    justify-content: center;
    align-items: center;
    height: 50px;
    width: 50px;
    transition: 0.15s ease;
    border-radius: 10px;
    margin-left: 10px;
    cursor: pointer;

    &:hover {
        background-color: rgba(100, 100, 100, 0.5);
    }
`

const contentStyleEmoji = {borderRadius:'10px', width: "363px", height: "447.5px"};


function ListBanner(props) {
    const [ trip, setTrip ] = useState(props.trip);
    const [ list, setList ] = useState(props.list);
    const [ emoji, setEmoji ] = useState(props.list.emoji)

    useEffect(() => {
        // console.log(props.list);
        setTrip(props.trip)
        setList(props.list);
    }, [props.list, props.trip])

    async function onEmojiSelect(emoji) {
        setEmoji(emoji.native);
        const tripRef = doc(db, "trips", props.id);
        const tripData = (await getDoc(tripRef)).data();

        const listIndex = tripData.lists.findIndex(l => l.title === list.title);

        // Update the emoji property of the list at the specified index
        const updatedList = {
        ...tripData.lists[listIndex],
            emoji: emoji.native
        };

        // Create a new array with the updated list
        const updatedLists = [
        ...tripData.lists.slice(0, listIndex),
        updatedList,
        ...tripData.lists.slice(listIndex + 1)
        ];

        // Update the document in Firestore with the new array of lists
        await updateDoc(tripRef, { lists: updatedLists });


        // updateDoc(tripRef, {
            
        // }).then(() => {
        //     console.log("emoji changed")
        // }).catch(error => console.log(error.message));
    }

    
    return (
        <BannerContainer background={list.img}>
            <BackgroundImg src={list.img}/>
            <BannerHeader>
                <BannerTitle>{list.title}</BannerTitle>
                {/* <EmojiContainer> */}
                <Popup
                            trigger={open => (
                                <EmojiContainer>
                                    <EmojiImg size="32px" emoji={emoji} />
                                </EmojiContainer>
                            )}
                            position="bottom center"
                            nested
                            contentStyle={contentStyleEmoji} 
                        >
                            <div>
                                <Picker native={false} data={data} onEmojiSelect={onEmojiSelect} />
                                {/* <EmojiPicker onEmojiClick={(emoji) => setEmoji(emoji.emoji)} /> */}
                            </div>
                    </Popup>
                {/* </EmojiContainer> */}
            </BannerHeader>
            {/* <IconsContainer>
                <IconI className="fa fa-solid fa-image"></IconI>
                <IconI className="fa fa-solid fa-pencil"></IconI>
            </IconsContainer> */}
        </BannerContainer>
    );
}

export default ListBanner;

------------------------------
Title of LocationPin.js:
No Title Found
import React, { useState, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';

const LocationPin = ({ text }) => (
    <div className="pin">
      {/* <Icon icon={locationIcon} className="pin-icon" /> */}
      <p className="pin-text">{text}</p>
    </div>
)

export default LocationPin
------------------------------
Title of TripBudget.js:
udgetComponent from './BudgetComponent';
import React, { useState, useEffect } from 'react';
import { Tab } from 'react-bootstrap';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
//import BudgetComponent from './BudgetComponent';
import BudgetGraphComponent from './BudgetGraphComponent';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCoins } from '@fortawesome/free-solid-svg-icons';

const PageContainer = styled.div`
    width: 100vw;
    padding-top: 40px;
`

const BudgetMain = styled.div`
    padding: 20px;
    margin-bottom: 20px;
`

const BudgetGraph = styled.div`
    margin-bottom: 20px;
`

const ItemLabel = styled.h5`
    margin: 0px;
`

const ItemAmount = styled.h6`
    margin: 0px;
`

const BudgetInput = styled.input`
  width: 100%;
  padding: 10px;
  border: none;
  border-bottom: 1px solid #ddd;
  font-size: 16px;
  margin-bottom: 10px;

  &:focus {
    outline: none;
    border-bottom: 1px solid var(--darkBlue);
  }
`;

const BudgetButton = styled.button`
  background-color: var(--darkBlue);
  font-family: "Sen", sans-serif;
  font-weight: 550;
  color: white;
  border: none;
  border-radius: 10px;
  padding: 10px;
  font-size: 16px;
  margin-top: 10px;
  width: 100%;
  cursor: pointer;

  &:hover {
    background-color: #757687;
  }
`;

const BudgetTable = styled.table`
    font-family: "Sen", sans-serif;
    width: 100%;
    margin: 0px;
`

const TableHead = styled.th``

const TableRow = styled.tr`
    &:nth-child(even) {
    background-color: #dddddd;
    }
`

const TableData = styled.td`
    border: 1px solid #dddddd;
    text-align: left;
    padding: 12px 8px;
`

const AddRow = styled.tr``

function TripBudget(props) {
    const [trip, setTrip] = useState({...props.trip});
    const [budgetName, setBudgetName] = useState('');
    const [budgetAmount, setBudgetAmount] = useState('');
    const [sum, setSum] = useState(0)

    useEffect(() => {
        console.log(trip);
        setTrip(props.trip);
        let s = 0;
        props.trip.budget.forEach(element => {
            s += element.amount;
        });
        setSum(s);
    }, [props.trip])

  return (
    trip ?
        // <BudgetComponent/>
        <PageContainer>
            <div className="container">
                <div className="row">
                    <BudgetMain className="col-lg-6 col-md-12">
                        <BudgetTable>
                            {/* <TableHead>
                                <TableData>Label</TableData>
                                <TableData>Amount</TableData>
                            </TableHead> */}
                            {trip.budget.map((item, index) => (
                                <TableRow key={index}>
                                    <TableData><ItemLabel>{item.label}</ItemLabel></TableData>
                                    <TableData><ItemAmount>${item.amount}</ItemAmount></TableData>
                                </TableRow>
                            ))}
                            <TableRow>
                                <TableData><ItemLabel><b>Total</b></ItemLabel></TableData>
                                <TableData><ItemAmount><b>${`${sum}`}</b></ItemAmount></TableData>
                            </TableRow>
                            <AddRow>
                                <TableData>
                                    <BudgetInput
                                        type="text"
                                        placeholder="Item name"
                                        value={budgetName}
                                        onChange={(e) => setBudgetName(e.target.value)}
                                    />
                                </TableData>
                                <TableData>
                                    <BudgetInput
                                        type="number"
                                        placeholder="Amount"
                                        value={budgetAmount}
                                        onChange={(e) => setBudgetAmount(e.target.value)}
                                    />
                                </TableData>
                            </AddRow>
                        </BudgetTable>
                        <BudgetButton><FontAwesomeIcon icon={faCoins}/> Add Item</BudgetButton>
                    </BudgetMain>
                    <BudgetGraph className="col-lg-6 col-md-12">
                        <BudgetGraphComponent budget={trip.budget} />
                    </BudgetGraph>
                </div>
            </div>
        </PageContainer>
    :
        <></>
    );
}

export default TripBudget;
------------------------------
Title of BudgetComponent.js:
udgetBreakdown = styled.div`
import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import Chart from 'chart.js';

const StyledBudget = styled.div`
  display: flex;
  flex-direction: column;
  border: 1px solid #ddd;
  border-radius: 5px;
  margin: 20px;
`;

const BudgetHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  /* background-color: #f5f5f5; */
  border-bottom: 1px solid #ddd;
`;

const Title = styled.h2`
  margin: 0;
  font-family: "Lora", serif;
`;

const BudgetTotal = styled.span`
  font-size: 24px;
`;

const BudgetInput = styled.input`
  width: 100%;
  padding: 10px;
  border: none;
  border-bottom: 1px solid #ddd;
  font-size: 16px;
  margin-bottom: 10px;

  &:focus {
    outline: none;
    border-bottom: 1px solid #008cba;
  }
`;

const BudgetButton = styled.button`
  background-color: #008cba;
  color: white;
  border: none;
  border-radius: 5px;
  padding: 10px;
  font-size: 16px;
  cursor: pointer;

  &:hover {
    background-color: #006d8c;
  }
`;

const BudgetList = styled.ul`
  list-style: none;
  margin: 0;
  padding: 0;
`;

const BudgetItem = styled.li`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  border-bottom: 1px solid #ddd;
`;

const BudgetName = styled.span`
  flex: 1;
`;

const BudgetAmount = styled.span`
  font-weight: bold;
`;

const BudgetGraph = styled.canvas`
  margin-top: 20px;
`;

// const BudgetBreakdown = styled.div`

// `

const BudgetComponent = () => {
  const [budgetItems, setBudgetItems] = useState([]);
  const [budgetName, setBudgetName] = useState('');
  const [budgetAmount, setBudgetAmount] = useState('');
  const [chartData, setChartData] = useState(null);

  useEffect(() => {
    if (budgetItems.length) {
      const labels = budgetItems.map(item => item.name);
      const data = budgetItems.map(item => item.amount);
        const colors = [ "#000" ]
    //   const colors = generateColors(budgetItems.length);

      const newChartData = {
        labels,
        datasets: [
          {
            data,
            backgroundColor: colors,
          },
        ],
      };

      setChartData(newChartData);
    }
  }, [budgetItems]);

  const handleAddItem = () => {
    if (budgetName && budgetAmount) {
      const newItem = {
        name: budgetName,
        amount: Number(budgetAmount),
      };

      setBudgetItems([...budgetItems, newItem]);
      setBudgetName('');
      setBudgetAmount('');
    }
  };

  const handleDeleteItem = (index) => {
    const newBudgetItems = [...budgetItems];
    newBudgetItems.splice(index, 1);
    setBudgetItems(newBudgetItems);
  };

  const budgetTotal = budgetItems.reduce((total, item) => total + item.amount, 0);

  return (
    <StyledBudget>
      <BudgetHeader>
        <Title>Total</Title>
        <BudgetTotal>${budgetTotal.toFixed(2)}</BudgetTotal>
      </BudgetHeader>
      <div className="container">
      <div>
        <BudgetInput
          type="text"
          placeholder="Item name"
          value={budgetName}
          onChange={(e) => setBudgetName(e.target.value)}
        />
        <BudgetInput
          type="number"
          placeholder="Amount"
          value={budgetAmount}
          onChange={(e) => setBudgetAmount(e.target.value)}
        />
        <BudgetButton onClick={handleAddItem}>Add Item</BudgetButton>
      </div>
      </div>
      <BudgetList>
        {budgetItems.map((item, index) => (
          <BudgetItem key={index}>
            <BudgetName>{item.name}</BudgetName>
            <BudgetAmount>${item.amount.toFixed(2)}</BudgetAmount>
            <BudgetButton onClick={() => handleDeleteItem(index)}>Delete</BudgetButton>
          </BudgetItem>
        ))}
      </BudgetList>
      {/* <BudgetBreakdown>
        <Title>Budget Breakdown</Title>
        <BudgetChart>
          {budgetItems.map((item, index) => (
            <BudgetBar key={index} percentage={(item.amount / budgetTotal) * 100}>
              <BudgetBarLabel>{item.name}</BudgetBarLabel>
            </BudgetBar>
          ))}
        </BudgetChart>
      </BudgetBreakdown> */}
    </StyledBudget>
  );
}

export default BudgetComponent;
------------------------------
Title of Activity.js:
No Title Found
import React from 'react';
import styled from 'styled-components';

const ActivityWrapper = styled.div`
  margin-left: 20px;
  margin-bottom: 10px;
`;

const ActivityTitle = styled.h3`
  margin: 0;
`;

const ActivityDescription = styled.p`
  margin: 5px 0;
`;

const Activity = ({ activity }) => {
  return (
    <ActivityWrapper>
      <ActivityTitle>{activity.title}</ActivityTitle>
      <ActivityDescription>{activity.description}</ActivityDescription>
    </ActivityWrapper>
  );
};

export default Activity;

------------------------------
Title of Itinerary.js:
No Title Found
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import EmojiImg from '../EmojiImg';
import Day from './Day';


const StyledItinerary = styled.div`
  border: 1px solid #ddd;
  border-radius: 5px;
  margin: 20px;
`;


function Itinerary(props) {
    const [ trip, setTrip ] = useState(props.trip);

    useEffect(() => {
        setTrip(props.trip);
    }, [props.trip])

    
    const [activeIndex, setActiveIndex] = useState(null);

    const onTitleClick = (index) => {
        if (activeIndex == index) {
            setActiveIndex(null);
        } else {
            setActiveIndex(index);
        }
    };

    return (
        <StyledItinerary>
        {trip.itinerary.map((day, index) => (
            <Day
                key={index}
                day={day}
                index={index}
                activeIndex={activeIndex}
                onTitleClick={onTitleClick}
            />
        ))}
        </StyledItinerary>
    )
}

export default Itinerary;

------------------------------
Title of myTripsDashboard.js:
No Title Found
import React, { useState, useEffect, useContext, useCallback } from 'react';
import ReactDOM from 'react-dom';
import { Link } from 'react-router-dom';
import styled from 'styled-components';
import { AuthContext } from '../../Auth';
import EmojiImg from '../EmojiImg';
import NewTrip from './NewTrip';
import TripItemDashboard from './TripItemDashboard';
import { collection, getDocs, query, where } from 'firebase/firestore';
import { db } from '../../firebase';
import WorldLoader from '../WorldLoader';


const MyTripsDashboardContainer = styled.div`
padding: 30px;
`

const MyTripsHeading = styled.h1`
font-family: 'Lora', serif;
font-weight: 700;
opacity: 1;
margin-bottom: 30px;
`

const NoTrips = styled.h1`
font-family: 'Sen', sans-serif;
font-weight: 700;
font-size: 4rem;
margin-top: 100px;

@media (max-width: 990px) {
    font-size: 3rem;
}
`

const EmojiSpan = styled.span`
opacity:  1;
`

const HeadingSpan = styled.span`
opacity: 0.775;
`

const ExploreLink = styled.span`
    color: #292929;
    opacity: 1;
    text-decoration: none;
    cursor: pointer;
    background: 
    linear-gradient(to right, #1746A2, #1746A2),
    linear-gradient(to right, #2192FF, #38E54D);
    background-size: 100% 0.1em, 0 0.1em;
    background-position: 100% 100%, 0 100%;
    background-repeat: no-repeat;
    transition: all 400ms;

    &:hover, &:focus {
        background-size: 0 0.1em, 100% 0.1em;
        color: #000;
    }
`

const Loader = styled.div`
    margin-top: 100px;
`


function MyTripsDashboard(props)
{
    const [trips, setTrips] = useState([]);
    const [ tripss, setTripss ] = useState(false);
    const { currentUser } = useContext(AuthContext);
    const [ loading, setLoading ] = useState(false);

    useEffect(() => {
        console.log(currentUser);
        document.title = `My Trips`
        getTrips(); // firebase
    }, [])

    function getTrips() {
        setLoading(true);
        console.log(currentUser.uid)
        const tripsCollectionRef = query(collection(db, "trips"), where("users", "array-contains", currentUser.uid));
        getDocs(tripsCollectionRef).then(response => {
            console.log(response);
            const tripsResponse = response.docs.map(doc => ({
                    data: doc.data(),
                    id: doc.id
            }));

            setTrips(tripsQuicksort(tripsResponse));
            setLoading(false);
        }).catch(error => console.log(error.message));
    }

    function tripsQuicksort(arr) {
        if (arr.length <= 1) {
            return arr;
        }

        let pivot = arr[0];
        let leftArr = [];
        let rightArr = [];

        for (let n = 1; n < arr.length; n++) {
            if (arr[n].data.date.start >= pivot.data.date.start) {
                leftArr.push(arr[n]);
            } else {
                rightArr.push(arr[n]);
            }
        }

        return [...tripsQuicksort(leftArr), pivot, ...tripsQuicksort(rightArr)]
    }

    const updateTrips = useCallback(() => {
        getTrips()
    }, []);

    return (
        <MyTripsDashboardContainer>
            <MyTripsHeading>My Trips <EmojiImg size="45px" emoji="✈️"/> <NewTrip updateTrips={updateTrips} /></MyTripsHeading>
            <div className="container">
                <div className="dashboard-row row">
                        {trips.length > 0 ?
                        trips.map((trip, index) => (
                            <div key={index} className="col-lg-4 col-md-6 col-sm-12">
                                <TripItemDashboard key={`${index}-${Math.random()}`} updateTrips={updateTrips} id={trip.id} trip={trip.data}/>
                            </div>
                        )) :
                            <>
                                { loading ?
                                    <Loader>
                                        <WorldLoader/>
                                    </Loader>
                                    :
                                    <NoTrips><HeadingSpan>Oh no! You better start planning your next trip. <Link to="/explore" style={{textDecoration: 'none'}}><ExploreLink>Explore<EmojiSpan> 🌎</EmojiSpan></ExploreLink></Link></HeadingSpan></NoTrips>
                                }
                            </>
                        }
                </div>
            </div>
        </MyTripsDashboardContainer>
    );
}


export default MyTripsDashboard;
------------------------------
Title of TripActivities.js:
No Title Found
import React, { useState, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import Accomodations from './Accomodations';
import Flights from './Flights';

const PageContainer = styled.div``

function TripActivities(props) {
    const [trip, setTrip] = useState(props.trip)

    useEffect(() => {
        console.log(props);
        setTrip(props.trip);
        
    }, [props.trip])

    return (
        <PageContainer>
            ac
        </PageContainer>
    );
}

export default TripActivities;

------------------------------
Title of Place.js:
No Title Found
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import PlaceNotes from './PlaceNotes';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faBookmark, faMap, faTrash } from '@fortawesome/free-solid-svg-icons';

const PlaceContainer = styled.div`
    max-width: 100%;
    min-height: 130px;
    background: rgb(255, 255, 255);
    -webkit-box-shadow: 0px 0px 10px 2px rgba(0,0,0,0.11); 
    box-shadow: 0px 0px 10px 2px rgba(0,0,0,0.11);
    margin: 20px 10px;
    border-radius: 10px;
    padding: 15px 10px 15px 15px;
    position: relative;
`

const PlaceTitle = styled.h4`
    font-family: "Sen", sans-serif;
    font-weight: 600;
`

const PlaceDescription = styled.p`

`

const PlaceAddress = styled.p`
    font-family: "Sen", sans-serif;
    font-style: italic;
    font-weight: 500;
`

const PlaceIcons = styled.div`
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 1.25em;
    background-color: #fff;
    border-radius: 10px;
    padding: 6.5px;
    z-index: 101;

    & * {
        cursor: pointer;
        margin: 4px;
        color: rgb(47, 47, 47) !important;
    }

    & a {
        color: rgb(47, 47, 47) !important;
    }
`

const PlaceContent = styled.div`
    margin-left: 160px;

    @media screen and (max-width: 600px) {
        margin-left: 0px;
        margin-top: 130px;
    }
`

const PlaceImg = styled.img`
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 160px;
    border-radius: 10px 0px 0px 10px;
    object-fit: cover;

    @media screen and (max-width: 600px) {
        width: 100%;
        height: 130px;
        border-radius: 10px 10px 0px 0px;
    }
`

const PaddingRight = styled.div`
    padding-right: 75px;
`

const SavePlace = styled.button`
    background: none;
    border: none;
    outline: none;
    margin: 0;
    padding: 0;
`

const DeleteButton = styled.button`
    background: none;
    border: none;
    outline: none;
    margin: 0;
    padding: 0;
`


function Place(props) {
    const [ item, setItem ] = useState(props.item);

    useEffect(() => {
        setItem(props.item);
    }, [])

    async function savePlace (e) {
        if (item.position.lat) {
            console.log(item.position.lat)
            const newItem = {
                title: item.title,
                link: item.link,
                img: item.img,
                address: item.address,
                position: {lat: item.position.lat.toString(), lng: item.position.lng.toString()},
            }
    
            const tripRef = doc(db, "trips", props.id);
    
            // Get the current trip data from Firestore
            const tripData = (await getDoc(tripRef)).data();
    
            const listIndex = tripData.lists.findIndex(l => l.title === props.list.title);
            var list = tripData.lists[listIndex]
    
            // Make sure the list object was found before continuing
            if (list) {
                // Find the index of the list object in the `lists` array
                const listIndex = tripData.lists.findIndex(obj => obj.title === props.list.title);
    
                // check if item is already in list
                var alreadyExists = false;
                for (let i = 0; i < tripData.lists[listIndex].items.length; i++) {
                    if (tripData.lists[listIndex].items[i].title === item.title) {
                        alreadyExists = true;
                        break
                    }
                }
    
                if (!alreadyExists) {
                    props.updateList({
                        title: item.title,
                        link: item.link,
                        img: item.img,
                        address: item.address,
                        position: {lat: item.position.lat.toString(), lng: item.position.lng.toString()},
                    })
        
                    
                    // Create a new array of list objects with the updated items array
                    const updatedLists = [
                        ...tripData.lists.slice(0, listIndex),
                        {
                        ...list,
                        items: [...tripData.lists[listIndex].items, newItem]
                        },
                        ...tripData.lists.slice(listIndex + 1)
                    ];
        
                    // Update the Firestore document with the new list data
        
                    await updateDoc(tripRef, { lists: updatedLists }).then(() => props.refreshTrip());
                } else {
                    alert('Item already added');
                }
    
            } else {
                console.error(`List with title "${props.list.title}" not found.`);
            }
        }
    }
    
    async function deletePlace(e) {
        const tripRef = doc(db, "trips", props.id);

        // Get the current trip data from Firestore
        const tripData = (await getDoc(tripRef)).data();

        var list = props.list

        // Make sure the list object was found before continuing
        if (list) {
            // Find the index of the list object in the `lists` array
            const listIndex = tripData.lists.findIndex(obj => obj.title === props.list.title);
            list = tripData.lists[listIndex]

            // Go over the items in the list and delete when i.title === item.title
            var oldItems = tripData.lists[listIndex].items;
            var newItems = [];

            for (let i = 0; i < oldItems.length; i++) {
                if (oldItems[i].title !== item.title) {
                    newItems.push(oldItems[i])
                }
            }

            
            // Calling prop function to sync state
            props.deletePlace(newItems)

            // Create a new array of list objects with the updated items array
            const updatedLists = [
                ...tripData.lists.slice(0, listIndex),
                {
                ...list,
                items: [...newItems]
                },
                ...tripData.lists.slice(listIndex + 1)
            ];
    
            // Update the Firestore document with the new list data
    
            await updateDoc(tripRef, { lists: updatedLists }).then(() => props.refreshTrip());

        } else {
            console.error(`List with title "${props.list.title}" not found.`);
        }
    }

    return (
        <>
            { props.new ?
                <>
                    {item.img ?
                        <PlaceContainer>
                            <PlaceIcons>
                                <a href={item.link} target="a_blank">
                                    <FontAwesomeIcon icon={faMap} />
                                </a>
                                <SavePlace onClick={savePlace}>
                                    <FontAwesomeIcon icon={faBookmark}/>
                                </SavePlace>
                            </PlaceIcons>
                            <PlaceContent>
                                <PaddingRight>
                                    <PlaceTitle>{item.title}</PlaceTitle>
                                    <PlaceAddress>{item.address}</PlaceAddress>
                                </PaddingRight>
                            </PlaceContent>
                            <PlaceImg src={item.img} />
                        </PlaceContainer>
                    :
                        <PlaceContainer>
                            <PlaceIcons>
                                <a href={item.link} target="a_blank">
                                    <FontAwesomeIcon icon={faMap} />
                                </a>
                                <SavePlace onClick={savePlace}>
                                    <FontAwesomeIcon icon={faBookmark}/>
                                </SavePlace>
                            </PlaceIcons>
                            <PaddingRight>
                                <PlaceTitle>{item.title}</PlaceTitle>
                                <PlaceAddress>{item.address}</PlaceAddress>
                            </PaddingRight>
                        </PlaceContainer>
                    }
                </>
            :
                <>
                    {item.img ?
                        <PlaceContainer>
                            <PlaceIcons>
                                <a href={item.link} target="a_blank">
                                    <FontAwesomeIcon icon={faMap} />
                                </a>
                                <DeleteButton onClick={deletePlace}>
                                    <FontAwesomeIcon icon={faTrash} />
                                </DeleteButton>
                            </PlaceIcons>
                            <PlaceContent>
                                <PaddingRight>
                                    <PlaceTitle>{item.title}</PlaceTitle>
                                    <PlaceAddress>{item.address}</PlaceAddress>
                                </PaddingRight>
                                {/* <PlaceNotes item={item}/> */}
                            </PlaceContent>
                            <PlaceImg src={item.img} />
                        </PlaceContainer>  
                    :
                        <PlaceContainer>
                            <PlaceIcons>
                                <a href={item.link} target="a_blank">
                                    <FontAwesomeIcon icon={faMap} />
                                </a>
                                <DeleteButton onClick={deletePlace}>
                                    <FontAwesomeIcon icon={faTrash} />
                                </DeleteButton>
                            </PlaceIcons>
                            <PaddingRight>
                                <PlaceTitle>{item.title}</PlaceTitle>
                                <PlaceAddress>{item.address}</PlaceAddress>
                            </PaddingRight>
                            {/* <PlaceNotes item={item}/> */}
                        </PlaceContainer> 
                    }
                </>
            }
        </>
    );
}

export default Place;

------------------------------
Title of TripShareContainer.js:
No Title Found
import React, { useState, useEffect, useCallback, useContext } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import Tooltip from 'react-bootstrap/Tooltip';
import Button from 'react-bootstrap/Button';
import OverlayTrigger from 'react-bootstrap/OverlayTrigger'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faXmark, faTrash } from '@fortawesome/free-solid-svg-icons';
import { collection, doc, getDocs, query, updateDoc, where } from 'firebase/firestore';
import { db } from '../../firebase';
import { AuthContext } from '../../Auth';
import { useNavigate } from 'react-router-dom';


const ShareContainer = styled.div`
    margin-top: 10px;
    margin-right: 20px;
    float: right;
    display: flex;
`

const Modal = styled.div`
    width: 600px;
    min-height: 500px;
    background-color: #F1F1F1;
    border-radius: 10px;
    padding: 20px;
    position: relative;

    @media (max-width: 650px) {
        width: 85vw;
    }
`

const ModalTitle = styled.h3`
    color: #000;
    font-family: "Lora", sans-serif;
`

const WindowBox = styled.div`
    box-sizing: border-box;
    width: 100vw;
    height: 100vh;
    background-color: rgba(200, 200, 200, .3);
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1;
    justify-content: center;
    align-items: center;
`

const BackContainer = styled.div`
    margin: 10px;
    position: absolute;
    top: 0px;
    right: 0px;
    cursor: pointer;
    font-family : "Sen", "sans-serif";
    background-color: #F1F1F1;
    z-index: 4;
    width: 40px;
    height: 40px;
    padding: 5px 10px;
    transition: 0.25s ease;
    display: flex;
    justify-content: center;
    align-items: center;


    &:hover {
        background-color: #fff;
        border-radius: 100%;
    }
`

const BackIcon = styled.i`

`

const ShareForm = styled.div`
    margin-top: 20px;
`

const ShareInput = styled.input`
    border: 1px #cfcfcf solid;
    border-radius: 3.5px;
    background: #F1F1F1;
    height: 35px;
    font-family: "Sen", sans-serif;
    padding-left: 10px;
    width: calc(70% - 20px);

    &:focus {
        outline: 1.5px #1746A2 solid !important;
        border-color: #1746A2;
        /* box-shadow: 0 0 10px #1746A2; */
    }

    @media (max-width: 550px) {
        width: calc(85vw - 40px);
    }
`

const ShareSend = styled.button`
    background-color: #1746A2;
    border-radius: 3.5px;
    height: 35px;
    width: calc(30%);
    font-family: "Sen", sans-serif;
    border: none;
    color: #F1F1F1;
    margin-left: 10px;

    @media (max-width: 550px) {
        margin-top: 10px;
        margin-left: 0px;
        width: calc(85vw - 40px);
    }
`

const MembersTitle = styled.h5`
    font-family: "Lora", sans-serif;
    margin-top: 20px;
`

const MembersContainer = styled.div`
    margin-top: 10px;
    border: 1px #cfcfcf solid;
    border-radius: 10px;
    height: 250px;
    overflow: scroll;
    padding: 0px;
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;

    &::-webkit-scrollbar {
        display: none;
    }
`

const Member = styled.div`
    position: relative;
    display: flex;
    flex-direction: row;
    height: 50px;
    margin: 10px;
    transition: 0.1s all ease-in;
    border-radius: 100px 20px 20px 100px;

    &:hover {
        background-color: #fff;

        .deleteContainer {
            display: flex;
        }
    }
`

const MemberImg = styled.img`
    width: 40px;
    height: 40px;
    margin: 5px;
    border-radius: 100px;
    display: block;
`

const MemberEmail = styled.p`
    display: block;
    height: 100%;
    line-height: 50px;
    margin-left: 10px;
    font-family: "Sen", sans-serif;
`

const Quote = styled.p`
    font-family: "Sen", sans-serif;
    font-size: 1.05em;
    /* position: absolute;
    bottom: 0px; */
    padding-top: 40px;
    text-align: center;
    font-style: italic;
    margin-bottom: 0px;
    margin-top: auto;

    @media (max-width: 650px) {
        padding-top: 20px;
    }
`

const DeleteContainer = styled.div`
    color: #081736;
    position: absolute;
    justify-content: center;
    align-items: center;
    right: 10px;
    top: 0px;
    height: 100%;
    display: none;
`

const ShareButton = styled(Button)`
    background: #081736;
    font-family: "Sen", sans-serif;

    &:hover {
        background: #F1F1F1;
        color: #081736;
    }
`


function TripShareContainer(props) {
    const [members, setMembers] = useState(props.members);
    const [ newMember, setNewMember ] = useState('');
    const [ show, setShow ] = useState('none');
    const { currentUser } = useContext(AuthContext);
    const [ trip, setTrip ] = useState(props.trip)

    useEffect(() => {
        setTrip(props.trip)
    }, [props.trip])

    const wrapperSetShow = useCallback(val => {
        setShow(val);
    }, [setShow]);

    const handleShare = (e) => {
        const emailRegex = /^\S+@\S+\.\S+$/;
        if (emailRegex.test(newMember)) {
            const userCollectionRef = query(collection(db, "users"), where("email", "==", newMember));
            getDocs(userCollectionRef).then(response => {
                const userResponse = response.docs.map(doc => ({
                    data: doc.data(),
                }))
                if (userResponse.length > 0) {
                    // check if user already is part of the trip
                    if (props.trip.users.includes(userResponse[0].data.uid)) {
                        alert('User already part of this trip')
                    } else {
                        console.log(userResponse)
                        var newUsers = props.trip.users;
                        newUsers.push(userResponse[0].data.uid);

                        var newMembers = props.trip.members;
                        newMembers.push({
                            img: userResponse[0].data.photoURL,
                            uid: userResponse[0].data.uid,
                            username: userResponse[0].data.email
                        })

                        console.log(newUsers)
                        console.log(newMembers)

                        setMembers(newMembers)

                        const tripRef = doc(db, "trips", props.id);
                        updateDoc(tripRef, {
                            users: newUsers,
                            members: newMembers
                        }).then(() => {
                            setNewMember('');
                            setShow('none');
                        });
                    }
                } else {
                    alert("Please enter the email of a valid Volta user")
                }
            }).catch(error => console.log(error.message));
        } else {
            alert("Please enter a valid email")
        }
    }

    const navigate = useNavigate()

    const handleRemove = (e, uid) => {
        // removing collaborator
        var newUsers = trip.users; // remove user from trip members and all checklist items he's assigned to
        console.log(newUsers)
        var removeID = uid;
        var index = newUsers.findIndex(item => item === removeID);
        if (index > -1) {
            newUsers.splice(index, 1);
            // now removing from the members array
            var newMembers = trip.members;
            newMembers = newMembers.filter(member => member.uid !== removeID);
            console.log(newMembers)
            // now removing all checklist todos
            var newChecklist = trip.checklist;
            for (let i = 0; i < newChecklist.length; i++) {
                if (newChecklist[i].isAssigned && newChecklist[i].assigned.username === removeID) {
                    newChecklist[i].isAssigned = false;
                    newChecklist[i].assigned = null;
                }
            }

            const tripRef = doc(db, "trips", props.id);
            updateDoc(tripRef, {
                users: newUsers,
                members: newMembers,
                checklist: newChecklist
            }).then(() => {
                setShow('none');
                setTrip({...trip, members: newMembers, checklist: newChecklist, users: newUsers});
                setMembers(newMembers)
            }).catch(error => console.log(error.message));
        } else {
            console.log('user not found')
        }
    }

    return (
        <ShareContainer>
            <OverlayTrigger
                delay={{ hide: 100, show: 100 }}
                overlay={(props) => (
                <Tooltip {...props}>
                    {members.length == 1 ? "Start collaborating!" : <>{"Shared with " + (members.length-1) + " other" + (members.length > 2 ? "s" : "")}</>}
                </Tooltip>
                )}
                placement="bottom">
                <ShareButton onClick={() => setShow('flex')} variant="dark">Share</ShareButton>
            </OverlayTrigger>
            {
                show ? 
                    <WindowBox style={{display: show}}>
                        <Modal>
                            <BackContainer onClick={() => setShow('none')}>
                                <FontAwesomeIcon icon={faXmark} />
                            </BackContainer>
                            <ModalTitle>🔗 Share your trip</ModalTitle>
                            <ShareForm>
                                <ShareInput onChange={(e) => setNewMember(e.target.value)} value={newMember} placeholder='Add collaborators (Volta users)' type="email"/>
                                <ShareSend onClick={handleShare} type="submit">Send</ShareSend>
                            </ShareForm>
                            <MembersTitle>People with access</MembersTitle>
                            <MembersContainer>
                                {members.map((member, index) => (
                                    <Member key={index}>
                                        <MemberImg src={member.img} />
                                        <MemberEmail>{member.username}</MemberEmail>
                                        {
                                            (currentUser.uid === member.uid || currentUser.uid !== trip.owner) ? <></> :
                                            <DeleteContainer className='deleteContainer'>
                                                <FontAwesomeIcon style={{cursor: 'pointer'}} onClick={(e) => handleRemove(e, member.uid)} icon={faTrash} />
                                            </DeleteContainer>
                                        }
                                    </Member>
                                ))}
                            </MembersContainer>
                            <Quote>“A journey is best measured in friends, rather than miles.” – Tim Cahill</Quote>
                        </Modal>
                    </WindowBox>
                :
                <></>
            }
        </ShareContainer>
    );
}

export default TripShareContainer;

------------------------------
Title of NewPlaces.js:
No Title Found
import React, { useState, useEffect, useRef } from 'react';
import ReactDOMServer from 'react-dom/server';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import Place from './Place';
import WorldLoader from '../WorldLoader';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons'

const PlacesContainer = styled.div`
    /* padding: 10px; */
    overflow-y: scroll;
    position: relative;
    height: calc(100%);
    box-sizing: border-box;
`

const PlacesHeading = styled.h3`
    margin: 15px;
    font-family: "Lora", sans-serif;
    font-weight: 550;
`

const SearchContainer = styled.div`

`

const InputField = styled.input`
    margin: 5px 15px;
    font-family: "Sen", sans-serif;
    min-width: 60%;
    border-radius: 5px;
    padding: 5px;
    border: 1.5px solid #8c8c8c;
    height: 40px;

    &:focus {
        border-color: #1746A2;
    }
`

const SubmitButton = styled.button`
    height: 40px;
    background-color: #1746A2;
    border: none;
    color: #fff;
    border-radius: 5px;
    padding: 5px 10px;
    width: calc(40% - 40px);
`

const NoLocations = styled.div`
    padding: 30px 15px;
    /* text-align: center; */
`

const  NoLocationsText = styled.h4`
    font-family: "Sen", sans-serif;
    font-size: 1.2em;
`


function NewPlaces(props) {
    const [ searched, setSearched ] = useState(false);
    const [ list, setList ] = useState({
        ...props.list,
    });
    const [ searchList, setSearchList ] = useState([]);
    const [ mapList, setMapList ] = useState([])
    const [ loaded, setLoaded ] = useState(true);
    const [ counter, setCounter ] = useState(0);

    useEffect(() => {
        setList({
            ...props.list,
        })

        const input = document.getElementById(`pac-input-${list.title}-${props.id}-1`);
        const searchBox = new window.google.maps.places.SearchBox(input);

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener("places_changed", () => {
            const places = searchBox.getPlaces()

            if (places.length == 0) {
                return;
            }

            var newItemsPrev = [];
            setSearchList([]);

            places.forEach((place) => {
                if (!place.geometry || !place.geometry.location || !place.geometry.location.lat()) {
                    console.log("Returned place contains no geometry");
                    return;
                } else {
                    let imgUrl = null;
                    if (place.photos && place.photos.length > 0) {
                        imgUrl = place.photos[0].getUrl({ 'maxWidth': 550, 'maxHeight': 550 })
                    } else {
                        imgUrl = '';
                    }
                    setSearchList([...newItemsPrev,
                        {
                            title: place.name,
                            address: place.formatted_address,
                            position: {lat: place.geometry.location.lat(), lng: place.geometry.location.lng()},
                            link: `https://www.google.com/maps/place/?q=place_id:${place.place_id}`,
                            img: imgUrl
                        }
                    ])
                    newItemsPrev.push({
                        title: place.name,
                        address: place.formatted_address,
                        position: {lat: place.geometry.location.lat(), lng: place.geometry.location.lng()},
                        link: `https://www.google.com/maps/place/?q=place_id:${place.place_id}`,
                        img: imgUrl
                    })
            }
            });
            console.log(searchList)
        });
        

    }, [searchList])

    const handleSubmit = (event) => {
        console.log('Submit!!')
        setSearched(true);
        const newPlaces = searchList.map(place => ({...place}));
        setMapList(newPlaces);
        setCounter(counter+1);
        console.log(newPlaces);
    }

    return (
        <PlacesContainer>
            <PlacesHeading>Explore</PlacesHeading>
            <SearchContainer id={`pac-container-${list.id}-${props.id}-1`}>
                <InputField onChange={() => setSearched(false)} id={`pac-input-${list.title}-${props.id}-1`} type="text"
                    placeholder="Search for location" />
                { loaded ?  
                <SubmitButton onClick={handleSubmit}><FontAwesomeIcon icon={faMagnifyingGlass}/></SubmitButton>
                :
                <SubmitButton style={{background: "#a8a8a8"}} disabled onClick={handleSubmit}><i class="fa fa-solid fa-binoculars"></i></SubmitButton>
                }
            </SearchContainer>
            {   mapList.length > 0 ?
                    <>
                        {mapList.map((item, index) => (
                            <Place refreshTrip={props.refreshTrip} updateList={props.updateList} id={props.id} list={list} key={`${item.title}-${Math.random()}`} item={{...item}} new={true} />
                        ))}
                    </>
                :
                (
                    searched ?
                    <NoLocations>
                        <NoLocationsText>No results</NoLocationsText>
                    </NoLocations>
                    :
                    <></>
                )
            }
        </PlacesContainer>
    );
}

export default NewPlaces;

------------------------------
Title of FlightsScript.js:
No Title Found
KAYAK.embed({
    container: document.getElementById("kayakSearchWidgetContainer"),
    hostname: "www.kayak.com",
    autoPosition: true,
    defaultProduct: "hotels",
    enabledProducts: ["hotels", "flights"],
    startDate: "2018-10-02",
    endDate: "2018-10-28",
    origin: "New York, NY",
    destination: "Boston, MA",
    ssl: true,
    affiliateId: "acme_corp",
    isInternalLoad: false,
    lc: "en",
    cc: "us",
    mc: "EUR"
});
------------------------------
Title of Flights.js:
No Title Found
import React, { useState, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import { useNavigate } from 'react-router-dom';
import styled from 'styled-components';

const FlightsContainer = styled.div`
    width: 100vw;
    height: calc(100vh - 350px);
    background: rgb(245, 247, 249);
    padding: 10px;
    margin: 0px;
`

const SearchWidget = styled.div`
    width: 100%;
    height: 100%;
`

const FlightsTitle = styled.h2`
    font-family: "Lora", sans-serif;
    font-weight: 600;
    margin-top: 15px;
    text-align: center;
`

const FlightsLinkHeader = styled.h4`
    font-family: "Sen", sans-serif;
    text-align: center;
    margin-bottom: 15px;
`

const FlightsLink = styled.a`
    text-decoration: none;
    font-style: italic;
    font-size: 0.8em;
    color: #081736;
    border-bottom: 2px solid transparent;
    transition: border-bottom 0.2s ease-in-out;

    &:hover {
        color: #1746A2;
        border-bottom: 30px solid #1746A2;
        border-bottom: 2px solid #1746A2;
    }
`

function Flights(props) {
    const [trip, setTrip] = useState(props.trip);
    const [ afterOffestStart, setAfterOffesetStart ] = useState('');
    const [ afterOffestEnd, setAfterOffesetEnd ] = useState('');
    const navigate = useNavigate();

    const [ kiwiLink, setKiwiLink ] = useState('');


    useEffect(() => {
        setTrip(props.trip)
        console.log(props)
        console.log('whoa!!')
        try {
            var tempAfterOffsetStart = new Date(props.trip.date.start.toDate() - props.trip.date.start.toDate().getTimezoneOffset() * 60000)
            var tempAfterOffsetEnd = new Date(props.trip.date.end.toDate() - props.trip.date.end.toDate().getTimezoneOffset() * 60000)
            setAfterOffesetStart(tempAfterOffsetStart)
            setAfterOffesetEnd(tempAfterOffsetEnd)

            setKiwiLink(`https://www.kiwi.com/deep?affilid=nicolasfuchsvoltadeeplinks&currency=EUR&departure=${tempAfterOffsetStart.toISOString().split('T')[0]}_${tempAfterOffsetStart.toISOString().split('T')[0]}&destination=${props.trip.place_code}&lang=en&pageName=tilesPage&return=${tempAfterOffsetEnd.toISOString().split('T')[0]}_${tempAfterOffsetEnd.toISOString().split('T')[0]}`)
            const script = document.createElement('script');
            console.log(kiwiLink)
        
            script.src = "https://widgets.kiwi.com/scripts/widget-search-iframe.js";
            script.setAttribute('data-lang','en');
            script.setAttribute('data-affilid','nicolasfuchsvoltaflights');
            script.setAttribute('data-to', props.trip.place_code);
            script.setAttribute('data-primary-color','1746a2');
            script.setAttribute('data-results-only','true');
            script.setAttribute('data-departure',  tempAfterOffsetStart.toISOString().split('T')[0])
            script.setAttribute('data-return', tempAfterOffsetEnd.toISOString().split('T')[0])
            script.async = true;
        
            document.body.appendChild(script);
        
            return () => {
            document.body.removeChild(script);
            }
        } catch (error) {
            console.log(error)
            console.log(props.trip)
            // navigate('/trips')
        }
      }, [props.trip]);

    return (
        <FlightsContainer>
            <FlightsTitle>Flights</FlightsTitle>
            <FlightsLinkHeader><FlightsLink target="_blank" href={kiwiLink}>Open kiwi.com</FlightsLink></FlightsLinkHeader>
            <div id="widget-holder"></div>
        </FlightsContainer>
    );
}

export default Flights;

------------------------------
Title of DetailsContent.js:
Version
import React, { useState, useEffect, useCallback } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import ExistingPlaces from './ExistingPlaces';
import ListBanner from './ListBanner';
import NewPlaces from './NewPlaces';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons';
import NewPlacesMobile from './NewPlacesMobile';
import { db } from '../../firebase';
import { doc, getDoc } from 'firebase/firestore';

const google = window.google;

const ContentContainer = styled.div`
    position: relative;
    border-radius: 10px;
    background-color: #fff;
    width: 80vw;
    height: 80vh;

    @media(max-width: 991px) {
        width: 90vw;
        height: 90vh;
    }

    & *::-webkit-scrollbar {
        display: none;
    }
`

const BackContainer = styled.div`
    margin: 10px;
    position: absolute;
    top: 0px;
    left: 0px;
    cursor: pointer;
    font-family : "Sen", "sans-serif";
    z-index: 4;
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 100px;
    padding: 5px 10px;
    transition: 0.15s ease;

    &:hover {
        background-color: #fff;
    }
`

const BackIcon = styled.i`

`

const PlacesCategories = styled.div`
    height: calc(100% - 150px);
    box-sizing: border-box;

    @media (max-width: 991px) {
        display: none;
    }
`

const Row = styled.div`
    height: 100%;
`

const Column = styled.div`
    height: 100%;
`

// Mobile Version
const MobileVersion = styled.div`
    display: none;
    height: calc(100% - 150px);

    @media (max-width: 991px) {
        display: block;
    }
`

const ToggleButton = styled.div`
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    cursor: pointer;
    background-color: #1746A2;
    padding: 15px;
    color: #fff;
    border-radius: 100px;
    font-family: "Sen", sans-serif;

    & i {
        margin-right: 7.5px;
    }
`


function DetailsContent(props) {
    const [ list, setList ] = useState(props.list);
    const [ toggle, setToggle ] = useState("existing");

    useEffect(() => {
        console.log(props.list);
        setList(props.list);
    }, [])

    const handleToggle = (event) => {
        if (toggle === "existing") {
            setToggle("new")
        } else {
            setToggle("existing")
        }
    }

    const updateList = useCallback((newItem) => {
        setList(
            oldList => ({
                ...oldList,
                items: [...oldList.items, newItem]
            })
        );
        
        updateTrip()

    }, []);

    async function updateTrip() {
        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef);
        const currentTrip = docSnap.data();
        // props.updateTrip(currentTrip);
    }

    const deletePlace = useCallback((newItems) => {
        console.log(newItems)
        setList(
            oldList => ({
                ...oldList,
                items: newItems
            })
        );
        updateTrip();
    });

    return (
        <ContentContainer>
            <BackContainer onClick={() => props.parentStateSetter('none')}>
                <BackIcon className="fa fa-solid fa-arrow-left"></BackIcon> Back
            </BackContainer>
            <ListBanner trip={props.trip} id={props.id} list={list}/>
            <PlacesCategories className="container">
                <Row className="row">
                    <Column className="col-lg-6 col-md-12 col-sm-12">
                        <ExistingPlaces refreshTrip={props.refreshTrip} id={props.id} deletePlace={deletePlace} list={list}/>
                    </Column>
                    <Column className="col-lg-6 col-md-12 col-sm-12">
                        <NewPlaces refreshTrip={props.refreshTrip} updateList={updateList} id={props.id} list={props.list}/>
                    </Column>
                </Row>
            </PlacesCategories>
            <MobileVersion>
                {
                    toggle === "existing"
                    ?
                    <ExistingPlaces refreshTrip={props.refreshTrip} deletePlace={deletePlace} id={props.id} list={list}/>
                    :
                    <NewPlacesMobile refreshTrip={props.refreshTrip} updateList={updateList} id={props.id} list={props.list}/>
                }
                <ToggleButton onClick={handleToggle}>
                    {toggle === "existing" ? <><FontAwesomeIcon className='toggle-icon' icon={faMagnifyingGlass}/> <span style={{marginLeft: '5px'}}>Explore</span></> : <><i className="fa fa-solid fa-bookmark toggle-icon"></i> <span style={{marginLeft: '5px'}}>View saved</span></>}
                </ToggleButton>
            </MobileVersion>
        </ContentContainer>
    );
}

export default DetailsContent;

------------------------------
Title of TripFlights.js:
No Title Found
import React, { useState, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import Accomodations from './Accomodations';
import Flights from './Flights';

const PageContainer = styled.div``

const Title = styled.h2`
    font-family: "Lora", serif;
    text-align: center;
`

function TripFlights(props) {
    const [trip, setTrip] = useState(props.trip)

    useEffect(() => {
        console.log(props);
        setTrip(props.trip);
        
    }, [props.trip]);

    return (
        <PageContainer style={{display: props.display}}>
            <Flights trip={trip}/>
        </PageContainer>
    );
}

export default TripFlights;

------------------------------
Title of NewTrip.js:
No Title Found
import React, { useState, useEffect, useCallback, useContext } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import DetailsContent from './DetailsContent';
import Popup from 'reactjs-popup';
import EmojiPicker from 'emoji-picker-react';
import EmojiImg from '../EmojiImg';
import ListImageSearch from './ListImageSearch';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faXmark, faCalendar } from '@fortawesome/free-solid-svg-icons';
import DatePicker from "react-datepicker";
import Picker from '@emoji-mart/react';
import data from '@emoji-mart/data';
import { addDoc, collection, Timestamp } from 'firebase/firestore';
import { AuthContext } from '../../Auth';
import { db } from '../../firebase';


const NewTripButton = styled.button`
    float: right;
    font-size: 1.1rem;
    border-radius: 7px;
    padding: 7.5px 15px;
    height: 40px;
    font-family: "Sen", sans-serif;
    color: #fff;
    border: none;
    background-color: #1746A2;
    transition: all 0.2s ease;
    outline: 1px solid var(--darkBlue);

    &:hover {
        background-color: transparent;
        color: var(--darkBlue);
    }

    &:focus {
        background-color: transparent ;
        color: var(--darkBlue);
        border: 1px solid var(--darkBlue);
    }
`

const NewListContainer = styled.div`
    width: 300px;
    height: 400px;
    border: 1px #D6D6D6 solid;
    border-radius: 10px;
    color: #838383;
    position: relative;
    margin: 15px 15px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    &:hover {
        background-color: #E8E8E8;
        cursor: pointer;
    }
`

const NewTitle = styled.h1`
    font-size: 1.4em;
    font-family: "Sen", sans-serif;
    text-align: center;
    font-weight: 600;
`

const NewIcon = styled.i`
    font-size: 1.5em;
    margin-bottom: 20px;
`

const TripForm = styled.form`
    padding: 10px;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    /* background-color: aliceblue; */
`

const FormTitle = styled.h3`
    margin-left: 10px;
    font-family: "Lora", sans-serif;
    font-weight: 600;
`

const FormMainInputs = styled.div`
    display: flex;
    align-items: center;
`

const TripName = styled.input`
    margin-right: 20px;
    margin-left: 10px;
    border: none;
    height: 35px;
    width: 300px;
    color: #242424;
    font-family: "Sen", sans-serif;
    font-size: 1.3em;
    border-bottom: 2px solid rgb(200, 200, 200, 0.8);
    transition: all ease-in 0.2s;

    &::placeholder {
        color: rgb(200, 200, 200, 0.8);
        font-family: "Sen", sans-serif;
        /* border-bottom: 3px solid red; */
        /* font-size: 2em; */
    }
    
    &:focus {
        outline: none;
        border-bottom: 2px solid #1746A2;
    }

    @media (max-width: 450px) {
        width: 190px;
    }
`

const FormSubmit = styled.button`
    background-color: #1746A2;
    border: none;
    border-radius: 5px;
    color: #fff;
    margin-top: auto;
    padding: 5px 10px;
    font-family: "Sen", sans-serif;
`

const EmojiContainer = styled.div`
    display: inline-flex;
    justify-content: center;
    align-items: center;
    height: 60px;
    width: 60px;
    transition: 0.15s ease;
    border-radius: 10px;
    cursor: pointer;
    font-size: 2.5em;

    & span {
        line-height: 50px;
    }

    &:hover {
        background-color: rgba(200, 200, 200, 0.5);
    }
`

const ImageSearchBox = styled.div`
    margin-top: 10px;
`

const SearchInput = styled.input`

`

const SearchImageButton = styled.button`

`

const BackContainer = styled.div`
    margin: 10px;
    position: absolute;
    top: 0px;
    right: 0px;
    cursor: pointer;
    font-family : "Sen", "sans-serif";
    background-color: #F1F1F1;
    z-index: 4;
    width: 40px;
    height: 40px;
    padding: 5px 10px;
    transition: 0.25s ease;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #fff;


    &:hover {
        background-color: #F1F1F1;
        border-radius: 100%;
    }
`

const CalendarContainer = styled.div`
    font-size: 1.4em;
    margin-right: 10px;
    margin-left: 10px;
    cursor: pointer;
`

const CalendarModal = styled.div``

var emojis = [
    '🗺️', '🇧🇧', '🇦🇺', '🇿🇼', '🇵🇭', '🇯🇵', '🇧🇷', '🇳🇴', '🇩🇪', '🇵🇹', '🇬🇧', '🇺🇸'
];


function NewTrip(props) {
    const [ trip, setTrip ] = useState(props.trip);
    const [ show, setShow ] = useState('none');
    const [ tripPlace, setTripPlace ] = useState('');
    const [ countryCode, setCountryCode ] = useState('')
    const [ emoji, setEmoji ] = useState(emojis[Math.floor(Math.random() * emojis.length)]);
    const [ img, setImg ] = useState('');
    const { currentUser } = useContext(AuthContext);
    const [disableClick, setDisableClick] = useState(false);


    useEffect(() => {
        console.log(props);
        setTrip(props.trip);
    }, [])

    const onSubmit = (closing) => {
        if (tripPlace === '' || img === '') {
            alert("Please fill out all fields");
        }
        else {
            setDisableClick(true);
            const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${tripPlace}&key=AIzaSyBwLSV_KJEYZpoIn6DxFWN5rAowGsCKC9U`;
            fetch(url).then((response) => {
                const data = response.json().then(
                    (data) => {
                        var place_code = "";
                        console.log(data)
                        if (data.results.length > 0) {
                            var country;
                            try {
                                country = data.results[0].address_components.filter(
                                    (component) => component.types.indexOf('country') !== -1
                                )[0].short_name;
                            } catch {
                                country = "US";
                            }
                            console.log(country);
                            setCountryCode(country);
                            place_code = country;

                            // Adding to firebase
                            const tripsCollectionRef = collection(db, 'trips');
                            const today = new Date(); // Get the current date
                            const start = new Date(today.getFullYear(), today.getMonth() + 1, today.getDate()); // Add 1 month
                            const end = new Date(today.getFullYear(), today.getMonth() + 1, today.getDate() + 7); // Add 1 month and 1 week

                            addDoc(
                                tripsCollectionRef,
                                {
                                    blocks: [],
                                    checklist: [],
                                    date: {
                                        start: Timestamp.fromDate(start),
                                        end: Timestamp.fromDate(end)
                                    },
                                    emoji: emoji,
                                    image: img,
                                    lists: [],
                                    members: [
                                        {
                                            img: currentUser.photoURL,
                                            uid: currentUser.uid,
                                            username: currentUser.email
                                        }
                                    ],
                                    place_code: place_code,
                                    title: tripPlace,
                                    users: [currentUser.uid],
                                    owner: currentUser.uid
                                }
                            ).then(() => {
                                console.log('Added trip');
                                setDisableClick(false);
                                setTripPlace('');
                                closing();
                                props.updateTrips();
                            })
                        } else {
                            console.log('No country found');
                            alert('Location not found...')
                            setDisableClick(false);
                        }
    
                    })
                }
            )
        }
    }

    const contentStyle = {borderRadius:'10px', width: '700px', height: '500px', maxWidth: '90%'};

    const contentStyleCalendar = {borderRadius:'10px', width: "255px", height: "255px"};

    const contentStyleEmoji = {borderRadius:'10px', width: "363px", height: "447.5px"};

    const changeImg = useCallback((item) => {
        console.log(item)
        setImg(item)
    }, []);


    return (
        <Popup contentStyle={contentStyle} className='popup form-modal' nested trigger={
            <NewTripButton>
                New Trip
            </NewTripButton>
        } modal>
            {close => (
                <TripForm onSubmit={(event) => event.preventDefault()}>
                    <FormTitle>New trip</FormTitle>
                    <BackContainer onClick={close}>
                        <FontAwesomeIcon icon={faXmark} />
                    </BackContainer>
                    <FormMainInputs>
                        <TripName onChange={(e) => setTripPlace(e.target.value)} value={tripPlace} placeholder="Trip place (country or city)" type='text'/>
                        <Popup
                            trigger={open => (
                                <EmojiContainer><EmojiImg size="40px" emoji={emoji}/></EmojiContainer>
                            )}
                            position="bottom center"
                            nested
                            contentStyle={contentStyleEmoji} 
                        >
                            <div>
                                <Picker data={data} onEmojiSelect={(emoji) => setEmoji(emoji.native)} />
                            </div>
                        </Popup>
                    </FormMainInputs>
                    <ListImageSearch parentCallback={changeImg} />
                    <FormSubmit style={disableClick ? {backgroundColor: 'gray'} : {}} disabled={disableClick} onClick={() => onSubmit(close)}>Save</FormSubmit>
                </TripForm>
            )}
        </Popup>
    );
}

export default NewTrip;

------------------------------
Title of ListCategory.js:
No Title Found
import React, { useState, useEffect, useCallback } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import DetailsContent from './DetailsContent';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faTrash } from '@fortawesome/free-solid-svg-icons';
import DeleteConfirm from '../DeleteConfirm';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase';


const ListContainer = styled.div`

`

const CategoryContainer = styled.div`
    background-color: #fff;
    position: relative;
    margin: 15px 15px;
    padding: 0;
    border-radius: 10px;
    width: 300px;
    height: 400px;
    -webkit-box-shadow: 0px 0px 10px 2px rgba(0,0,0,0.21); 
    box-shadow: 0px 0px 10px 2px rgba(0,0,0,0.21);
    perspective: 1000px;

    transition: transform 0.2s ease;

    &:hover {
        cursor: pointer;
        transform: scale(1.03);
    }

    &:hover .icons-container {
        display: flex;
        justify-content: center;
        align-items: center;
        transition: all 0.3s ease;
        opacity: 1;
    }
`

const Background = styled.img`
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: inherit;
    position: absolute;
    top: 0;
    left: 0;
`

const CategoryTitle = styled.h1`
    position: absolute;
    left: 15px;
    bottom: 7.5px;
    color: #000;
    background-color: #fff;
    text-transform: uppercase;
    padding: 10px;
    border-radius: 10px;
    font-size: 1.3em;
    font-family: "Sen", sans-serif;
    font-weight: 600;
    max-width: calc(100% - 30px);
`

const CategoryDetails = styled.div`
    box-sizing: border-box;
    width: 100vw;
    height: 100vh;
    background-color: rgba(200, 200, 200, .3);
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1;
    justify-content: center;
    align-items: center;
`

const IconsContainer = styled.div`
    font-size: 1.3em;
    display: none;
    color: #000;
    position: absolute;
    opacity: 0;
    transition: all 0.3s ease;
    top: 15px;
    right: 20px;
    background-color: rgba(255, 255, 255, 0.7);
    border-radius: 100px;
    width: 40px;
    height: 40px;
    padding: 5px;

    &:hover {
        background-color: #fff;
    }
`


function ListCategory(props) {
    const [ list, setList ] = useState(props.list);
    const [ show, setShow ] = useState('none');
    const [ showDelete, setShowDelete ] = useState(false);


    useEffect(() => {
        console.log(props);
        setList(props.list);
    }, [])
    
    const handleChildElementClick = (e) => {
        e.stopPropagation()
        setShowDelete(!showDelete);
    }

    const wrapperSetShow = useCallback(val => {
        setShow(val);
    }, [setShow]);

    const toggleDeleteShow = useCallback(() => {        
        setShowDelete(false);
    }, [setShowDelete]);

    const handleDelete = useCallback(() => {        
        deleteList();
    }, [setShowDelete]);

    async function deleteList() {
        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef);

        if (docSnap.exists()) {
            console.log("Document data:", docSnap.data());
            var tripResponse = docSnap.data()

            const listIndex = tripResponse.lists.findIndex(l => l.title === list.title);

            // Create a new array without the list at the specified index
            var updatedLists = [...tripResponse.lists];
            updatedLists.splice(listIndex, 1);


            console.log(" **************** ")
            console.log(listIndex)
            console.log(updatedLists)
            console.log(" **************** ")


            // Update the document in Firestore with the new array of lists
            await updateDoc(tripRef, { lists: updatedLists }).then(
                setShowDelete(false)
            ).then(props.deleteList(updatedLists)).catch((error) => console.log(error.message));
        } else {
            // docSnap.data() will be undefined in this case
            console.log("No such document!");
        }          
    }

    return (
        <ListContainer>
            <CategoryContainer onClick={() => setShow('flex')} background={list.img}>
                <Background src={list.img} alt={list.title} />
                <IconsContainer onClick={(e) => handleChildElementClick(e)} style={{zIndex: 10}} className='icons-container'>
                    <FontAwesomeIcon icon={faTrash} className='trash-icon'/>
                </IconsContainer>
                <CategoryTitle>{list.title}</CategoryTitle>
            </CategoryContainer>
            <CategoryDetails style={{display: show}}>
                <DetailsContent refreshTrip={props.refreshTrip} updateTrip={props.updateTrip} trip={props.trip} id={props.id} list={list} parentStateSetter={wrapperSetShow} />
            </CategoryDetails>
            {
                showDelete ?
                    <DeleteConfirm handleDelete={handleDelete
                    } parentCallback={toggleDeleteShow} list={list} />
                :
                    <></>
            }
        </ListContainer>
    );
}

export default ListCategory;

------------------------------
Title of CodesCoordinate.js:
No Title Found
const CodesCoordinate = {
    AF: { lat: 33.93911, lng: 67.709953 },
    AX: { lat: 60.199548, lng: 20.371171 },
    AL: { lat: 41.153332, lng: 20.168331 },
    DZ: { lat: 28.033886, lng: 1.659626 },
    AS: { lat: -14.270972, lng: -170.132217 },
    AD: { lat: 42.546245, lng: 1.601554 },
    AO: { lat: -11.202692, lng: 17.873887 },
    AI: { lat: 18.220554, lng: -63.068615 },
    AQ: { lat: -75.250973, lng: -0.071389 },
    AR: { lat: -38.416097, lng: -63.616672 },
    AM: { lat: 40.069099, lng: 45.038189 },
    AW: { lat: 12.52111, lng: -69.968338 },
    AU: { lat: -25.274398, lng: 133.775136 },
    AT: { lat: 47.516231, lng: 14.550072 },
    AZ: { lat: 40.143105, lng: 47.576927 },
    BS: { lat: 25.03428, lng: -77.39628 },
    BH: { lat: 25.930414, lng: 50.637772 },
    BD: { lat: 23.684994, lng: 90.356331 },
    BB: { lat: 13.193887, lng: -59.543198 },
    BY: { lat: 53.709807, lng: 27.953389 },
    BE: { lat: 50.503887, lng: 4.469936 },
    BZ: { lat: 17.189877, lng: -88.49765 },
    BJ: { lat: 9.30769, lng: 2.315834 },
    BM: { lat: 32.321384, lng: -64.75737 },
    BT: { lat: 27.514162, lng: 90.433601 },
    BO: { lat: -16.290154, lng: -63.588653 },
    BA: { lat: 43.915886, lng: 17.679076 },
    BW: { lat: -22.328474, lng: 24.684866 },
    BV: { lat: -54.423199, lng: 3.413194 },
    BR: { lat: -14.235004, lng: -51.92528 },
    IO: { lat: -6.343194, lng: 71.876519 },
    VG: { lat: 18.420695, lng: -64.639968 },
    BN: { lat: 4.535277, lng: 114.727669 },
    BG: { lat: 42.733883, lng: 25.48583 },
    BF: { lat: 12.238333, lng: -1.561593 },
    BI: { lat: -3.373056, lng: 29.918886 },
    KH: { lat: 12.565679, lng: 104.9910},
    CM: { lat: 7.369722, lng: 12.354722 },
    CA: { lat: 56.130366, lng: -106.346771 },
    CV: { lat: 16.002082, lng: -24.013197 },
    KY: { lat: 19.513469, lng: -80.566956 },
    CF: { lat: 6.611111, lng: 20.939444 },
    TD: { lat: 15.454166, lng: 18.732207 },
    CL: { lat: -35.675147, lng: -71.542969 },
    CN: { lat: 35.86166, lng: 104.195397 },
    CX: { lat: -10.447525, lng: 105.690449 },
    CC: { lat: -12.164165, lng: 96.870956 },
    CO: { lat: 4.570868, lng: -74.297333 },
    KM: { lat: -11.875001, lng: 43.872219 },
    CG: { lat: -0.228021, lng: 15.827659 },
    CD: { lat: -4.038333, lng: 21.758664 },
    CK: { lat: -21.236736, lng: -159.777671 },
    CR: { lat: 9.748917, lng: -83.753428 },
    CI: { lat: 7.539989, lng: -5.54708 },
    HR: { lat: 45.1, lng: 15.2 },
    CU: { lat: 21.521757, lng: -77.781167 },
    CY: { lat: 35.126413, lng: 33.429859 },
    CZ: { lat: 49.817492, lng: 15.472962 },
    DK: { lat: 56.26392, lng: 9.501785 },
    DJ: { lat: 11.825138, lng: 42.590275 },
    DM: { lat: 15.414999, lng: -61.370976 },
    DO: { lat: 18.735693, lng: -70.162651 },
    EC: { lat: -1.831239, lng: -78.183406 },
    EG: { lat: 26.820553, lng: 30.802498 },
    SV: { lat: 13.794185, lng: -88.89653 },
    GQ: { lat: 1.650801, lng: 10.267895 },
    ER: { lat: 15.179384, lng: 39.782334 },
    EE: { lat: 58.595272, lng: 25.013607 },
    ET: { lat: 9.145, lng: 40.489673 },
    FK: { lat: -51.796253, lng: -59.523613 },
    FO: { lat: 61.892635, lng: -6.911806 },
    FM: { lat: 7.425554, lng: 150.550812 },
    FJ: { lat: -16.578193, lng: 179.414413 },
    FI: { lat: 61.92411, lng: 25.748151 },
    FR: { lat: 46.227638, lng: 2.2137 },
    GF: { lat: 3.933889, lng: -53.125782 },
    PF: { lat: -17.679742, lng: -149.406843 },
    TF: { lat: -49.280366, lng: 69.348557 },
    GA: { lat: -0.803689, lng: 11.609444 },
    GM: { lat: 13.443182, lng: -15.310139 },
    GE: { lat: 42.315407, lng: 43.356892 },
    DE: { lat: 51.165691, lng: 10.451526 },
    GH: { lat: 7.946527, lng: -1.023194 },
    GI: { lat: 36.137741, lng: -5.345374 },
    GR: { lat: 39.074208, lng: 21.824312 },
    GL: { lat: 71.706936, lng: -42.604303 },
    GD: { lat: 12.262776, lng: -61.604171 },
    GP: { lat: 16.995971, lng: -62.067641 },
    GU: { lat: 13.444304, lng: 144.793731 },
    GT: { lat: 15.783471, lng: -90.230759 },
    GN: { lat: 9.945587, lng: -9.696645 },
    GW: { lat: 11.803749, lng: -15.180413 },
    GY: { lat: 4.860416, lng: -58.93018 },
    HT: { lat: 18.971187, lng: -72.285215 },
    HM: { lat: -53.08181, lng: 73.504158 },
    VA: { lat: 41.902916, lng: 12.453389 },
    HN: { lat: 15.199999, lng: -86.241905 },
    HK: { lat: 22.396428, lng: 114.109497 },
    HU: { lat: 47.162494, lng: 19.503304 },
    IS: { lat: 64.963051, lng: -19.020835 },
    IN: { lat: 20.593684, lng: 78.96288 },
    ID: { lat: -0.789275, lng: 113.921327 },
    IR: { lat: 32.427908, lng: 53.688046 },
    IQ: { lat: 33.223191, lng: 43.679291 },
    IE: { lat: 53.41291, lng: -8.24389 },
    IL: { lat: 31.046051, lng: 34.851612 },
    IT: { lat: 41.87194, lng: 12.56738 },
    JM: { lat: 18.109581, lng: -77.297508 },
    JP: { lat: 36.204824, lng: 138.252924 },
    JO: { lat: 30.585164, lng: 36.238414 },
    KZ: { lat: 48.019573, lng: 66.923684 },
    KE: { lat: -0.023559, lng: 37.906193 },
    KG: { lat: 41.20438, lng: 74.766098 },
    KI: { lat: -3.370417, lng: -168.734039 },
    KW: { lat: 29.31166, lng: 47.481766 },
    LA: { lat: 19.85627, lng: 102.495496 },
    LV: { lat: 56.879635, lng: 24.603189 },
    LB: { lat: 33.854721, lng: 35.862285 },
    LS: { lat: -29.609988, lng: 28.233608 },
    LR: { lat: 6.428055, lng: -9.429499 },
    LY: { lat: 26.3351, lng: 17.228331 },
    LI: { lat: 47.166, lng: 9.555373 },
    LT: { lat: 55.169438, lng: 23.881275 },
    LU: { lat: 49.815273, lng: 6.129583 },
    MO: { lat: 22.198745, lng: 113.543873 },
    MK: { lat: 41.608635, lng: 21.745275 },
    MG: { lat: -18.766947, lng: 46.869107 },
    MW: { lat: -13.254308, lng: 34.301525 },
    MY: { lat: 4.210484, lng: 101.975766 },
    MV: { lat: 3.202778, lng: 73.22068 },
    ML: { lat: 17.570692, lng: -3.996166 },
    MT: { lat: 35.937496, lng: 14.375416 },
    MH: { lat: 7.131474, lng: 171.184478 },
    MQ: { lat: 14.641528, lng: -61.024174 },
    MR: { lat: 21.00789, lng: -10.940835 },
    MU: { lat: -20.348404, lng: 57.552152 },
    YT: { lat: -12.8275, lng: 45.166244 },
    MX: { lat: 23.634501, lng: -102.552784 },
    FM: { lat: 7.425554, lng: 150.550812 },
    MD: { lat: 47.411631, lng: 28.369885 },
    MC: { lat: 43.750298, lng: 7.412841 },
    MN: { lat: 46.862496, lng: 103.846656 },
    ME: { lat: 42.708678, lng: 19.37439 },
    MS: { lat: 16.742498, lng: -62.187366 },
    MA: { lat: 31.791702, lng: -7.09262 },
    MZ: { lat: -18.665695, lng: 35.529562 },
    MM: { lat: 21.913965, lng: 95.956223 },
    NA: { lat: -22.95764, lng: 18.49041 },
    NR: { lat: -0.522778, lng: 166.931503 },
    NP: { lat: 28.394857, lng: 84.1240 },
    NL: { lat: 52.132633, lng: 5.291266 },
    NC: { lat: -20.904305, lng: 165.618042 },
    NZ: { lat: -40.900557, lng: 174.885971 },
    NI: { lat: 12.865416, lng: -85.207229 },
    NE: { lat: 17.607789, lng: 8.081666 },
    NG: { lat: 9.081999, lng: 8.675277 },
    NU: { lat: -19.054445, lng: -169.867233 },
    NF: { lat: -29.040835, lng: 167.954712 },
    KP: { lat: 40.339852, lng: 127.510093 },
    MP: { lat: 17.33083, lng: 145.38469 },
    NO: { lat: 60.472024, lng: 8.468946 },
    OM: { lat: 21.512583, lng: 55.923255 },
    PK: { lat: 30.375321, lng: 69.345116 },
    PW: { lat: 7.51498, lng: 134.58252 },
    PS: { lat: 31.952162, lng: 35.233154 },
    PA: { lat: 8.537981, lng: -80.782127 },
    PG: { lat: -6.314993, lng: 143.95555 },
    PY: { lat: -23.442503, lng: -58.443832 },
    PE: { lat: -9.189967, lng: -75.015152 },
    PH: { lat: 12.879721, lng: 121.774017 },
    PN: { lat: -24.703615, lng: -127.439308 },
    PL: { lat: 51.919438, lng: 19.145136 },
    PT: { lat: 39.399872, lng: -8.224454 },
    PR: { lat: 18.220833, lng: -66.590149 },
    QA: { lat: 25.354826, lng: 51.183884 },
    RE: { lat: -21.115141, lng: 55.536384 },
    RO: { lat: 45.943161, lng: 24.96676 },
    RU: { lat: 61.52401, lng: 105.318756 },
    RW: { lat: -1.940278, lng: 29.873888 },
    SH: { lat: -24.143474, lng: -10.030696 },
    KN: { lat: 17.357822, lng: -62.782998 },
    LC: { lat: 13.909444, lng: -60.978893 },
    PM: { lat: 46.941936, lng: -56.27111 },
    VC: { lat: 12.984305, lng: -61.287228 },
    WS: { lat: -13.759029, lng: -172.104629 },
    SM: { lat: 43.94236, lng: 12.457777 },
    ST: { lat: 0.18636, lng: 6.613081 },
    SA: { lat: 23.885942, lng: 45.0792 },
    SN: { lat: 14.497401, lng: -14.452362 },
    RS: { lat: 44.016521, lng: 21.005859 },
    SC: { lat: -4.679574, lng: 55.491977 },
    SL: { lat: 8.460555, lng: -11.779889 },
    SG: { lat: 1.352083, lng: 103.819839 },
    SX: { lat: 18.0425, lng: -63.05483 },
    SK: { lat: 48.669026, lng: 19.699024 },
    SI: { lat: 46.151241, lng: 14.995463 },
    SB: { lat: -9.64571, lng: 160.156194 },
    SO: { lat: 5.152149, lng: 46.199616 },
    ZA: { lat: -30.559482, lng: 22.937506 },
    GS: { lat: -54.429579, lng: -36.587909 },
    KR: { lat: 35.907757, lng: 127.766922 },
    SS: { lat: 6.8769919, lng: 31.3069788 },
    ES: { lat: 40.463667, lng: -3.74922 },
    LK: { lat: 7.873054, lng: 80.771797 },
    SD: { lat: 12.862807, lng: 30.217636 },
    SR: { lat: 3.919305, lng: -56.027783 },
    SJ: { lat: 77.553604, lng: 23.670272 },
    SZ: { lat: -26.522503, lng: 31.465866 },
    SE: { lat: 60.128161, lng: 18.643501 },
    CH: { lat: 46.818188, lng: 8.227512 },
    SY: { lat: 34.802075, lng: 38.996815 },
    TW: { lat: 23.69781, lng: 120.960515 },
    TJ: { lat: 38.861034, lng: 71.276093 },
    TZ: { lat: -6.369028, lng: 34.888822 },
    TH: { lat: 15.870032, lng: 100.992541 },
    TL: { lat: -8.874217, lng: 125.727539 },
    TG: { lat: 8.619543, lng: 0.824782 },
    TK: { lat: -8.967363, lng: -171.855881 },
    TO: { lat: -21.178986, lng: -175.198242 },
    TT: { lat: 10.691803, lng: -61.222503 },
    TN: { lat: 33.886917, lng: 9.537499 },
    TR: { lat: 38.963745, lng: 35.243322 },
    TM: { lat: 38.969719, lng: 59.556278 },
    TC: { lat: 21.694025, lng: -71.797928 },
    TV: { lat: -7.478182, lng: 178.679924 },
    UG: { lat: 1.3733, lng: 32.2903 },
    UG: {lat: 1.3733, lng: 32.2903},
    UA: {lat: 48.3794, lng: 31.1656},
    AE: {lat: 23.4241, lng: 53.8478},
    GB: {lat: 55.3781, lng: -3.4360},
    US: {lat: 37.0902, lng: -95.7129},
    UY: {lat: -32.5228, lng: -55.7658},
    UZ: {lat: 41.3775, lng: 64.5853},
    VU: {lat: -15.3767, lng: 166.9592},
    VE: {lat: 6.4238, lng: -66.5897},
    VN: {lat: 14.0583, lng: 108.2772},
    YE: {lat: 15.5527, lng: 48.5164},
    ZM: {lat: -13.1339, lng: 27.8493},
    ZW: {lat: -19.0154, lng: 29.1549}
}

export default CodesCoordinate;
------------------------------
Title of TripChecklist.js:
{ useDrop } from 'react-dnd';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import React, { useState, useEffect, useCallback } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { db } from '../../firebase.js';
import AddItem from './AddItem.js';
import ChecklistItem from './ChecklistItem.js';
// import { useDrop } from 'react-dnd';

const PageContainer = styled.div`
    width: 100vw;
`

const ColumnTitle = styled.h4`
    font-weight: 550;
    font-family: "Lora", sans-serif;
    margin-bottom: 15px;
` 

const ItemsContainer = styled.div`
    /* background-color: red; */
    padding: 0px 50px;
` 

function TripChecklist(props) {
    const [trip, setTrip] = useState({...props.trip});
    const [additions, setAdditions] = useState([]);

    useEffect(() => {
        console.log(trip);
        setTrip(props.trip);
        console.log('REDO')
        
    }, [props.trip])

    const addItem = useCallback((newItem) => {
        // console.log(trip.checklist);

        updateTrip();
        

        // setTrip(
        //     prevState => ({
        //         ...prevState,
        //         checklist: trip.checklist.concat([...additions, newItem])
        //     })
        // )
        
        // setAdditions(additions.concat([newItem]))

    }, []);

    async function updateTrip() {
        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef);
        const currentTrip = docSnap.data();
        setTrip(currentTrip)
    }

    const handleCheck = useCallback((item) => {
        handleCheckAsync(item);
    }, []);

    async function handleCheckAsync(item) {
        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef);
        const currentTrip = docSnap.data();

        var newChecklist = currentTrip.checklist.filter(i => item.title.localeCompare(i.title) !== 0);
        console.log(newChecklist)

        newChecklist.push(item)
        // setTrip(
        //     prevState => ({
        //         ...prevState,
        //         checklist: newChecklist
        //     })
        // )

        console.log(newChecklist)

        updateDoc(tripRef, {
            checklist: newChecklist
        }).then(() => {
            console.log("Item added")
            // updateTrip()
        }).catch(error => console.log(error.message));
    }

    const handleDelete= useCallback((item) => {
        handleDeleteAsync(item);
    }, []);

    async function handleDeleteAsync(item) {
        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef);
        const currentTrip = docSnap.data();

        var newChecklist = currentTrip.checklist.filter(i => item.title.localeCompare(i.title) !== 0);
        updateDoc(tripRef, {
            checklist: newChecklist
        }).then(() => {
            console.log("Item added")
            // updateTrip()
        }).catch(error => console.log(error.message));
    }


    
    console.log(trip)
    return (
        trip ?
            <PageContainer style={{display: props.display}}>
                <div className="container checklist-container">
                    <div className="row">
                        <div className="col-lg-6 col-md-12 col-sm-12 checklist-column">
                            <ColumnTitle>To-do</ColumnTitle>
                            <ItemsContainer>
                                {trip.checklist.concat(additions).map((item, index) => {
                                    return(
                                        item.status === "to-do" ?
                                            <ChecklistItem id={props.id} trip={trip} handleDelete={handleDelete} handleCheck={handleCheck} key={`${item.title}-${index*Math.random()}`} members={trip.members} item={item}/>
                                        :
                                            <></>
                                    )
                                })}
                                <AddItem trip={trip} id={props.id} addItem={addItem} />
                            </ItemsContainer>
                        </div>
                        <div className="col-lg-6 col-md-12 col-sm-12 checklist-column">
                            <ColumnTitle>Completed</ColumnTitle>
                            <ItemsContainer>
                            {trip.checklist.concat(additions).map((item, index) => {
                                    return(
                                        item.status === "completed" ?
                                            <ChecklistItem id={props.id} trip={trip} handleDelete={handleDelete} handleCheck={handleCheck} key={`${item.title}-${index*Math.random()}`} members={trip.members} item={item} />
                                        :
                                            <></>
                                    )
                                })}
                            </ItemsContainer>
                        </div>
                    </div>
                </div>

            </PageContainer>
        :
            <p>error</p>
    );
}

export default TripChecklist;

------------------------------
Title of TripBanner.js:
No Title Found
import React, { useState, useCallback } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import TripShareContainer from './TripShareContainer';
import { Link } from 'react-router-dom'
import EmojiImg from '../EmojiImg';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faImage, faPenToSquare } from '@fortawesome/free-solid-svg-icons'
import Popup from 'reactjs-popup';
import UnsplashPicker from '../UnsplashPicker';
import CalendarDatesPicker from '../CalendarDatesPicker';
import DateRange from '../DateRange';
import Picker from '@emoji-mart/react';
import data from '@emoji-mart/data';
import { doc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase';


const Banner = styled.div`
    display: table-cell;
    width: 100vw;
    height: 300px;
    position: relative;

    background-color: lightblue;
    background-image: url(${props => props.background ? props.background : "none"};);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
`

const BannerTitle = styled.h1`
    color: #fff;
    font-weight: 700;
    font-size: 5rem;
    text-align: center;
    width: 100vw;
    font-family: 'Lora', serif;

    @media (max-width: 600px) {
        font-size: 3.5rem;
    }
`

const BannerText = styled.div`
    position: absolute;
    top: 50%; left: 50%;
    transform: translate(-50%,-50%);
`

const BackDiv = styled.button`
    position: absolute;
    top: 10px;
    left: 20px;
    color: #000;
    font-size: 1.1rem;
    background: none;
    border: none;
    font-family: "Sen", "sans-serif";
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 100px;
    padding: 5px 10px;
    transition: 0.15s ease;

    &:hover {
        background-color: #fff;
    }
`

const BackText = styled.span`
`

const BackIcon = styled.i`
`

const BannerDate = styled.p`
    margin-top: 15px;

    & div span {
        background-color: #fff;
        padding: 5px 15px;
        border-radius: 5px;
    }
`

const DateTextBox = styled.div`
    font-family : "Sen", sans-serif;
    font-weight: 400;
    font-size: 1.4rem;
    text-align: center;
    
    &:hover {
        cursor: pointer;
    }
`

const EmojiContainer = styled.div`
    display: inline-flex;
    justify-content: center;
    align-items: center;
    height: 70px;
    width: 70px;
    transition: 0.15s ease;
    border-radius: 10px;
    margin-left: 15px;
    cursor: pointer;

    &:hover {
        background-color: rgba(255, 255, 255, 0.5);
    }
`

const IconsContainer = styled.div`
    position: absolute;
    top: 17.5px;
    right: 90px;

    & * {
        color: #fff;
    }

    .icon-banner {
        color: #fff;
        cursor: pointer;
        margin-right: 15px;
        font-size: 1.5em;
    }
`

const IconI = styled.i`
`

const CalendarModal = styled.div``

const contentStyle = {borderRadius:'10px', width: '700px', height: '330px', maxWidth: '90%'};

const contentStyleCalendar = {borderRadius:'10px', width: "255px", height: "254px"};

const contentStyleEmoji = {borderRadius:'10px', width: "363px", height: "447.5px"};


function TripBanner(props) {
    const [trip, setTrip] = useState(props.trip);
    const [ emoji, setEmoji ] = useState(props.trip.emoji)
    const [text, setText] = useState("");
    const [ changed, setChanged ] = useState(false);
    const [ date, setDate ] = useState(props.trip.date)

    // const changeBanner = useCallback(val => {
    //     console.log(val)
    // }, []);

    function handleOnEnter(text) {
        console.log("enter", text);
    }

    function handleSelect(emoji) {
        setEmoji(emoji.native);
        const tripRef = doc(db, "trips", props.id);
        updateDoc(tripRef, {
            emoji: emoji.native
        }).then(() => {
            console.log("emoji changed")
        }).catch(error => console.log(error.message));
    }

    const updateDate = useCallback((newDate) => {
        setDate(newDate);
    }, []); 

    return (
        <Banner background={trip.image}>
            <Link style={{color: "#000", textDecoration: "none"}} to="/trips">
                <BackDiv>
                    <BackIcon className="fa fa-solid fa-arrow-left"></BackIcon> <BackText>My trips</BackText>
                </BackDiv>
            </Link>
            <BannerText>
                <BannerTitle>{trip.title}
                    <Popup
                            trigger={open => (
                                <EmojiContainer>
                                    <EmojiImg size="60px" emoji={emoji} />
                                </EmojiContainer>
                            )}
                            position="bottom center"
                            nested
                            contentStyle={contentStyleEmoji} 
                        >
                            <div>
                                <Picker native={false} data={data} onEmojiSelect={(emoji) => handleSelect(emoji)} />
                            </div>
                    </Popup>
                </BannerTitle>
                <BannerDate>
                    <Popup
                        trigger={open => (
                            <DateTextBox>
                                <DateRange date={date}/>
                            </DateTextBox>
                        )}
                        contentStyle={contentStyleCalendar} 
                        position="bottom center"
                        closeOnDocumentClick
                    >
                        <CalendarModal><CalendarDatesPicker date={date} refreshTrip={props.refreshTrip} updateDate={updateDate} id={props.id} trip={trip} /></CalendarModal>
                    </Popup>
                </BannerDate>
            </BannerText>
            {/* <IconsContainer>
                <Popup contentStyle={contentStyle} className='popup' trigger={<FontAwesomeIcon className='icon-banner' icon={faImage}/>} modal>
                    {close => (
                        <UnsplashPicker close={close} />
                    )}
                </Popup>
                // <FontAwesomeIcon className='icon-banner' icon={faPenToSquare}/>
            </IconsContainer> */}
            <TripShareContainer trip={trip} id={props.id} members={trip.members} />
        </Banner>
    );
}

export default TripBanner;

------------------------------
Title of BudgetGraphComponent.js:
No Title Found
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import 'chart.js/auto';
import { Doughnut, Pie } from 'react-chartjs-2';

const GraphContainer = styled.div`
    font-family: "Sen", sans-serif;
    width: 90%;
    display: flex;
    justify-content: center;
    align-items: flex-start;
`

const options = {
    plugins: {
        tooltip: {
            callbacks: {
                label: function(context) {
                    console.log(context)
                    return ` $${context.formattedValue}`;
                }
            }
        }
    }
}

function BudgetGraphComponent(props) {
    const [budget, setBudget] = useState(props.budget);
    const [ data, setData] = useState(null);

    useEffect(() => {
        setBudget(props.budget);
        
        let dataAmounts = []
        let dataLabels = []

        budget.forEach(element => {
            dataAmounts.push(element.amount)
            dataLabels.push(element.label)
        });

        setData({
            datasets: [{
                data: dataAmounts,
                backgroundColor: [
                    '#1746A2',
                    '#757687',
                    '#980C2F',
                    '#D54E5C',
                    '#75B0AD',
                    '#FFF7D6'
                ],
            }],
        
            // These labels appear in the legend and in the tooltips when hovering different arcs
            labels: dataLabels
        });
        
    }, [props.budget])

  return (
    data ?
        <GraphContainer>
            <Doughnut
                options={options}
                data={data}
            />
        </GraphContainer>
    :
        <></>
    );
}

export default BudgetGraphComponent;
------------------------------
Title of NewPlacesBackup.js:
No Title Found
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import Place from './Place';
import WorldLoader from '../WorldLoader';


const PlacesContainer = styled.div`
    padding: 10px;
    overflow-y: scroll;
    position: relative;
    height: calc(100%);
    box-sizing: border-box;
`

const PlacesHeading = styled.h3`
    margin: 15px;
    font-family: "Lora", sans-serif;
    font-weight: 550;
`

const SearchContainer = styled.div`

`

const InputField = styled.input`
    margin: 5px 15px;
    font-family: "Sen", sans-serif;
    min-width: 60%;
    border-radius: 5px;
    padding: 5px;
    border: 1.5px solid #8c8c8c;
    height: 40px;
`

const SubmitButton = styled.button`
    height: 40px;
    background-color: #1746A2;
    border: none;
    color: #fff;
    border-radius: 5px;
    padding: 5px 10px;
    width: 80px;
`

const NoLocations = styled.div`
    padding: 30px 15px;
    /* text-align: center; */
`

const  NoLocationsText = styled.h4`
    font-family: "Sen", sans-serif;
    font-size: 1.2em;
`


function NewPlacesBackup(props) {
    const [ forceUpdate, setForceUpdate ] = useState(1);
    const [ searched, setSearched ] = useState(false);
    const [ list, setList ] = useState({
        ...props.list,
        items: []
    });
    const [ searchList, setSearchList ] = useState([]);
    const [ inputVal, setInputVal ] = useState("");

    useEffect(() => {
        setList({
            ...props.list,
            items: []
        })

        setInputVal("")

        const input = document.getElementById("pac-input");
        const searchBox = new window.google.maps.places.SearchBox(input);

        let markers = [];

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener("places_changed", () => {
            const places = searchBox.getPlaces();

            if (places.length == 0) {
            return;
            }

            // Clear out the old markers.
            // markers.forEach((marker) => {
            // marker.setMap(null);
            // });
            // markers = [];

            // For each place, get the icon, name and location.
            //const bounds = new window.google.maps.LatLngBounds();

            setList({
                ...props.list,
                items: []
            })

            places.forEach((place) => {
            if (!place.geometry || !place.geometry.location) {
                console.log("Returned place contains no geometry");
                return;
            }

                console.log(place)

            // const icon = {
            //     url: place.icon,
            //     size: new google.maps.Size(71, 71),
            //     origin: new google.maps.Point(0, 0),
            //     anchor: new google.maps.Point(17, 34),
            //     scaledSize: new google.maps.Size(25, 25),
            // };

            // // Create a marker for each place.
            // markers.push(
            //     new google.maps.Marker({
            //     map,
            //     icon,
            //     title: place.name,
            //     position: place.geometry.location,
            //     })
            // );
            // if (place.geometry.viewport) {
            //     // Only geocodes have viewport.
            //     bounds.union(place.geometry.viewport);
            // } else {
            //     bounds.extend(place.geometry.location);
            // }
            });
            // map.fitBounds(bounds);
        });
        

    }, [])

    const handleChange = (event) => {
        setInputVal(event.target.value);
        setSearched(false);
    }

    // when place input is changed
    const handleSubmit = (event) => {
        console.log("SUBMIT")
        setSearchList([])
        setList({
            ...props.list,
            items: []
        })
        const service = new window.google.maps.places.AutocompleteService();
        console.log("GOT here 84")
        console.log(inputVal)
        const gettingDetails = (place_id, callback) => {
            const detailsService = new window.google.maps.places.PlacesService(document.createElement('div'));
            const request = {
                placeId: place_id,
                fields: ["name", "formatted_address", "place_id", "geometry", "url"],
            };
        
            detailsService.getDetails(request, (result, status) => {
                callback(result)
                return result;
            })
        }

        const displaySuggestions = function (predictions, status) {
            if (status != window.google.maps.places.PlacesServiceStatus.OK || !predictions) {
              //alert(status);
              return;
            }
            
            var newPlaces = [];
            setList({
                ...props.list,
                items: []
            })
            var newItemsPrev = []
            predictions.forEach((prediction) => {
                // getting place details
                const result = gettingDetails(prediction.place_id, (response) => {
                    setList({
                        ...props.list,
                        items: [...newItemsPrev,
                            {
                                title: response.name,
                                address: response.formatted_address,
                                position: {lat: response.geometry.location.lat, lng: response.geometry.location.lng},
                                link: response.url
                            }
                        ]
                    })
                    newItemsPrev.push({
                        title: response.name,
                        address: response.formatted_address,
                        position: {lat: response.geometry.location.lat, lng: response.geometry.location.lng},
                        link: response.url
                    })
                })   
            });

            console.log(predictions)

            setSearchList(newPlaces);
        };

        const autocomplete = service.getPlacePredictions({ input: inputVal }, displaySuggestions);
        setSearched(true);

        const searchBox = new window.google.maps.places.SearchBox("coffee shops near Munich");
        searchBox.addListener("places_changed", () => {
            const places = searchBox.getPlaces();
            console.log(places)
        });
        
    }

    return (
        <PlacesContainer>
            <PlacesHeading>Explore</PlacesHeading>
            <SearchContainer id="pac-container">
                <InputField id="pac-input" value={inputVal} type="text"
                    onChange={handleChange}
                    placeholder="Search for location" />
                <SubmitButton
                // onClick={handleSubmit}
                ><i class="fa fa-solid fa-binoculars"></i></SubmitButton>
            </SearchContainer>
            {   list.items.length > 0 ?
                    <>
                        {list.items.map((item, index) => (
                            <Place item={item} new={true} />
                        ))}
                    </>
                :
                (
                    inputVal === "" ? 
                    <NoLocations>
                        <NoLocationsText>Enter location name. If you need help finding new places, we recommend using Google!</NoLocationsText>
                    </NoLocations>
                    : 
                    (
                        searched ?
                        <NoLocations>
                            <NoLocationsText>No results</NoLocationsText>
                        </NoLocations>
                        :
                        <></>
                    )
                )
            }
        </PlacesContainer>
    );
}

export default NewPlacesBackup;

------------------------------
Title of ExistingPlaces.js:
No Title Found
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import Place from './Place';


const PlacesContainer = styled.div`
    overflow-y: scroll;
    position: relative;
    height: calc(100%);
    box-sizing: border-box;
`

const PlacesHeading = styled.h3`
    margin: 15px;
    font-family: "Lora", sans-serif;
    font-weight: 550;
`


function ExistingPlaces(props) {
    const [ list, setList ] = useState(props.list);

    useEffect(() => {
        setList(props.list);
    }, [props.list]);
    

    return (
        <PlacesContainer>
            <PlacesHeading>Saved Places</PlacesHeading>
            {list.items.map((item, index) => (
                <Place refreshTrip={props.refreshTrip} deletePlace={props.deletePlace} key={`${item.title}-${Math.random()}`} id={props.id} list={list} item={item} new={false} />
            ))}
        </PlacesContainer>
    );
}

export default ExistingPlaces;

------------------------------
Title of ChecklistItem.js:
No Title Found
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPenToSquare, faTrash, faUserPlus } from '@fortawesome/free-solid-svg-icons';
import Popup from 'reactjs-popup';
import 'reactjs-popup/dist/index.css';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase';

const ItemContainer = styled.div`
    & .item {
        border: 1px #D6D6D6 solid;
        border-radius: 10px;
        -webkit-box-shadow: 0px 0px 10px 2px rgba(0,0,0,0.21); 
        box-shadow: 0px 0px 10px 2px rgba(0,0,0,0.21);
        min-height: 50px;
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        padding: 20px 0px;
        position: relative;
        margin-bottom: 20px;
        position: relative;
        font-family: "Sen", sans-serif;
        overflow: hidden;
        width: 100%;
    }

    .iconsContainer .check-icon {
        display: block;
        opacity: 0;
        transition:  opacity 0.2s ease;
    }

    &:hover {
        .iconsContainer .check-icon {
            opacity: 1;
        }
    }
`

const CompletedItem = styled.div`
    /* text-decoration: line-through; */
    color: #838383;
`

const TodoItem = styled.div`
    
`

const ItemTitle = styled.h1`
    font-weight: 600;
    font-size: 1.2rem;
    margin: 0px;
    text-align: left;
    /* max-width: 60%; */
`

const Checkbox = styled.input`
    zoom: 1.8;
    margin: 2px 10px;
    cursor: pointer;
    accent-color: #081736;
`

const IconsContainer = styled.div`
    /* background-color: tomato; */
    height: 100%;
    color: #081736;
    font-size: 1.2rem;
    /* min-width: 60px; */
    height: 100%;
    /* width: 130px; */
    position: absolute;
    right: 0px;
    top: 0;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-around;

    & .check-icon {
        margin: 0px 5px;
    }

    &:hover {
        cursor: pointer;
    }
`

const TitleContainer = styled.div`
    display: flex;
    align-items: center;
    justify-content: center;
    padding-right: 140px;
`

const AssignedImg = styled.img`
    height: 30px;
    width: 30px;
    border-radius: 100px;
    margin: 0px 15px 0px 10px;
`

const PopupContent = styled.div`
    padding: 10px;
`

const PopupTitle = styled.h6`
    font-family: "Sen", sans-serif;
    font-weight: 600;
`

const SelectMembers = styled.select`
    width: 90%;
`


function ChecklistItem(props) {
    const [thisItem, setThisItem] = useState(props.item);
    const [ members, setMembers ] = useState(props.members);
    const [ status, setStatus ] = useState(props.item.status);
    const [ hidden, setHidden ] = useState(false)
    
    console.log(thisItem);

    const handleCheck = () => {
        const newStatus = status === 'to-do' ? 'completed' : 'to-do';
        setStatus(newStatus);
        props.handleCheck(
            {
                ...thisItem,
                status: newStatus
            }
        )
    }

    const handleDelete = () => {
        props.handleDelete(thisItem);
        setHidden(true);
    }

    async function handleAssigned (e) {
        console.log(e.target.value)
        console.log(members)
        var imgUrl;
        for (let i = 0; i < members.length; i++) {
            if (members[i].username === e.target.value) {
                imgUrl = members[i].img;
            }
        }

        var newItem;

        if (e.target.value !== 'Unassigned') {
            newItem = {
                ...thisItem,
                isAssigned: true,
                assigned: {
                    username: e.target.value,
                    img: imgUrl
                }
            }
            setThisItem(prevItem => ({
                ...prevItem,
                isAssigned: true,
                assigned: {
                    username: e.target.value,
                    img: imgUrl
                }
            }))
            } else {
                newItem = {
                    ...thisItem,
                    isAssigned: false,
                    assigned: null
                }
                setThisItem(prevItem => ({
                    ...prevItem,
                    isAssigned: false,
                    assigned: null
                }))
            }

            const tripRef = doc(db, "trips", props.id);
            const docSnap = await getDoc(tripRef);
            const currentTrip = docSnap.data();

            const isItem = (element) => element.title === thisItem.title;
            var index = currentTrip.checklist.findIndex(isItem)
            var newChecklist = currentTrip.checklist.slice(0, index);
            newChecklist.push(newItem)

            newChecklist = newChecklist.concat(currentTrip.checklist.slice(index+1))

            updateDoc(tripRef, {
                checklist: newChecklist
            }).then(() => {
                console.log("Assign added")
                // updateTrip()
            }).catch(error => console.log(error.message));
    }

    const [selectedValue, setSelectedValue] = useState(thisItem.isAssigned ? thisItem.assigned.username : "Unassigned");

    const handleSelectChange = (event) => {
        setSelectedValue(event.target.value);
        // call your handleAssigned function here
        handleAssigned(event);
      };


    return (
        thisItem.status === 'to-do'
        ?
            <ItemContainer style={hidden ? {display: 'none'} : {}}>
                <TodoItem className="item">
                    <TitleContainer>
                        <Checkbox onChange={handleCheck} type="checkbox" id="vehicle1" name="vehicle1" value="Bike"/>
                        <ItemTitle>{thisItem.title}</ItemTitle>
                    </TitleContainer>
                    <IconsContainer className='iconsContainer'>
                        {/* <FontAwesomeIcon className='check-icon' icon={faPenToSquare}/> */}
                        <FontAwesomeIcon onClick={handleDelete} className='check-icon' icon={faTrash}/>
                        { !thisItem.isAssigned ? 
                            <Popup
                                trigger={open => (
                                    <FontAwesomeIcon style={{margin: '0px 10px'}} className='check-icon' icon={faUserPlus}/>
                                )}
                                position="left center"
                                closeOnDocumentClick
                            >
                                <PopupContent>
                                    <PopupTitle>Assign to someone</PopupTitle>
                                    <SelectMembers value={selectedValue} onChange={handleSelectChange} name="members" id="members">
                                        <option value={null}>Unassigned</option>
                                        {members.map((member, index) => (
                                            <option key={`${index}-${Math.random()}`} value={member.username}>{member.username}</option>
                                        ))}
                                    </SelectMembers>
                                </PopupContent>
                            </Popup>
                            :
                            <Popup
                                trigger={open => (
                                    <AssignedImg className='assigned-img' src={thisItem.assigned.img} />
                                )}
                                position="left center"
                                closeOnDocumentClick
                            >
                                <PopupContent>
                                    <PopupTitle>Assign to someone</PopupTitle>
                                    <SelectMembers value={selectedValue} onChange={handleSelectChange} name="members" id="members" >
                                        <option value={null}>Unassigned</option>
                                        {members.map((member, index) => (
                                            <option key={`${index}-${Math.random()}`} value={member.username}>{member.username}</option>
                                        ))}
                                    </SelectMembers>
                                </PopupContent>
                          </Popup>
                        }
                    </IconsContainer>
                </TodoItem>
            </ItemContainer>
        :
            <ItemContainer style={hidden ? {display: 'none'} : {}}>
                <CompletedItem className="item">
                    <TitleContainer>
                        {
                            status === 'to-do' ?
                                <Checkbox onChange={handleCheck} type="checkbox" id="vehicle1" name="vehicle1" value="Bike"/>
                            :
                                <Checkbox onChange={handleCheck} checked type="checkbox" id="vehicle1" name="vehicle1" value="Bike"/>
                        }
                        {
                            status === 'to-do' ?
                                <ItemTitle style={{textDecoration: 'none'}}>{thisItem.title}</ItemTitle>
                            :
                                <ItemTitle style={{textDecoration: 'line-through'}}>{thisItem.title}</ItemTitle>
                        }
                    </TitleContainer>
                    <IconsContainer className='iconsContainer'>
                        {/* <FontAwesomeIcon className='check-icon' icon={faPenToSquare}/> */}
                        <FontAwesomeIcon className='check-icon' onClick={handleDelete} icon={faTrash}/>
                        { !thisItem.isAssigned ? 
                            <Popup
                                trigger={open => (
                                    <FontAwesomeIcon style={{margin: '0px 10px'}} className='check-icon' icon={faUserPlus}/>
                                )}
                                position="left center"
                                closeOnDocumentClick
                            >
                                <PopupContent>
                                    <PopupTitle>Assign to someone</PopupTitle>
                                    <SelectMembers value={selectedValue} onChange={handleSelectChange} name="members" id="members">
                                        <option value={null}>Unassigned</option>
                                        {members.map((member, index) => (
                                            <option key={index} value={member.username}>{member.username}</option>
                                        ))}
                                    </SelectMembers>
                                </PopupContent>
                            </Popup>
                            :
                            <Popup
                                trigger={open => (
                                    <AssignedImg className='assigned-img' src={thisItem.assigned.img} />
                                )}
                                position="left center"
                                closeOnDocumentClick
                            >
                                <PopupContent>
                                    <PopupTitle>Assign to someone</PopupTitle>
                                    <SelectMembers value={selectedValue} onChange={handleSelectChange} name="members" id="members" >
                                        {members.map((member, index) => (
                                            <>
                                                {member.username === thisItem.assigned.username ?
                                                    <option key={index} value={member.username}>{member.username}</option> 
                                                    :
                                                    <option key={index} value={member.username}>{member.username}</option>
                                                }
                                            </>
                                        ))}
                                    </SelectMembers>
                                </PopupContent>
                          </Popup>
                            
                        }
                    </IconsContainer>
                </CompletedItem>
            </ItemContainer>
        
    );
}

export default ChecklistItem;

------------------------------
Title of TripOverview.js:
No Title Found
import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import Itinerary from './Itinerary.js';
import Map from './Map.js';
import OverviewContent from './OverviewContent.js';


const PageContainer = styled.div`
    /* display: flex;
    flex-direction: row;
    width: 100vw;
    justify-content: end; */
    width: 100vw;
    display: flex;
    flex-direction: row;
    /* justify-content: end; */

    @media screen and (max-width: 1001px) {
        flex-direction: column;
    } 
`

const mapStyle = {
    justifySelf: 'start'
}

function TripOverview(props) {
    const [trip, setTrip] = useState(props.trip)

    useEffect(() => {
        console.log(props);
        setTrip(props.trip);
        
    }, [props.trip])

    const saveTrip = useCallback((item) => {
        setTrip(prevTrip => ({
            ...prevTrip,
            blocks: [...prevTrip.blocks, item]
        }));
    }, []);

    return (
        <PageContainer style={{display: props.display}}>
            {/* <Itinerary trip={trip} /> */}
            <OverviewContent saveTrip={saveTrip} id={props.id} trip={trip} />
            <Map
                style={mapStyle}
                trip={trip}
                onLoad={map => {
                    const bounds = new window.google.maps.LatLngBounds();
                    map.fitBounds(bounds);
                }}
                onUnmount={map => {
                    // do your stuff before map is unmounted
                }}
            />
        </PageContainer>
    );
}

export default TripOverview;

------------------------------
Title of Day.js:
No Title Found
import React from 'react';
import Activity from './Activity';
import styled from 'styled-components';

const StyledDay = styled.div`
  border-top: 1px solid #ddd;
  padding: 10px;
`;

const Title = styled.div`
  display: flex;
  justify-content: space-between;
  cursor: pointer;

  &:hover {
    background-color: #eee;
  }

  & .fa-chevron-up,
  & .fa-chevron-down {
    font-size: 16px;
    margin-left: 10px;
    transition: all 0.3s ease-in-out;
  }

  & .fa-chevron-up {
    transform: rotate(180deg);
  }

  &.active .fa-chevron-up,
  &:not(.active) .fa-chevron-down {
    transform: rotate(0deg);
  }
`;

const Activities = styled.div`
  margin-left: 20px;
`;

const Day = ({ day, index, activeIndex, onTitleClick }) => {
  const isActive = index === activeIndex;

  return (
    <StyledDay>
      <Title className={isActive ? 'active' : ''} onClick={() => onTitleClick(index)}>
        <h2>{day.date}</h2>
        <i className={`fa fas ${isActive ? 'fa-chevron-up' : 'fa-chevron-down'}`} />
      </Title>
      {isActive && (
        <Activities>
          {day.activities.map((activity, index) => (
            <Activity key={index} activity={activity} />
          ))}
        </Activities>
      )}
    </StyledDay>
  );
};

export default Day;

------------------------------
Title of BlocksArea.js:
No Title Found
import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
import Block from './Blocks/Block.js';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faGripVertical, faTrash } from '@fortawesome/free-solid-svg-icons';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase.js';

const ListContainer = styled.div`
    display: flex;
    font-size: 18px;
    /* background-color: #eee; */
    flex-direction: column;
    margin-top: 20px;
`

const ItemContainer = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  width: 100%;
  margin: 10px 0px;
  background: #F4F4F4;
  -webkit-box-shadow: 5px 5px 15px -5px rgba(0,0,0,0.27); 
  box-shadow: 5px 5px 15px -5px rgba(0,0,0,0.27);
  border-radius: 10px;

  &:hover {
    .handle {
      opacity: 1;
    }
  }

  &::selection {
    opacity: 1;
  }
`

const Handle = styled.div`
  color: #B0B0B0;
  margin: 10px;
  opacity: 0;
  transition: 0.1s opacity ease-in;
`


function BlocksArea(props) {
    const [trip, setTrip] = useState(props.trip);
    const [hidden, setHidden] = useState([]);
    var defaultList = props.trip.blocks.map((x) => x);

    const [itemList, setItemList] = useState(defaultList);

    useEffect(() => {
        setTrip(props.trip);
        defaultList = props.trip.blocks.map((x) => x);
        setItemList(defaultList);
        
    }, [props.trip])
  
    // Function to update list on drop
    async function handleDrop(droppedItem) {
      // Ignore drop outside droppable container
      if (!droppedItem.destination) return;

      const tripRefGet = doc(db, "trips", props.id);
      const docSnap = await getDoc(tripRefGet);
      const currentTrip = docSnap.data();
      var updatedList = [...currentTrip.blocks];
      // Remove dragged item
      const [reorderedItem] = updatedList.splice(droppedItem.source.index, 1);
      // Add dropped item
      updatedList.splice(droppedItem.destination.index, 0, reorderedItem);
      // Update State
      setItemList(updatedList);
      console.log(updatedList);

      // updating the order on firebase
      console.log('handleDrop')
      console.log(updatedList.length)
      const tripRef = doc(db, "trips", props.id);
      await updateDoc(tripRef, { blocks: updatedList }).catch((error) => console.log(error.message));
      
      props.updateTrip({
        ...props.trip,
        blocks: updatedList
      })
    };

    const addToHidden = useCallback((newHidden) => {
      setHidden(oldHidden => [...oldHidden, newHidden]);
      const newItems = trip.blocks.filter(i => i.created !== newHidden);

      let defaultListDelete =newItems.map((x) => x);
      setItemList(defaultListDelete);
      setTrip(oldTrip => ({
        ...oldTrip,
        blocks: newItems
      }))

    })
  
    return (
      <div className="App">
        <DragDropContext onDragEnd={handleDrop}>
          <Droppable droppableId="list-container">
            {(provided) => {
              return (
                <ListContainer
                  className="list-container"
                  {...provided.droppableProps}
                  ref={provided.innerRef}
                >
                  {itemList.map((item, index) => (
                    <>
                    { !hidden.includes(item.created) ? 
                      <Draggable key={`drag-${index.toString()}`} draggableId={`drag-${index.toString()}`} index={index}>
                      {(provided) => (
                        <ItemContainer
                          className="item-container"
                          ref={provided.innerRef}
                          {...provided.dragHandleProps}
                          {...provided.draggableProps}
                        >
                          <Handle className='handle'>
                            <FontAwesomeIcon icon={faGripVertical}/>
                          </Handle>
                          <Block addToHidden={addToHidden} id={props.id} item={itemList[index]} trip={trip} />
                        </ItemContainer>
                      )}
                    </Draggable>
                      :
                      <></>
                    }
                    </>
                  ))}
                  {provided.placeholder}
                </ListContainer>
              )
            }}
          </Droppable>
        </DragDropContext>
      </div>
    );
};

export default BlocksArea;

------------------------------
Title of Map.js:
No Title Found
import React, { useState, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { GoogleMap, useGoogleMap , LoadScript, useJsApiLoader, MarkerF, InfoWindowF, BicyclingLayer, TransitLayer, TrafficLayer } from '@react-google-maps/api';
import mapIcon from './../../images/google-map-icon.png';
import LocationPin from './LocationPin';
import WorldLoader from '../WorldLoader';
import EmojiImg from '../EmojiImg';
import CodesCoordinate from './CodesCoordinate';


const containerStyle = {
    width: '100vw',
    height: '100vh',
    borderRadius: '0px'
};

const MapContainer = styled.div`
    background-color: #e6e6e6;
    width: '50vw';
    height: '50vh';
`

const ToggleOption = styled.button`
    font-size: 20px;
    border: none;
    background: none;
`

const Toggles = styled.div`
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    left: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    height: 80px;
    background-color: #fff;
    border-radius: 0px 10px 10px 0px;
`

const InfoWindowContainer = styled.div`
    background: white;
    /* border: 1px solid #ccc; */
    padding: 15px;
`

const InfoWindowCategory = styled.h6`
    font-family: "Sen", sans-serif;
    font-size: 0.73rem;
    font-weight: 600;
    color: #6A6A6A;
    text-transform: uppercase;
`

const InfoWindowLabel = styled.h6`
    font-family: "Sen", sans-serif;
`

const InfoWindowAddress = styled.p`
    font-family: "Sen", sans-serif;
    font-style: italic;
    font-weight: 500;
`

const InfoWindowDescription = styled.p`

`

const InfoWindowLink = styled.a`
    font-family: "Sen", sans-serif;
    text-transform: uppercase;
    text-decoration: none;
    font-weight: 600;
    cursor: pointer;
`

const SaveMapBox = styled.div`
    border-radius: 100px;
    background: #fff;
    position: absolute;
    top: 60px;
    left: 10px;
    height: 50px;
    cursor: pointer;
`

const SaveMapText = styled.p`
    color: #081736;
    padding: 10px;
    font-family: "Sen", sans-serif;
    font-weight: 600;
`

const MapIcon = styled.img`
    width: 30px;
    height: 30px;
`


const convertMarkers = (trip) => {
    var markersList = [];
    
    var lat = 0;
    var lng = 0;

    if (trip != null) {
        trip.lists.forEach(function(item) {
            console.log(item)
            item.items.forEach(function(marker) {
                console.log(marker.position.lat)
                markersList.push(
                    {
                        list: item.title,
                        label: marker.title,
                        emoji: item.emoji,
                        address: item.address,
                        link: marker.link,
                        position: {
                            lat: parseFloat(marker.position.lat),
                            lng: parseFloat(marker.position.lng)
                        }
                    }
                )
                lat += parseFloat(marker.position.lat);
                lng += parseFloat(marker.position.lng);
            })
        })
    } else {
        console.log("Trip not found.");
    }

    console.log(markersList);

    var convert = {
        markers: markersList,
        center: {lat: lat/markersList.length, lng: lng/markersList.length}
    }

    console.log(convert.center)

    return convert;
}

function SaveToGoogleMapsButton(props) {
    // Get the Google Maps object using the useGoogleMap hook
    const map = useGoogleMap();
    let markersProps = props.markers;
    console.log(markersProps)
  
    function saveToGoogleMaps() {
      // Get the current map center and zoom level
      const center = map.getCenter();
      const zoom = map.getZoom();
  
      // Create an array to hold the marker data
      const markers = [];
  
      // Loop through each marker on the map and add its data to the array
      markersProps.forEach(function(marker) {
        markers.push({
          position: marker.position,
          title: marker.label,
          // Add any other marker data you want to include here
        });
      });
  
      let url = "https://www.google.com/maps/place/";
  
        if (markers.length === 0) {
        // If there are no markers, just link to the map center
        url += center.lat() + "," + center.lng();
        } else if (markers.length === 1) {
        // If there is only one marker, link directly to it
        url += markers[0].getPosition() + "," + markers[0].getPosition();
        } else {
        // If there are multiple markers, create a URL-encoded string of their positions
        const markerPositions = markers.map(m => m.position.lat + "," + m.position.lng).join("|");
        url += "@(" + markerPositions + ")";
        }
    
        url += "/@" + center.lat() + "," + center.lng() + "," + zoom + "z";
  
      // Open the Google Maps API in a new window
      window.open(url);
    }
  
    return (
        <SaveMapBox onClick={saveToGoogleMaps}>
            <SaveMapText><MapIcon src={mapIcon} /> Export map</SaveMapText>
        </SaveMapBox>
    );
}


function Map(props) {
    const [ trip, setTrip ] = useState(props.trip);
    const [ markers, setMarkers ] = useState([]);
    const [ center, setCenter ] = useState({lat: 0, lng: 0});
    const [ key, setKey] = useState(process.env.GOOGLEKEY);
    const [ zoom, setZoom] = useState(13);
    const [ layers, setLayers ] = useState({
        bicycling: false,
        transit: false
    });

    const [ infoWindow, setInfoWindow ] = useState({
        showInfoWindow: true,
        selectedMarker: null,
    })

    useEffect(() => {
        console.log(props.trip)
        setTrip(props.trip);
        let convert = convertMarkers(trip);
        setMarkers(convert.markers);
        if (convert.center && convert.center.lat) {
            setCenter(convert.center);
        } else if (trip.place_code != '') {
            setZoom(6);
            let coordinates = CodesCoordinate[trip.place_code]
            if (coordinates) {
                setCenter(coordinates)
            } else {
                setCenter({lat: 32.0853, lng: 34.7818})
            }
        } else {
            setCenter({lat: 32.0853, lng: 34.7818})
        }
        
        console.log("MAP LOADED");

    }, [props.trip])

    const { isLoaded } = useJsApiLoader({
        id: 'google-map-script',
        googleMapsApiKey: "AIzaSyAAqWy0DmJhNoklNmZgyVRiZY9daxfswrY"
      })

    return ( isLoaded ? (
        <MapContainer>
                <GoogleMap
                    id="map"
                    mapContainerStyle={containerStyle} 
                    center={center}
                    zoom={zoom}
                >
                    <Toggles>
                        <ToggleOption style={{color: layers.bicycling ? "#000" : "#7d7d7d"}} onClick={() => (setLayers({...layers, bicycling: !(layers.bicycling)}))}><i className="fa fa-solid fa-bicycle"></i></ToggleOption>
                        <ToggleOption style={{color: layers.transit ? "#000" : "#7d7d7d"}} onClick={() => (setLayers({...layers, transit: !(layers.transit)}))}><i className="fa fa-solid fa-train"></i></ToggleOption>
                    </Toggles>
                    { layers.bicycling ? <BicyclingLayer/> : <></> }
                    { layers.transit ? <TransitLayer/> : <></> }

                    { /* Child components, such as markers, info windows, etc. */ }
                    { markers.map((item, index) => (
                        <MarkerF
                            key={index}
                            position={item.position}
                            onClick={() => {
                                setInfoWindow({...infoWindow, selectedMarker: item})
                            }}
                            icon={
                                new window.google.maps.MarkerImage(
                                    `https://emojicdn.elk.sh/${item.emoji}`,
                                    null, /* size is determined at runtime */
                                    null, /* origin is 0,0 */
                                    null, /* anchor is bottom center of the scaled image */
                                    new window.google.maps.Size(35, 35)
                                )
                            }
                        />
                    )) }
                    { infoWindow.selectedMarker ? 
                        <InfoWindowF
                            // onLoad={onLoad}
                            position={infoWindow.selectedMarker.position}
                            onCloseClick={
                                () => {
                                    setInfoWindow({...infoWindow, selectedMarker: null})
                                }
                            }
                            marker={infoWindow.selectedMarker}
                        >
                            <InfoWindowContainer>
                                <InfoWindowCategory>{infoWindow.selectedMarker.list}</InfoWindowCategory>
                                <InfoWindowLabel>{infoWindow.selectedMarker.label}</InfoWindowLabel>
                                <InfoWindowAddress>{infoWindow.selectedMarker.address}</InfoWindowAddress>
                                <InfoWindowLink onClick={() => (window.open(infoWindow.selectedMarker.link))}>Open in Google Maps</InfoWindowLink>
                            </InfoWindowContainer>
                        </InfoWindowF>
                        : null
                    }
                </GoogleMap>
        </MapContainer>
    ) : <></>
    )
}

export default React.memo(Map);
------------------------------
Title of NewList.js:
No Title Found
import React, { useState, useEffect, useCallback } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import DetailsContent from './DetailsContent';
import Popup from 'reactjs-popup';
import EmojiPicker from 'emoji-picker-react';
import EmojiImg from '../EmojiImg';
import ListImageSearch from './ListImageSearch';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faXmark, faTrash } from '@fortawesome/free-solid-svg-icons';
import Picker from '@emoji-mart/react';
import data from '@emoji-mart/data';
import { arrayUnion, doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase';


const NewListContainer = styled.div`
    width: 300px;
    height: 400px;
    border: 1px #D6D6D6 solid;
    border-radius: 10px;
    color: #838383;
    position: relative;
    margin: 15px 15px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    &:hover {
        background-color: #E8E8E8;
        cursor: pointer;
    }
`

const NewTitle = styled.h1`
    font-size: 1.4em;
    font-family: "Sen", sans-serif;
    text-align: center;
    font-weight: 600;
`

const NewIcon = styled.i`
    font-size: 1.5em;
    margin-bottom: 20px;
`

const ListForm = styled.form`
    padding: 10px;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    /* background-color: aliceblue; */
`

const FormTitle = styled.h3`
    margin-left: 10px;
    font-family: "Lora", sans-serif;
    font-weight: 600;
`

const FormMainInputs = styled.div`
    display: flex;
    align-items: center;
`

const ListName = styled.input`
    margin-right: 20px;
    border: none;
    margin-left: 10px;
    height: 35px;
    width: 300px;
    color: #242424;
    font-family: "Sen", sans-serif;
    font-size: 1.3em;
    border-bottom: 2px solid rgb(200, 200, 200, 0.8);
    transition: all ease-in 0.2s;

    &::placeholder {
        color: rgb(200, 200, 200, 0.8);
        font-family: "Sen", sans-serif;
        /* border-bottom: 3px solid red; */
        /* font-size: 2em; */
    }
    
    &:focus {
        outline: none;
        border-bottom: 2px solid #1746A2;
    }

    @media (max-width: 450px) {
        width: 190px;
    }
`

const FormSubmit = styled.button`
    background-color: #1746A2;
    border: none;
    border-radius: 5px;
    color: #fff;
    margin-top: auto;
    padding: 5px 10px;
    font-family: "Sen", sans-serif;
`

const EmojiContainer = styled.div`
    display: inline-flex;
    justify-content: center;
    align-items: center;
    height: 60px;
    width: 60px;
    transition: 0.15s ease;
    border-radius: 10px;
    cursor: pointer;
    font-size: 2.5em;

    & span {
        line-height: 50px;
    }

    &:hover {
        background-color: rgba(200, 200, 200, 0.5);
    }
`

const ImageSearchBox = styled.div`
    margin-top: 10px;
`

const SearchInput = styled.input`

`

const SearchImageButton = styled.button`

`

const BackContainer = styled.div`
    margin: 10px;
    position: absolute;
    top: 0px;
    right: 0px;
    cursor: pointer;
    font-family : "Sen", "sans-serif";
    background-color: #F1F1F1;
    z-index: 4;
    width: 40px;
    height: 40px;
    padding: 5px 10px;
    transition: 0.25s ease;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #fff;


    &:hover {
        background-color: #F1F1F1;
        border-radius: 100%;
    }
`


var emojis = [
    '🌎', '🛩️', '🗽', '🧳', '🏛️'
];


function NewList(props) {
    const [ title, setTitle ] = useState('');
    const [ emoji, setEmoji ] = useState(emojis[Math.floor(Math.random() * emojis.length)]);
    const [ img, setImg ] = useState('');
    const [ valid, setValid ] = useState(true);

    async function onSubmit (closing, saveTrip) {
        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef);
        const currentLists = docSnap.data().lists;
        console.log(currentLists);
        var allow = true;

        for (let i = 0; i < currentLists.length; i++) {
            if (currentLists[i].title === title) {
                allow = false;
            }
        }

        if (allow) {
            if (img !== '' && title !== '') {
                updateDoc(tripRef, {
                    lists: arrayUnion({
                        title: title,
                        emoji: emoji,
                        img: img,
                        items: []
                    })}).then(() => {
                console.log("List added");
                closing();
                setTitle('');
                if (valid) {
                    console.log(' omgom')
                    saveTrip({
                        title: title,
                        emoji: emoji,
                        img: img,
                        items: []
                    });
                }
                console.log(valid)
                setValid(false);
                setImg('');
                setTitle('')
                }).catch(error => console.log(error.message));
            } else {
                alert('Please select all fields')
            }
        } else {
            alert(`You already have a list called ${title}`)
        }
    }

    const updateImg = useCallback((newUrl) => {
        setImg(newUrl)
    }, []);

    const handleChange = e => {
        setValid(true);
        setTitle(e.target.value);
    }

    const contentStyle = {borderRadius:'10px', width: '700px', height: '500px', maxWidth: '90%'};

    const contentStyleEmoji = {borderRadius:'10px', width: "363px", height: "447.5px"};

    return (
        <Popup contentStyle={contentStyle} className='popup form-modal' nested trigger={
            <NewListContainer>
                <NewIcon className="fa fa-solid fa-plus"></NewIcon>
                <NewTitle>New List</NewTitle>
            </NewListContainer>
        } modal>
            {close => (
                <ListForm onSubmit={(event) => event.preventDefault()}>
                    <BackContainer onClick={close}>
                        <FontAwesomeIcon icon={faXmark} />
                    </BackContainer>
                    <FormTitle>New list</FormTitle>
                    <FormMainInputs>
                        <ListName value={title} onChange={handleChange} placeholder="List name" type='text'/>
                        <Popup
                            trigger={open => (
                                <EmojiContainer><EmojiImg size="40px" emoji={emoji}/></EmojiContainer>
                                // <button className="button">{emoji}</button>
                            )}
                            position="bottom center"
                            nested
                            contentStyle={contentStyleEmoji} 
                        >
                            <div>
                                <Picker data={data} onEmojiSelect={(emoji) => setEmoji(emoji.native)} />
                                {/* <EmojiPicker onEmojiClick={(emoji) => setEmoji(emoji.emoji)} /> */}
                            </div>
                        </Popup>
                    </FormMainInputs>
                    <ListImageSearch parentCallback={updateImg}/>
                    <FormSubmit onClick={() => onSubmit(close, props.saveList)}>Save</FormSubmit>
                </ListForm>
            )}
        </Popup>
    );
}

export default NewList;

------------------------------
Title of TripItemDashboard.js:
No Title Found
import React, { useState, useEffect, useCallback, useContext } from 'react';
import ReactDOM from 'react-dom';
import { Link, useNavigate } from 'react-router-dom';
import styled from 'styled-components';
import EmojiImg from '../EmojiImg';
import DeleteConfirm from '../DeleteConfirm';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faTrash } from '@fortawesome/free-solid-svg-icons';
import DateRange from '../DateRange';
import { deleteDoc, doc, updateDoc } from 'firebase/firestore';
import { db } from '../../firebase';
import { AuthContext } from '../../Auth';



const Trip = styled.div`
    width: 280px;
    height: 500px;
    border-radius: 30px;
    padding: 0px 20px;
    -webkit-box-shadow: 5px 5px 11px 3px rgba(0,0,0,0.36); 
    box-shadow: 5px 5px 11px 3px rgba(0,0,0,0.36);
    display: flex;
    flex-direction: column;
    justify-content: end;

    background-color: #081736;
    background-image: url(${props => props.image ? props.image : "none"};);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    transition: transform 0.2s ease;
    margin: 20px auto;

    &:hover {
        cursor: pointer;
        transform: scale(1.03);
    }

    &:hover .icons-container {
        transition: all 0.3s ease;
        opacity: 1;
        display: flex;
    }

    @media (max-width: 991px) {
        & {
            width: 300px;
            height: 400px;
        }
    }

    @media (max-width: 768px) {
        & {
            width: 100%;
            height: 400px;
        }
    }
`

const TripDetails = styled.div`
    align-self: start;
    justify-self: end;
    width: 100%;
    margin: 0px 0px 15px 0px;
    background-color: #fff;
    padding: 10px;
    border-radius: 10px;
`

const TripDate = styled.p`
    color: #333333;
    font-weight: 600;
    font-size: 1rem;
    font-family: "Sen", sans-serif;
    margin: 0px;
`

const IconsContainer = styled.div`
    font-size: 1.3em;
    display: none;
    justify-content: center;
    align-items: center;
    position: absolute;
    top: 15px;
    right: 20px;
    opacity: 0;
    transition: all 0.15s ease;
    color: #000;
    border-radius: 100px;
    width: 40px;
    height: 40px;
    background-color: rgba(255, 255, 255, 0.7);
    border-radius: 100px;
    padding: 5px 10px;


    &:hover {
        background-color: #fff;
    }
`


const TripTitle = styled.h3`
    color: #000;
    display: inline;
    font-family: 'Lora', serif;
    text-transform: uppercase;
    font-weight: 700;
    font-size: 1.7em;
    display: flex;
    justify-content: start;
    align-items: center;
`

function TripItemDashboard(props)
{
    const [trip, setTrip] = useState(props.trip);
    const [ showDelete, setShowDelete ] = useState(false);
    const { currentUser } = useContext(AuthContext);
    const navigate = useNavigate();

    useEffect(() => {
        setTrip(props.trip);
    }, [props.trip])

    const handleChildElementClick = (e) => {
        e.stopPropagation()
        setShowDelete(!showDelete);
    }

    const toggleDeleteShow = useCallback(() => {
        console.log(" toggle")
        setShowDelete(false);
    }, [setShowDelete]);

    const deleteAction = useCallback(() => {
        setShowDelete(false);
        var tripID = props.id;
        if (trip.users.length == 1) {
            deleteDoc(doc(db, "trips", tripID)).then(() => {
                console.log('trip delete')
                props.updateTrips();
            })
        } 
        else {
            console.log(trip);
            var newUsers = trip.users; // remove user from trip members and all checklist items he's assigned to
            console.log(trip.users)
            console.log(currentUser.uid)
            var removeID = currentUser.uid;
            var index = newUsers.findIndex(item => item === removeID);
            if (index > -1) {
                newUsers.splice(index, 1);
                // now removing from the members array
                var newMembers = trip.members;
                newMembers = newMembers.filter(member => member.uid !== removeID);

                // now removing all checklist todos
                var newChecklist = trip.checklist;
                for (let i = 0; i < newChecklist.length; i++) {
                    if (newChecklist[i].isAssigned && newChecklist[i].assigned.username === removeID) {
                        newChecklist[i].isAssigned = false;
                        newChecklist[i].assigned = null;
                    }
                }

                const tripRef = doc(db, "trips", props.id);
                updateDoc(tripRef, {
                    users: newUsers,
                    members: newMembers,
                    checklist: newChecklist
                }).then(() => {props.updateTrips()});
            } else {
                console.log('user not found')
            }
        }
    }, []);


    return (
        <div onClick={() => navigate("/trip", {state: {trip: trip, id: props.id}})} className='no-underline' to="/trip" state={{trip: trip}}>
            <Trip updateTrips={props.updateTrips} image={trip.image}>
                <TripDetails>
                    <IconsContainer onClick={(e) => handleChildElementClick(e)} style={{zIndex: 10}} className='icons-container'>
                        <FontAwesomeIcon icon={faTrash} className='trash-icon'/>
                    </IconsContainer>
                    <TripTitle>{trip.title}{<EmojiImg size="33px" emoji={trip.emoji}/>}</TripTitle>
                    <TripDate><DateRange date={trip.date}/></TripDate>
                </TripDetails>
            </Trip>
            {
                showDelete ?
                    <DeleteConfirm deleteAction={deleteAction} handleDelete={() => console.log('Deleting trip')} parentCallback={toggleDeleteShow} trip={trip} />
                :
                    <></>
            }
        </div>
    );
}


export default TripItemDashboard;
------------------------------
Title of NewPlacesMobile.js:
No Title Found
import React, { useState, useEffect, useRef } from 'react';
import ReactDOMServer from 'react-dom/server';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import Place from './Place';
import WorldLoader from '../WorldLoader';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faMagnifyingGlass } from '@fortawesome/free-solid-svg-icons'

const PlacesContainer = styled.div`
    /* padding: 10px; */
    overflow-y: scroll;
    position: relative;
    height: calc(100%);
    box-sizing: border-box;
`

const PlacesHeading = styled.h3`
    margin: 15px;
    font-family: "Lora", sans-serif;
    font-weight: 550;
`

const SearchContainer = styled.div`

`

const InputField = styled.input`
    margin: 5px 15px;
    font-family: "Sen", sans-serif;
    min-width: 60%;
    border-radius: 5px;
    padding: 5px;
    border: 1.5px solid #8c8c8c;
    height: 40px;

    &:focus {
        border-color: #1746A2;
    }
`

const SubmitButton = styled.button`
    height: 40px;
    background-color: #1746A2;
    border: none;
    color: #fff;
    border-radius: 5px;
    padding: 5px 10px;
    width: calc(40% - 40px);
`

const NoLocations = styled.div`
    padding: 30px 15px;
    /* text-align: center; */
`

const  NoLocationsText = styled.h4`
    font-family: "Sen", sans-serif;
    font-size: 1.2em;
`


function NewPlacesMobile(props) {
    const [ searched, setSearched ] = useState(false);
    const [ list, setList ] = useState({
        ...props.list,
    });
    const [ searchList, setSearchList ] = useState([]);
    const [ mapList, setMapList ] = useState([])
    const [ loaded, setLoaded ] = useState(true);
    const [ counter, setCounter ] = useState(0);

    useEffect(() => {
        setList({
            ...props.list,
        })

        const input = document.getElementById(`pac-input-${list.title}-${props.id}-2`);
        const searchBox = new window.google.maps.places.SearchBox(input);

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener("places_changed", () => {
            const places = searchBox.getPlaces()

            if (places.length == 0) {
                return;
            }

            var newItemsPrev = [];
            setSearchList([]);

            places.forEach((place) => {
                if (!place.geometry || !place.geometry.location) {
                    console.log("Returned place contains no geometry");
                    return;
                } else {
                    let imgUrl = null;
                    if (place.photos && place.photos.length > 0) {
                        imgUrl = place.photos[0].getUrl({ 'maxWidth': 550, 'maxHeight': 550 })
                    } else {
                        imgUrl = '';
                    }
                    setSearchList([...newItemsPrev,
                        {
                            title: place.name,
                            address: place.formatted_address,
                            position: {lat: place.geometry.location.lat(), lng: place.geometry.location.lng()},
                            link: `https://www.google.com/maps/place/?q=place_id:${place.place_id}`,
                            img: imgUrl
                        }
                    ])
                    newItemsPrev.push({
                        title: place.name,
                        address: place.formatted_address,
                        position: {lat: place.geometry.location.lat(), lng: place.geometry.location.lng()},
                        link: `https://www.google.com/maps/place/?q=place_id:${place.place_id}`,
                        img: imgUrl
                    })
            }
            });
            console.log(searchList)
        });
        

    }, [searchList])

    const handleSubmit = (event) => {
        console.log('Submit!!')
        setSearched(true);
        const newPlaces = searchList.map(place => ({...place}));
        setMapList(newPlaces);
        setCounter(counter+1);
        console.log(newPlaces);
    }

    return (
        <PlacesContainer>
            <PlacesHeading>Explore</PlacesHeading>
            <SearchContainer id={`pac-container-${list.id}-${props.id}-2`}>
                <InputField onChange={() => setSearched(false)} id={`pac-input-${list.title}-${props.id}-2`} type="text"
                    placeholder="Search for location" />
                { loaded ?  
                <SubmitButton onClick={handleSubmit}><FontAwesomeIcon icon={faMagnifyingGlass}/></SubmitButton>
                :
                <SubmitButton style={{background: "#a8a8a8"}} disabled onClick={handleSubmit}><i class="fa fa-solid fa-binoculars"></i></SubmitButton>
                }
            </SearchContainer>
            {   mapList.length > 0 ?
                    <>
                        {mapList.map((item, index) => (
                            <Place refreshTrip={props.refreshTrip} updateList={props.updateList} id={props.id} list={list} key={`${item.title}-${Math.random()}`} item={{...item}} new={true} />
                        ))}
                    </>
                :
                (
                    searched ?
                    <NoLocations>
                        <NoLocationsText>No results</NoLocationsText>
                    </NoLocations>
                    :
                    <></>
                )
            }
        </PlacesContainer>
    );
}

export default NewPlacesMobile;

------------------------------
Title of ListImageSearch.js:
No Title Found
import React, { useState, useEffect, useCallback } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSearch } from '@fortawesome/free-solid-svg-icons';
import { getImages } from '../../services/GetUnsplashImages';
import WorldLoader from '../WorldLoader';


const ImageSearchBox = styled.div`
    margin: 10px 0px;
`

const SearchInput = styled.input`
    margin-right: 20px;
    border: none;
    margin-left: 10px;
    height: 35px;
    width: 300px;
    color: #242424;
    font-family: "Sen", sans-serif;
    font-size: 1.3em;
    border-bottom: 2px solid rgb(200, 200, 200, 0.8);
    transition: all ease-in 0.2s;

    &::placeholder {
        color: rgb(200, 200, 200, 0.8);
        font-family: "Sen", sans-serif;
        /* border-bottom: 3px solid red; */
        /* font-size: 2em; */
    }
    
    &:focus {
        outline: none;
        border-bottom: 2px solid #1746A2;
    }

    @media (max-width: 450px) {
        width: 190px;
    }
`

const SearchImageButton = styled.button`
    background-color: #1746A2;
    border: none;
    color: #fff;
    padding: 5px;
    border-radius: 5px;
    width: 35px;
    height: 35px;
`

const ImagesResults = styled.div`
    width: 100%;
    height: 260px;
    margin-top: 10px;
    overflow-y: scroll;
    &::-webkit-scrollbar{
        display: none;
    }
`

const ImagesBox = styled.div`
`

const ImagesFlex = styled.div`
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: space-between;
    justify-content: space-evenly;
`

const ImageContainer = styled.div`
    width: 33.3%;
    padding: 10px;

    .active-img {
        border: 5px solid #081736;
        border-radius: 5px;
    }

    @media (max-width: 650px) {
        width: 50%;
    }

    @media (max-width: 500px) {
        width: 100%;
    }
`

const Image = styled.img`
    width: 100%;
    height: 140px;
    border-radius: 5px;
    object-fit: cover;
    /* margin: 10px; */
    cursor: pointer;


`

const NoResults = styled.p`
    font-family: "Sen";

`

const SearchBox = styled.div`
    display: flex;
    align-items: center;
`

const LoaderBox = styled.div`
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
`


var emojis = [
    '🌎', '🛩️', '🗽', '🧳', '🏛️'
];


function ListImageSearch(props) {
    const [ imageQuery, setImageQuery ] = useState('');
    const [ hasClicked, setHasClicked ] = useState(false);
    const  [ isLoading, setIsLoading ] = useState(false);
    const [ results, setResults ] = useState([]); 
    const [ activeImg, setActiveImg ] = useState({item: null, index: -1});

    useEffect(() => {

    }, [])

    const onClick = (e) => {
        e.preventDefault();
        setIsLoading(true);
        getImages(imageQuery).then(response => {
            console.log(response)
            
            setIsLoading(false);
            setHasClicked(true);
            
            setResults(response.results);
            console.log(results)
        });
    }

    const handleChange = e => {
        setImageQuery(e.target.value)
    }

    const handleSelect = (item, index) => {
        console.log(item)
        setActiveImg({item: item, index: index})
        if (props.parentCallback) {
            props.parentCallback(item.urls.regular)
        }
    }


    return (
        <ImageSearchBox>
            <SearchBox>
                <SearchInput onChange={handleChange} name='image-query' value={imageQuery} placeholder='Choose banner image' type="text" />
                <SearchImageButton onClick={onClick}>
                    <FontAwesomeIcon icon={faSearch} />
                </SearchImageButton>
            </SearchBox>
            <ImagesResults>
                {
                    isLoading ? <LoaderBox><WorldLoader /></LoaderBox> : <></>
                }
                {
                    hasClicked ? 
                        <ImagesBox>
                            { (!results || results.length === 0) ? <NoResults>No results found</NoResults>
                                :
                                <ImagesFlex>
                                        {results.slice(0, 10).map((item, index) => {
                                        return (
                                            <ImageContainer key={index} onClick={() => handleSelect(item, index)}>
                                                <Image className={index === activeImg.index ? "active-img" : ""} key={index} src={item.urls.small} alt={item.alt_description} />
                                            </ImageContainer>
                                        )
                                    })}
                                </ImagesFlex>
                            }
                        </ImagesBox>
                    : <></>
                }
            </ImagesResults>
        </ImageSearchBox>

    );
}

export default ListImageSearch;

------------------------------
Title of BudgetBlock.js:
ea
import React, { useState, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus, faBed, faPlane, faFilm, faBurger, faBagShopping, faBus, faTag, faCoins } from '@fortawesome/free-solid-svg-icons';
import Progress from './BudgetProgress';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../../firebase';

const BlockContainer = styled.div`
    margin-top: 10px;
` 

const Categories = styled.div`
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
`

const Category = styled.div`
    font-family: "Sen", sans-serif;
    height: 180px;
    width: 180px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin: 5px;
    border-radius: 10px;
    background-color: #EFEFEF;

    &:hover {
        /* background-color: #F8F8F8; */
        border: 1px solid #1746A2;
    }
`

const CategoryTitle = styled.h6`
    font-weight: 500;
    font-size: 1.1em;
`

const CategoryIcon = styled(FontAwesomeIcon)`
    font-size: 1.6em;
    margin: 10px;
    color: #1746A2;
`

const CategoryInput = styled.input`
    width: 100px;
    background: none;
    height: 40px;
    font-family: "Sen", sans-serif;
    font-size: 1.8em;
    border: none;
    outline: none;
    text-align: center;
    color: #2A2A2A;

    &::placeholder {
        color: #CACACA;
    }
`

const TotalAmount = styled.p`
    width: 100px;
    background: none;
    height: 40px;
    font-family: "Sen", sans-serif;
    font-size: 1.8em;
    border: none;
    outline: none;
    text-align: center;
    color: #2A2A2A;
`

// Goal area
const Limit = styled.div`
    margin: 15px 10px;
    font-family: 'Sen', sans-serif;
`

const LimitTitle = styled.h4`
    display: inline-block;
    margin-right: 10px;
`

const LimitInput = styled.input`
    background: none;
    outline: none;
    border: none;
    font-size: 1.3em;
    width: 100px;
    font-weight: 600;
    
    &:focus {
        background: none;
        border: none;
        border-bottom: 4px solid #d9d9d9;
    }
`

const icons = {
    'Accomodation': faBed,
    'Travel': faPlane,
    'Entertainment': faFilm,
    'Food': faBurger,
    'Shopping': faBagShopping,
    'Transportation': faBus,
    'Other': faTag,
    'Total': faCoins
}


function BudgetBlock(props) {
    const [trip, setTrip] = useState(props.trip);
    const [item, setItem] = useState(props.item);
    const [limit, setLimit] = useState(0);
    const [accepetedOver, setAcceptedOver] = useState(false);

    useEffect(() => {
        console.log(props);
        setTrip(props.trip);
        console.log(props.item);
        setItem(props.item);

        setLimit(props.item.limit);
        
    }, [props.trip, props.item])

    function calcTotal() {
        var total = 0;
        Object.keys(item.content).forEach(function(c) {
            total += item.content[c];
        });

        console.log(total)
        return total;
    }

    function handleChange(e) {
        const name = e.target.getAttribute('name');
        const value = e.target.value;
        const prevTotal = calcTotal();
      
        if (/^\$\d*$/.test(value)) {
            console.log('targert')
            console.log(e.target.getAttribute('name'));
            console.log(item.content);
            var newVal = parseInt(e.target.value.substring(1))
            if (!newVal) {
                newVal = 0;
            }

            if (newVal <= 9999) {
                setItem(prevState => ({
                    ...prevState,
                    content: {
                      ...prevState.content,
                      [e.target.getAttribute('name')]: newVal
                    }
                }));
    
                // Warning if user is over budget
                if (!accepetedOver) {
                    console.log('okok')
                    var total = 0;
                    Object.keys(item.content).forEach(function(c) {
                        if (c !== e.target.getAttribute('name')) {
                            total += item.content[c];
                        }
                    });
    
                    total += newVal;
                    if (total > limit && total > prevTotal) {
                        setAcceptedOver(true);
                    }
                }
            }

        }
    }

    function handleLimitChange(e) {
        const value = e.target.value;
      
        if (/^\$\d*$/.test(value)) {
            var newVal = parseInt(e.target.value.substring(1));
            if (!newVal) {
                newVal = 0;
            }
            if (newVal <= 999999) {
                setLimit(newVal)
            }
        }
    }

    async function limitSave(e) {
        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef);
        var currentTrip = docSnap.data();
        var newBlocks = [];
        var newLink;
        var newContent = [];
        
        for (let i = 0; i < currentTrip.blocks.length; i++) {
            console.log(item.created)
            if (currentTrip.blocks[i].created !== item.created) {
                newBlocks.push(currentTrip.blocks[i]);
            } else {
                currentTrip.blocks[i].limit = limit;
                newBlocks.push(currentTrip.blocks[i])
            }
        }

        await updateDoc(tripRef, {blocks: currentTrip.blocks}).catch((error) => console.log(error.message));
    }
    
    async function budgetItemSave(e, category) {
        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef);
        var currentTrip = docSnap.data();
        var newBlocks = [];
        var newLink;
        var newContent = [];
        
        for (let i = 0; i < currentTrip.blocks.length; i++) {
            console.log(item.created)
            if (currentTrip.blocks[i].created !== item.created) {
                newBlocks.push(currentTrip.blocks[i]);
            } else {
                currentTrip.blocks[i].content[category] = item.content[category]
                newBlocks.push(currentTrip.blocks[i])
            }
        }

        await updateDoc(tripRef, {blocks: currentTrip.blocks}).catch((error) => console.log(error.message));
    }


    return (
        <BlockContainer>
            <Limit>
                <LimitTitle>Spending limit: </LimitTitle>
                <LimitInput onBlur={limitSave} onChange={handleLimitChange} value={`$${limit}`} type='text'/>
                <Progress total={limit} current={calcTotal()}/>
            </Limit>
            { typeof item.content === 'object' && item.content !== null ?
                <Categories>
                    {
                        Object.keys(item.content).map((category, index) => {
                            console.log(item.content[category])
                            return (
                                <Category key={`budget-${index}`}>
                                    <CategoryIcon icon={icons[category]}/>
                                    <CategoryTitle>{category}</CategoryTitle>
                                    <CategoryInput onBlur={(e) => budgetItemSave(e, category)} autoComplete="off" value={`$${item.content[category]}`} name={category} onChange={handleChange} placeholder='$0' type="text" />
                                </Category>
                            )
                        })
                    }
                    <Category>
                        <CategoryIcon icon={icons['Total']}/>
                        <CategoryTitle>Total</CategoryTitle>
                        <TotalAmount>${calcTotal()}</TotalAmount>
                    </Category>
                </Categories>
            :
                <></>
            }
        </BlockContainer>
    );
}

export default BudgetBlock;

------------------------------
Title of LinkBlock.js:
No Title Found
import React, { useState, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus, faLink, faPencil, faTrash } from '@fortawesome/free-solid-svg-icons';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../../firebase';

const BlockContainer = styled.div`
`

const NewLink = styled.button`
    border: none;
    background: none;
    margin-top: 10px;
    text-align: left;
    font-family: "Sen", sans-serif;
    color: #505050;
    transition: 0.1s all ease-in-out;

    &:hover {
        color: #000;
    }
`

const Items = styled.div`
    display: flex;
    flex-direction: column;
    width: 90%;
    margin-top: 10px;
`

const Item = styled.div`
    margin: 5px 0px;
    background: none;
    border-radius: 5px;
    padding: 5px 5px;
    border: 2px solid transparent;
    transition: 0.1s ease-in all;
    display: flex;
    flex-direction: row;
    align-items: center;

    /* -webkit-box-shadow: 5px 5px 15px -4px rgba(0,0,0,0.21); 
    box-shadow: 5px 5px 15px -4px rgba(0,0,0,0.21); */

    &:hover {
        border-color: #C6C6C6;

        .icons {
            display: inline-flex;
            flex-direction: row;
        }
    }
`

const Link = styled.a`
    text-decoration: none;
    font-style: italic;
    color: #1746A2;
`

const ItemIcons = styled.div`
    border: 1px gold;
    display: none;
    margin-left: auto;
    margin-right: 5px;

    & * {
        margin: 0px 5px;
    }
`

const NewLinkForm = styled.form`
    display: flex;
    flex-direction: column;
    width: 90%;
    margin: 10px 0px;
    font-family: "Sen", sans-serif;

    & input {
        background: none;
        border: none;
        border-bottom: 1.5px solid #686868;
        margin: 7px 0px;
        transition: 0.1s ease all;
    }

    & input:focus {
        outline: none;
        border-color: #081736;
    }
`

const LabelInput = styled.input`

`

const LinkInput = styled.input`

`

const SaveLink = styled.button`
    margin-right: 2.5px;
    background-color: #1746A2;
    color: #fff;

`

const CancelLink = styled.button`
    margin-left: 2.5px;
    background-color: #5A5A5A;
    color: #fff;
`

const Buttons = styled.div`
    display: flex;
    flex-direction: row;
    padding-top: 3px;
    transition: 0.1s ease-in all;
    width: 100%;

    & * {
        width: 50%;
        border-radius: 5px;
        border: none;
        font-family: "Sen", sans-serif;
    }
`

function addHttpsToUrl(url) {
    if (!/^https?:\/\//i.test(url)) {
      url = "https://" + url;
    }
    return url;
  }
  


function LinkBlock(props) {
    const [trip, setTrip] = useState(props.trip)
    const [item, setItem] = useState(props.item)
    const [ makingNew, setMakingNew ] = useState(false);
    const [ labelInput, setLabelInput ] = useState('');
    const [ linkInput, setLinkInput ] = useState('');
    const [ openNew, setOpenNew ] = useState(false);

    useEffect(() => {
        console.log(props);
        setTrip(props.trip);
        console.log(props.item);
        setItem(props.item);
        
    }, [props.trip, props.item])

    async function newLink(e) {
        e.preventDefault();

        if (labelInput === '' || linkInput === '') {
            alert('Please enter both the label and link')
        } else {
            const tripRef = doc(db, "trips", props.id);
            const docSnap = await getDoc(tripRef);
            var currentTrip = docSnap.data();
            var newBlocks = new Array();
            
            for (let i = 0; i < currentTrip.blocks.length; i++) {
                if (currentTrip.blocks[i].created !== item.created) {
                    newBlocks.push(currentTrip.blocks[i])
                } else {
                    newBlocks.push({
                        type: item.type,
                        title: item.title,
                        content: [...item.content, {
                            label: labelInput,
                            link: addHttpsToUrl(linkInput)
                        }],
                        created: item.created
                    })
                }
            }
            
            await updateDoc(tripRef, { blocks: newBlocks }).catch((error) => console.log(error.message));
    
    
    
            setItem({
                type: item.type,
                title: item.title,
                content: [...item.content, {
                    label: labelInput,
                    link: addHttpsToUrl(linkInput)
                }],
                created: item.created
            })
            
            setLabelInput('');
            setLinkInput('');
            setOpenNew(false);
        }
    }

    function cancelLink(e) {
        e.preventDefault();
        setLabelInput('');
        setLinkInput('');
        setOpenNew(false);
    }

    async function handleDelete(created_id, title) {
        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef);
        var currentTrip = docSnap.data();
        var newBlocks = [];
        var newLink;
        var newContent = [];
        
        for (let i = 0; i < currentTrip.blocks.length; i++) {
            console.log(created_id)
            if (currentTrip.blocks[i].created !== created_id) {
                newBlocks.push(currentTrip.blocks[i])
            } else {
                newContent = []
                newLink = currentTrip.blocks[i];
                console.log(newLink);
                // console.log(title)
                for (let n = 0; n < newLink.content.length; n++) {
                    console.log(newLink.content[n])
                    if (newLink.content[n].label !== title) {
                        newContent.push(newLink.content[n])
                    }
                }
                currentTrip.blocks[i].content = newContent
                // newBlocks.push(currentTrip.blocks[i])
                // newBlocks.push(newLink);
                // newLink.content = newBlocks;
                // newBlocks.push(newLink);
            }
        }
        console.log(newContent)

        console.log(newBlocks)

        console.log(currentTrip)
        
        await updateDoc(tripRef, {blocks: currentTrip.blocks}).catch((error) => console.log(error.message));

        setItem({
            type: item.type,
            title: item.title,
            content: newContent,
            created: item.created
        })
    }

    return (
        <BlockContainer>
            { Array.isArray(item.content) ?
                <Items>
                    {
                        item.content.map((i, index) => {
                            return(
                                <Item key={index}>
                                    <Link target="_blank" href={i.link}>{i.label}</Link>
                                    {/* <ItemIcons className='icons'><FontAwesomeIcon onClick={() => openEdit(item, index)} icon={faPencil}/><FontAwesomeIcon icon={faTrash}/></ItemIcons> */}
                                    <ItemIcons className='icons'><FontAwesomeIcon onClick={() => handleDelete(item.created, i.label)} icon={faTrash}/></ItemIcons>
                                </Item>
                            )
                        })
                    }
                    <NewLink onClick={() => setOpenNew(!openNew)}><FontAwesomeIcon icon={faPlus} /> Add link</NewLink>
                </Items>
            :
                <></>
            }
            {
                openNew ? 
                    <NewLinkForm>
                        <LabelInput type="text" value={labelInput} onChange={(e) => setLabelInput(e.target.value)} placeholder="Label" />
                        <LinkInput type="email" value={linkInput} onChange={(e) => setLinkInput(e.target.value)} placeholder="Link address (ex. https://www.google.com/)" />
                        <Buttons className='note-buttons'>
                            <SaveLink type="submit" onClick={newLink}>Save</SaveLink>
                            <CancelLink onClick={cancelLink}>Cancel</CancelLink>
                        </Buttons>
                    </NewLinkForm>
                :
                    <></>
            }
        </BlockContainer>
    );
}

export default LinkBlock;

------------------------------
Title of NoteBlock.js:
No Title Found
import React, { useState, useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus } from '@fortawesome/free-solid-svg-icons';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../../firebase';

const BlockContainer = styled.div`
    height: 160px;
`

const NoteArea = styled.textarea`
    background-color: #F4F4F4;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 10px;
    font-size: 16px;
    resize: none;
    width: 90%;
    height: 140px;
    margin-top: 7px;
    font-family: "Roboto", sans-serif;

    &:focus {
        outline: 2px solid #666;
        border: none;
        height: 110px;

        & + div {
            display: flex;
            flex-direction: row;
            opacity: 1;
        }
    }
`

const SaveNotes = styled.button`
    margin-right: 2.5px;
    background-color: #1746A2;
    color: #fff;
`

const CancelNotes = styled.button`
    margin-left: 2.5px;
    background-color: #5A5A5A;
    color: #fff;
`

const Buttons = styled.div`
    display: none;
    opacity: 0;
    margin-top: 3px;
    transition: 0.1s ease-in all;
    width: calc(90% + 2px);

    & * {
        width: 100%;
        border-radius: 5px;
        border: none;
        font-family: "Sen", sans-serif;
    }
`


function NoteBlock(props) {
    const [trip, setTrip] = useState(props.trip);
    const [item, setItem] = useState(props.item);
    const [ notes, setNotes ] = useState('');

    useEffect(() => {
        console.log(props);
        console.log('IM here')
        setTrip(props.trip);
        setItem(props.item);
        setNotes(props.item.content);
        
    }, [props.trip, props.item])

    function handleChange(e) {
        setNotes(e.target.value);
    }
    
    async function handleSave() {
        console.log('Saving note');

        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef);
        var currentTrip = docSnap.data();
        var newBlocks = new Array();
        
        for (let i = 0; i < currentTrip.blocks.length; i++) {
            if (currentTrip.blocks[i].created !== item.created) {
                newBlocks.push(currentTrip.blocks[i])
            } else {
                newBlocks.push({
                    type: item.type,
                    title: item.title,
                    content: notes,
                    created: item.created
                })
            }
        }
        
        await updateDoc(tripRef, { blocks: newBlocks }).catch((error) => console.log(error.message));
    }


    return (
        <BlockContainer>
            <NoteArea onChange={handleChange} onBlur={() => handleSave()} value={notes} placeholder='Write some notes here ;)'/>
            <Buttons className='note-buttons'>
                <SaveNotes>Save</SaveNotes>
                {/* <CancelNotes onClick={() => { console.log("button clicked");}}>Cancel</CancelNotes> */}
            </Buttons>
        </BlockContainer>
    );
}

export default NoteBlock;

------------------------------
Title of Block.js:
No Title Found
import React, { useEffect, useRef, useState } from 'react';
import NoteBlock from './NoteBlock';
import styled from 'styled-components';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faDollarSign, faLink, faTrash } from '@fortawesome/free-solid-svg-icons';
import { faNoteSticky } from '@fortawesome/free-regular-svg-icons';
import LinkBlock from './LinkBlock';
import BudgetBlock from './BudgetBlock';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../../../firebase';



const BlockContainer = styled.div`
    width: 100%;
    padding: 15px 10px 10px 10px;
    position: relative;

    display: ${props => props.display || "block"};

    & .item-container{
        display: ${props => props.display || "block"};
        background-color: 'red' !important;
    }
`

const DeleteBlock = styled.button`
    border: none;
    background: none;
    outline: none;
    color: #B0B0B0;
    margin: 10px;
    position: absolute;
    top: 5px;
    right: 5px;
    transition: 0.1s opacity ease-in;

    &:hover {
        color: #081736;
    }
`

const BlockTitle = styled.h1`
    margin-left: 10px;
    font-family: "Sen", sans-serif;
    width: auto;
    font-weight: 600;
    font-size: 1.3em;
    color: #081736;
    background: none;
    border: none;
    border-bottom: 3px solid transparent;
    padding: 5px 5px 3px 0px;
    display: inline;
    /* cursor: text; */
    transition: 0.1s all ease-in;

    /* &:hover {
        border-color: #D6D6D6;
    }

    &:focus {
        outline: none;
        border-color: #D6D6D6;
    } */
`


const Block = (props) => {
    const [ blocks, setBlocks ] = useState(
        {
            'note': <NoteBlock item={props.item}/>,
            'links': <LinkBlock item={props.item}/>,
            'budget': <BudgetBlock item={props.item}/>
        }
    )

    const [display, setDisplay] = useState('block');
    const [trip, setTrip] = useState(props.trip);

    const icons = {
        'note': faNoteSticky,
        'links': faLink,
        'budget': faDollarSign
    }

    useEffect(() => {
        console.log(props)
        setBlocks(
            {
                'note': <NoteBlock id={props.id} trip={trip} item={props.item}/>,
                'links': <LinkBlock id={props.id} trip={trip} item={props.item}/>,
                'budget': <BudgetBlock id={props.id} trip={trip} item={props.item}/>
            }
        )
    }, [props.item])

    useEffect(() => {
        setTrip(props.trip)
    }, [props.trip])

    function handleDelete(e) {
        deleteBlock()
    }

    async function deleteBlock() {
        const tripRef = doc(db, "trips", props.id);
        const docSnap = await getDoc(tripRef);

        if (docSnap.exists()) {
            console.log("Document data:", docSnap.data());
            var tripResponse = docSnap.data();
            console.log('deleteblock')
            console.log(tripResponse.blocks.length);

            const blockIndex = tripResponse.blocks.findIndex(b => b.created === props.item.created);

            // Create a new array without the list at the specified index
            var updatedBlocks = [...tripResponse.blocks];
            updatedBlocks.splice(blockIndex, 1);

            // Update the document in Firestore with the new array of lists
            await updateDoc(tripRef, { blocks: updatedBlocks }).then(() => {
                props.addToHidden(props.item.created)
            }).catch((error) => console.log(error.message));
        } else {
            // docSnap.data() will be undefined in this case
            console.log("No such document!");
        }          
    }

    return (
        <BlockContainer display={display}>
            {props.item.content !== null ?
            <>
                <FontAwesomeIcon icon={icons[props.item.type]} />
                <BlockTitle>{props.item.title}</BlockTitle>
                <DeleteBlock onClick={handleDelete}>
                    <FontAwesomeIcon icon={faTrash}/>
                </DeleteBlock>
                {blocks[props.item.type]}
            </>
            :
            <></>
            }
        </BlockContainer>
    );
};

export default Block;

------------------------------
Title of BudgetProgress.js:
No Title Found
import styled, { keyframes } from "styled-components";

const ProgressBar = styled.div`
  width: 100%;
  height: 16px;
  border-radius: 100px;
  background-color: lightgray;
  position: relative;
  margin: 10px 0px;
`;

const fillAnimation = (fillPercentage) => keyframes`
  0% {
    width: 0%;
  }
  100% {
    width: ${Math.min(fillPercentage, 100)}%;
  }
`;

const Filling = styled.div`
  height: 100%;
  border-radius: 100px;
  background-color: ${(props) => (props.error ? "red" : "limegreen")};
  width: ${(props) => (props.current > props.total ? "100%" : props.fillPercentage + "%")};
  animation: ${(props) => fillAnimation(props.fillPercentage)} 0.7s ease-in-out;
`;

const Progress = ({ total, current }) => {
  const fillPercentage = total > 0 ? (current / total) * 100 : 0;
  const error = current > total;

  return (
    <ProgressBar>
      <Filling fillPercentage={fillPercentage} error={error} total={total} current={current} />
    </ProgressBar>
  );
};

export default Progress;

------------------------------
Title of ItemTypes.js:
No Title Found
export const ItemTypes = {
    BLOCK: 'block'
};
  
------------------------------
Title of LoginPage.js:
No Title Found
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { Link, useNavigate } from 'react-router-dom';
import logo from './../images/logo1.svg';
import { auth, logInWithEmailAndPassword, signInWithGoogle } from "../firebase";
import { useAuthState } from "react-firebase-hooks/auth";


const LoginPageContainer = styled.div`
    height: 100vh;
    display: flex;
    align-items: center;
`

const VoltaLogo = styled.img`
    height: 50px;
    margin-bottom: 25px;
`

const GoogleButton = styled.button`
    margin-top: 25px;
    background: none;
    text-transform: uppercase;
    font-family: "Sen", "sans-serif";
    display: flex;
    align-items: center;
    justify-content: space-evenly;
    width: 100%;

    height: 50px;
    border: 1px solid black;
    border-radius: 100px;
    padding: 15px;
    transition: 0.1s ease-in all;

    &:hover {
        border: 3px solid black;
    }
`

const GoogleLogo = styled.i`
    font-size: 1.8rem;
`

function LoginPage() {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [user, loading, error] = useAuthState(auth);
    const navigate = useNavigate();
    
    useEffect(() => {
        if (loading) {
          // maybe trigger a loading screen
          return;
        }
        if (user) {
            console.log("Logged in")
            navigate("/trips")
        };
      }, [user, loading]);
    
      function handleClick(e) {
        e.preventDefault();
        signInWithGoogle();
      }

    return (
        <LoginPageContainer>
            <main className="form-signin w-100 m-auto">
                <form>
                    <Link to="/"><VoltaLogo clasName="mb-4" src={logo} alt="Volta"/></Link>
                    {/* <div className="form-floating">
                        <input required onChange={(e) => setEmail(e.target.value)} value={email} type="email" className="form-control" id="floatingInput" placeholder="name@example.com"/>
                        <label for="floatingInput">Email address</label>
                    </div>
                    <div className="form-floating">
                        <input required onChange={(e) => setPassword(e.target.value)} value={password} type="password" className="form-control" id="floatingPassword" placeholder="Password"/>
                        <label for="floatingPassword">Password</label>
                    </div>
                    <button onClick={() => logInWithEmailAndPassword(email, password)} style={{backgroundColor: "#1746A2", border: "none", fontFamily: '"Sen", "sans-serif"', textTransform: "uppercase"}} className="w-100 btn btn-lg btn-primary" type="submit">Sign in</button> */}

                    <GoogleButton onClick={handleClick}><GoogleLogo className='fa fa-brands fa-google'></GoogleLogo><span> Sign in with Google</span></GoogleButton>

                    {/* <p className="mt-5 mb-3 text-muted">&copy; 2022</p> */}
                </form>
            </main>
        </LoginPageContainer>
    );
}

export default LoginPage;

------------------------------
Title of TripsData.js:
No Title Found
import React from 'react';
import ReactDOM from 'react-dom';

export let TripsData = [
    {
        id: "germany",
        title: "Germany",
        place_code: "DE",
        emoji: "🇩🇪",
        date: {
            start: new Date("July 3, 2023"),
            end: new Date("July 21, 2023")
        },
        image: "https://images.unsplash.com/photo-1551290470-554bf3a4fa80?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1548&q=80",
        members: [
            {
                username: "Ju",
                img: "https://images.unsplash.com/photo-1534184241306-2d7eb0ddbbde?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1180&q=80"
            },
            {
                username: "Nick",
                img: "https://images.unsplash.com/photo-1517849845537-4d257902454a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"
            },
            {
                username: "José",
                img: "https://images.unsplash.com/photo-1485871981521-5b1fd3805eee?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
            }
        ],
        checklist: [
            {
                title: "Buy plane tickets",
                notes: "google flights option",
                status: "completed",
                assigned: {
                    username: "Nick",
                    img: "https://images.unsplash.com/photo-1517849845537-4d257902454a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"
                }
            },
            {
                title: "Make restaurant reservations",
                notes: "",
                status: "to-do",
                assigned: {
                    username: "José",
                    img: "https://images.unsplash.com/photo-1485871981521-5b1fd3805eee?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
                }
            }
        ],
        lists: [
            {
                title: "Restaurants",
                id: "1",
                icon: "restaurant",
                emoji: "🍔",
                img: "https://images.unsplash.com/photo-1555939594-58d7cb561ad1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80",
                items: [
                    {
                        title: "Marco Martini Restaurant",
                        address: "Boulevard 123",
                        description: "Marco Martini defines cuisine in three words: eyes, stomach, head – it is memories of flavours from bygone days that provide the impetus for his own creations.",
                        position: {lat: '41.880549484164426', lng: '12.48471773530235'},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5",
                        img: "https://lh3.googleusercontent.com/places/AJQcZqLPPOoDIzcOnKjKFKZ_d-X6Fp8cxmzdgWsU1UKpyJBGsGVOW-IT0eFAT2jolRxAjsdolji1yM89f-pcPVPYoMlyBjEtj55N0RE=s1600-w550-h550",
                        notes: ""
                    },
                    {
                        title: "Trattoria Pennestri",
                        address: "Boulevard 123",
                        description: "You'll feel immediately at ease in this restaurant, which has the warm, simple atmosphere of a typical trattoria.",
                        position: {lat: '41.873364', lng: '12.479696'},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5",
                        img: "https://lh3.googleusercontent.com/p/AF1QipMkkXjwnrIIJqV4CKGd4RivSNhcd8zWnxFoKdqu=s1360-w1360-h1020",
                        notes: ""
                    },
                    {
                        title: "Green T.",
                        address: "Boulevard 123",
                        description: "Not far from the Pantheon, this original restaurant arranged over four floors serves the type of fine Chinese cuisine which has graced official banquets in China ever since the time of Chairman Mao.",
                        position: {lat: '41.897558631883264', lng: '12.479295860690605'},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5",
                        img: "https://zero-media.s3.amazonaws.com/uploads/2015/06/green-t..jpg",
                        notes: ""
                    }
                ]
            },
            {
                title: "Museums",
                id: "2",
                emoji: "🖼️",
                icon: "museum_archeological",
                address: "Boulevard 123",
                img: "https://images.unsplash.com/photo-1513038630932-13873b1a7f29?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1935&q=80",
                items: [
                    {
                        title: "Capitoline Museums",
                        address: "Boulevard 123",
                        description: "Classical Roman, Greek & Egyptian sculptures & Renaissance art in 15th-century-designed palaces.",
                        position: {lat: 41.892954758938224, lng: 12.482579155508137},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5",
                        img: null,
                        notes: "",
                    },
                    {
                        title: "Vatican Museums",
                        address: "Boulevard 123",
                        description: "Multiple galleries of classical & Renaissance art masterpieces, plus the Sistine Chapel frescoes.",
                        position: {lat: 41.906467817254324, lng: 12.453641297837967},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5",
                        img: null,
                        notes: "",
                    }
                ]
            },
            {
                title: "Hotels",
                id: "3",
                emoji: "🏨",
                icon: "hotel_0star",
                img: "https://images.unsplash.com/photo-1582719508461-905c673771fd?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1925&q=80",
                items: [
                    {
                        title: "Horti 14 Borgo Trastevere Hotel",
                        address: "Boulevard 123",
                        description: "Classical Roman, Greek & Egyptian sculptures & Renaissance art in 15th-century-designed palaces.",
                        position: {lat: 41.89397674585364, lng: 12.46309920130514},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5",
                        img: null,
                        notes: "",
                    },
                    {
                        title: "Villa Agrippina Gran Meliá",
                        address: "Boulevard 123",
                        description: "Villa Agrippina Gran Meliá - The Leading Hotels of the World is a 5-star hotel located in the center of Rome, and includes an elegant interior and well-designed guest rooms overlooking the views of the Vatican, Castel Sant'Angelo , Vicolo di Sant'Onofrio or to the hotel's garden.",
                        position: {lat: 41.8989585987013, lng: 12.461110453197874},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5",
                        img: null,
                        notes: "",
                    }
                ]
            },
            {
                title: "Coffee Shops",
                id: "4",
                emoji: "☕",
                icon: "coffee",
                img: "https://images.unsplash.com/photo-1511920170033-f8396924c348?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1887&q=80",
                items: [
                    {
                        title: "Sant’ Eustachio Il Caffè",
                        address: "Boulevard 123",
                        description: "Coffee shop famed for its home-roast beans, blended with water from an ancient aqueduct.",
                        position: {lat: 41.898289172808006, lng: 12.475423902406682},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5",
                        img: null,
                        notes: "",
                    },
                    {
                        title: "Antigua Tazza d'Oro",
                        address: "Boulevard 123",
                        description: "Villa Agrippina Gran Meliá - The Leading Hotels of the World is a 5-star hotel located in the center of Rome, and includes an elegant interior and well-designed guest rooms overlooking the views of the Vatican, Castel Sant'Angelo , Vicolo di Sant'Onofrio or to the hotel's garden.",
                        position: {lat: 41.89943532771305, lng: 12.477399974671577},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5",
                        img: null,
                        notes: "",
                    }
                ]
            }
        ],
        blocks: [
            {
              type: 'note',
              title: "Notes",
              content: 'a'
            },
            {
              type: 'links',
              title: "Resources",
              content: [
                {
                  label: "Best Munich Restaurants",
                  link: "https://www.timeout.com/munich/restaurants/best-restaurants-in-munich"
                },
                {
                  label: "Amazing Munich Hotels",
                  link: "https://www.telegraph.co.uk/travel/destinations/europe/germany/munich/hotels/"
                }
              ]
            },
            {
                type: 'budget',
                title: "Budget",
                content: {
                    'Accomodation': 350,
                    'Travel': 400,
                    'Entertainment': 190,
                    'Food': 240,
                    'Shopping': 85,
                    'Transportation': 30,
                    'Other': 100,
                }
            },
        ],
        itinerary: [
            {
                date: "21/1",
                activities: [
                    {
                        title: "Bowling",
                        description: "i love bowl"
                    },
                    {
                        title: "tenis",
                        description: "i love tenis"
                    }
                ]
            },
            {
                date: "22/1",
                activities: [
                    {
                        title: "fish",
                        description: "i love fish"
                    }
                ]
            },
            {
                date: "23/1",
                activities: [
                ]
            }
        ],
        budget: [
            {
                label: "Kempinski Hotel",
                amount: 400
            },
            {
                label: "Restaurants",
                amount: 180
            },
            {
                label: "Flights",
                amount: 350
            },
            {
                label: "Local transport",
                amount: 90
            },
            {
                label: "Rental car",
                amount: 210
            },
        ]
    },
    {
        id: "italy",
        title: "Italy",
        emoji: "🇮🇹",
        date: {
            start: new Date("July 3, 2023"),
            end: new Date("July 21, 2023")
        },
        image: "https://images.unsplash.com/photo-1523906834658-6e24ef2386f9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=766&q=80",
        members: [
            {
                username: "Ju",
                img: "https://images.unsplash.com/photo-1534184241306-2d7eb0ddbbde?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1180&q=80"
            },
            {
                username: "Nick",
                img: "https://images.unsplash.com/photo-1517849845537-4d257902454a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"
            },
            {
                username: "José",
                img: "https://images.unsplash.com/photo-1485871981521-5b1fd3805eee?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
            }
        ],
        checklist: [
            {
                title: "Buy plane tickets",
                notes: "google flights option",
                status: "completed"
            },
            {
                title: "Make restaurant reservations",
                notes: "",
                status: "to-do"
            }
        ],
        lists: [
            {
                title: "Restaurants",
                icon: "restaurant",
                img: "https://images.unsplash.com/photo-1555939594-58d7cb561ad1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80",
                items: [
                    {
                        title: "Marco Martini Restaurant",
                        description: "Marco Martini defines cuisine in three words: eyes, stomach, head – it is memories of flavours from bygone days that provide the impetus for his own creations.",
                        position: {lat: 41.880549484164426, lng: 12.48471773530235},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5"
                    },
                    {
                        title: "Trattoria Pennestri",
                        description: "You'll feel immediately at ease in this restaurant, which has the warm, simple atmosphere of a typical trattoria.",
                        position: {lat: 41.873364, lng: 12.479696},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5"
                    },
                    {
                        title: "Green T.",
                        description: "Not far from the Pantheon, this original restaurant arranged over four floors serves the type of fine Chinese cuisine which has graced official banquets in China ever since the time of Chairman Mao.",
                        position: {lat: 41.897558631883264, lng: 12.479295860690605},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5"
                    }
                ]
            },
            {
                title: "Museums",
                icon: "museum_archeological",
                img: "https://images.unsplash.com/photo-1513038630932-13873b1a7f29?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1935&q=80",
                items: [
                    {
                        title: "Capitoline Museums",
                        description: "Classical Roman, Greek & Egyptian sculptures & Renaissance art in 15th-century-designed palaces.",
                        position: {lat: 41.892954758938224, lng: 12.482579155508137},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5"
                    },
                    {
                        title: "Vatican Museums",
                        description: "Multiple galleries of classical & Renaissance art masterpieces, plus the Sistine Chapel frescoes.",
                        position: {lat: 41.906467817254324, lng: 12.453641297837967},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5"
                    }
                ]
            },
            {
                title: "Hotels",
                icon: "hotel_0star",
                img: "https://images.unsplash.com/photo-1582719508461-905c673771fd?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1925&q=80",
                items: [
                    {
                        title: "Horti 14 Borgo Trastevere Hotel",
                        description: "Classical Roman, Greek & Egyptian sculptures & Renaissance art in 15th-century-designed palaces.",
                        position: {lat: 41.89397674585364, lng: 12.46309920130514},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5"
                    },
                    {
                        title: "Villa Agrippina Gran Meliá",
                        description: "Villa Agrippina Gran Meliá - The Leading Hotels of the World is a 5-star hotel located in the center of Rome, and includes an elegant interior and well-designed guest rooms overlooking the views of the Vatican, Castel Sant'Angelo , Vicolo di Sant'Onofrio or to the hotel's garden.",
                        position: {lat: 41.8989585987013, lng: 12.461110453197874},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5"
                    }
                ]
            },
            {
                title: "Coffee Shops",
                icon: "coffee",
                img: "https://images.unsplash.com/photo-1511920170033-f8396924c348?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1887&q=80",
                items: [
                    {
                        title: "Sant’ Eustachio Il Caffè",
                        description: "Coffee shop famed for its home-roast beans, blended with water from an ancient aqueduct.",
                        position: {lat: 41.898289172808006, lng: 12.475423902406682},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5"
                    },
                    {
                        title: "Antigua Tazza d'Oro",
                        description: "Villa Agrippina Gran Meliá - The Leading Hotels of the World is a 5-star hotel located in the center of Rome, and includes an elegant interior and well-designed guest rooms overlooking the views of the Vatican, Castel Sant'Angelo , Vicolo di Sant'Onofrio or to the hotel's garden.",
                        position: {lat: 41.89943532771305, lng: 12.477399974671577},
                        link: "https://goo.gl/maps/2uifYqkZAnRF1pps5"
                    }
                ]
            }
        ]
    },
    {
        id: "spain",
        title: "Spain",
        emoji: "🇪🇸",
        date: {
            start: new Date("July 3, 2023"),
            end: new Date("July 21, 2023")
        },
        image: "https://images.unsplash.com/photo-1593368858664-a7fe556ab936?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1674&q=80",
        members: [
            {
                username: "Ju",
                img: "https://images.unsplash.com/photo-1534184241306-2d7eb0ddbbde?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1180&q=80"
            }
        ],
        checklist: [
            {
                title: "Buy plane tickets",
                notes: "google flights option",
                status: "completed"
            },
            {
                title: "Make restaurant reservations",
                notes: "",
                status: "to-do"
            }
        ]
    },
    {
        id: "brazil",
        title: "Brazil",
        emoji: "🇧🇷",
        date: {
            start: new Date("July 3, 2023"),
            end: new Date("July 21, 2023")
        },
        image: "https://images.unsplash.com/photo-1551312183-66bca7944e4e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2662&q=80",
        members: [
            {
                username: "Ju",
                img: "https://images.unsplash.com/photo-1534184241306-2d7eb0ddbbde?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1180&q=80"
            },
            {
                username: "Nick",
                img: "https://images.unsplash.com/photo-1517849845537-4d257902454a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"
            },
            {
                username: "José",
                img: "https://images.unsplash.com/photo-1485871981521-5b1fd3805eee?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
            }
        ],
        checklist: [
            {
                title: "Buy plane tickets",
                notes: "google flights option",
                status: "completed"
            },
            {
                title: "Talk to family about hotel and also arrange visa appointment",
                notes: "google flights option",
                status: "completed"
            },
            {
                title: "Pick out second hotel for the third and sixthh nightPick out second hotel for the third and sixthh nightPick out second hotel for the third and sixthh nightPick out second hotel for the third and sixthh night",
                notes: "google flights option",
                status: "to-do"
            },
            {
                title: "Make restaurant reservations",
                notes: "",
                status: "to-do"
            }
        ]
    },
    {
        id: "japan",
        title: "Japan",
        emoji: "🇯🇵",
        date: {
            start: new Date("July 3, 2023"),
            end: new Date("July 21, 2023")
        },
        image: "https://images.unsplash.com/photo-1613967193490-1d17b930c1a1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80",
        members: [
            {
                username: "Ju",
                img: "https://images.unsplash.com/photo-1534184241306-2d7eb0ddbbde?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1180&q=80"
            },
            {
                username: "Nick",
                img: "https://images.unsplash.com/photo-1517849845537-4d257902454a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"
            },
            {
                username: "José",
                img: "https://images.unsplash.com/photo-1485871981521-5b1fd3805eee?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
            }
        ],
        checklist: [
            {
                title: "Buy plane tickets",
                notes: "google flights option",
                status: "completed"
            },
            {
                title: "Make restaurant reservations",
                notes: "",
                status: "to-do"
            }
        ]
    },
    {
        id: "australia",
        title: "Australia",
        emoji: "🇦🇺",
        date: {
            start: new Date("July 3, 2023"),
            end: new Date("July 21, 2023")
        },
        image: "https://images.unsplash.com/photo-1529108190281-9a4f620bc2d8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1739&q=80",
        members: [
            {
                username: "Ju",
                img: "https://images.unsplash.com/photo-1534184241306-2d7eb0ddbbde?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1180&q=80"
            },
            {
                username: "Nick",
                img: "https://images.unsplash.com/photo-1517849845537-4d257902454a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"
            }
        ],
        checklist: [
            {
                title: "Buy plane tickets",
                notes: "google flights option",
                status: "completed",
                assigned: {
                    username: "Nick",
                    img: "https://images.unsplash.com/photo-1517849845537-4d257902454a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"
                }
            },
            {
                title: "Make restaurant reservations",
                notes: "",
                status: "to-do",
                assigned: null
            }
        ]
    },
    {
        id: "canada",
        title: "Canada",
        emoji: "🇨🇦",
        date: {
            start: new Date("July 3, 2023"),
            end: new Date("July 21, 2023")
        },
        image: "https://images.unsplash.com/photo-1501114676295-bbbcc7a12466?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80",
        members: [
            {
                username: "Ju",
                img: "https://images.unsplash.com/photo-1534184241306-2d7eb0ddbbde?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1180&q=80"
            },
            {
                username: "Nick",
                img: "https://images.unsplash.com/photo-1517849845537-4d257902454a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"
            },
            {
                username: "José",
                img: "https://images.unsplash.com/photo-1485871981521-5b1fd3805eee?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
            }
        ],
        checklist: [
            {
                title: "Buy plane tickets",
                notes: "google flights option",
                status: "completed"
            },
            {
                title: "Make restaurant reservations",
                notes: "",
                status: "to-do"
            }
        ]
    },
]
------------------------------
Title of myTrips.js:
No Title Found
import React, { useContext, useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import NavbarComponent from '../components/Navbar';
import styled from 'styled-components';
import MyTripsDashboard from '../components/Trip/myTripsDashboard';
import { TripsData } from './TripsData';
import { getTrips } from '../firebase';
import AuthProvider, { AuthContext } from '../Auth';
import { useNavigate } from 'react-router-dom';

const MyTripsPage = styled.div`
    /* background-color: #FFF7E9;
    min-height: 100vh; */
`

function MyTrips()
{

    const { currentUser } = useContext(AuthContext);
    const navigate = useNavigate();

    useEffect(() => {

        if (!currentUser) {
            navigate('/login');
        }

        console.log(currentUser);
    }, [])

    return (
        // <AuthProvider>
            <MyTripsPage>
                <NavbarComponent active='my-trips' />
                {
                    currentUser ? <MyTripsDashboard/> : <></>
                }
            </MyTripsPage>
        // </AuthProvider>
    );
}


export default MyTrips;
------------------------------
Title of Home.js:
No Title Found
import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import NavbarComponent from '../components/Navbar';
import Spline from '@splinetool/react-spline';
import { Link } from 'react-router-dom';
import EmojiImg from '../components/EmojiImg';
import SecondHero from '../components/SecondHero';
import ThirdHero from '../components/ThirdHero';
import FourthHero from '../components/FourthHero';


const HomePage = styled.div`
    
`

const HomeContainer = styled.div`
    background-color: #081736;
`

const MainHero = styled.div`
`

const ContentContainer = styled.div`
    height: calc(100vh - 81.5px);
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 100px 20px 100px 50px;

    @media (max-width: 991px) {
        height: auto;
        padding-right: 50px;
        padding-bottom: 10px;
    }
`

const ContentTitle = styled.h1`
    font-family: "Lora", serif;
    color: #fff;
`

const ContentText = styled.p`
    font-family: "Sen", sans-serif;
    color: #fff;
    margin-top: 30px;
    margin-bottom: 30px;
    font-size: 1.1em;
`

const ContentButton = styled.button`
    background: none;
    border: 1.5px solid #fff;
    color: #fff !important;
    text-decoration: none !important;
    border-radius: 10px;
    padding: 5px;
    width: 150px;
    text-transform: uppercase;
    font-family: "Sen", sans-serif;
    transition: 0.15s all ease-in;

    .button-link {
        color: #fff;
        text-decoration: none;
    }

    &:hover {
        background-color: #fff;
        .button-link {
            color: #081736;
        }
    }
`

const SplineContainer = styled.div`
    position: relative;
    height: calc(100vh - 81.5px);
    .spline {
        position: absolute;
        margin: 0;
        top: 0;
        right: 0px;
        /* width: 100%; */
        height: 100%;
        min-width: 50vw;
    }

    @media (max-width: 991px) {
        .spline {
            height: auto;
            width: 100vw;
        }
    }
`


function Home() {
  return (
    <HomePage>
        <NavbarComponent active='home' />
        <HomeContainer>
            <MainHero>
                <div className="containe">
                    <div className="row">
                        <ContentContainer className="col-lg-5 col-md-12">
                            <ContentTitle><span style={{fontSize:"1.5em"}}>⛰️</span> Trip planning at it's finest.</ContentTitle>
                            <ContentText>Planning a trip can be overwhelming and time-consuming, but it doesn't have to be. Volta makes trip planning <b>easier</b>, whether you're traveling with friends, family, or solo.</ContentText>
                            <ContentButton><Link className='button-link' to='/signup'>Sign up</Link></ContentButton>
                        </ContentContainer>
                        <SplineContainer className="col-lg-7 col-md-12">
                            <Spline className='spline' scene="https://prod.spline.design/AXqKHF8ErslZaIzT/scene.splinecode" />
                        </SplineContainer>
                    </div>
                </div>
                <div className="hide-mouse">
                    <span class="scroll-btn">
                        <span class="mouse">
                            <span>
                            </span>
                        </span>
                    </span>
                </div>
            </MainHero>
            <SecondHero id="second"/>
            {/* <FourthHero id="fourth"/> */}
            <ThirdHero id="third"/>
        </HomeContainer>
    </HomePage>
  );
}

export default Home;

------------------------------
Title of Error.js:
No Title Found
import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import NavbarComponent from '../components/Navbar';
import { Link } from 'react-router-dom';


const ErrorPage = styled.div`

`

const ErrorContainer = styled.div`
    font-family: "Lora", sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: calc(100vh - 180px);
`

const ErrorHeader = styled.h1`
    font-size: 8em;
`

const ErrorTitle = styled.h1`
    font-size: 3em;
`

const ErrorText = styled.p`
    font-family: "Sen", sans-serif;
    font-size: 1.2em;
    margin-top: 20px;
`

function Error() {
  return (
    <ErrorPage>
        <NavbarComponent active='home' />
        <ErrorContainer>
            <ErrorHeader>
                404
            </ErrorHeader>
            <ErrorTitle>
                Page not found!
            </ErrorTitle>
            <ErrorText>
                The page you're looking for doesn't exist. Go to <Link to="/">Home Page</Link>.
            </ErrorText>
        </ErrorContainer>
    </ErrorPage>
  );
}

export default Error;

------------------------------
Title of SignUpPage.js:
No Title Found
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { Link, useNavigate } from 'react-router-dom';
import logo from './../images/logo1.svg';
import { auth, logInWithEmailAndPassword, registerWithEmailAndPassword, signInWithGoogle } from "../firebase";
import { useAuthState } from "react-firebase-hooks/auth";


const LoginPageContainer = styled.div`
    height: 100vh;
    display: flex;
    align-items: center;
`

const VoltaLogo = styled.img`
    height: 50px;
    margin-bottom: 25px;
`

const GoogleButton = styled.button`
    margin-top: 25px;
    background: none;
    text-transform: uppercase;
    font-family: "Sen", "sans-serif";
    display: flex;
    align-items: center;
    justify-content: space-evenly;
    width: 100%;
    height: 50px;
    border: 1px solid black;
    border-radius: 100px;
    padding: 15px;
    transition: 0.1s ease-in all;

    &:hover {
        border: 3px solid black;
    }
`

const GoogleLogo = styled.i`
    font-size: 1.8rem;
`

function SignupPage() {
    const [name, setName] = useState("");
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [user, loading, error] = useAuthState(auth);
    const navigate = useNavigate();
    
    useEffect(() => {
        if (loading) {
          // maybe trigger a loading screen
          return;
        }
        if (user) {
            console.log("Logged in")
            navigate("/trips")
        };
      }, [user, loading]);
    
      function handleClick(e) {
        e.preventDefault();
        signInWithGoogle();
      }

    return (
        <LoginPageContainer>
            <main className="form-signin w-100 m-auto">
                <form>
                    <Link to="/"><VoltaLogo clasName="mb-4" src={logo} alt="Volta"/></Link>
                    {/* <div className="form-floating">
                        <input onChange={(e) => setName(e.target.value)} style={{borderRadius: "10px 10px 0px 0px", borderBottom: 'none'}} value={name} type="text" className="form-control" id="floatingName" placeholder="Name"/>
                        <label for="floatingInput">Name</label>
                    </div>
                    <div className="form-floating">
                        <input onChange={(e) => setEmail(e.target.value)} style={{borderRadius: "0px"}} value={email} type="email" className="form-control" id="floatingInput" placeholder="name@example.com"/>
                        <label for="floatingInput">Email address</label>
                    </div>
                    <div className="form-floating">
                        <input onChange={(e) => setPassword(e.target.value)} style={{borderRadius: "0px 0px 10px 10px"}} value={password} type="password" className="form-control" id="floatingPassword" placeholder="Password"/>
                        <label for="floatingPassword">Password</label>
                    </div>
                    <button onClick={() => registerWithEmailAndPassword(name, email, password)} style={{backgroundColor: "#1746A2", border: "none", fontFamily: '"Sen", "sans-serif"', textTransform: "uppercase"}} className="w-100 btn btn-lg btn-primary" type="submit">Sign up</button> */}

                    <GoogleButton onClick={handleClick}><GoogleLogo className='fa fa-brands fa-google'></GoogleLogo><span> Sign up with Google</span></GoogleButton>

                    {/* <p className="mt-5 mb-3 text-muted">&copy; 2022</p> */}
                </form>
            </main>
        </LoginPageContainer>
    );
}

export default SignupPage;

------------------------------
Title of BucketList.js:
No Title Found
import React, { useState } from 'react';
import ReactDOM from 'react-dom';
import NavbarComponent from '../components/Navbar';
import styled from 'styled-components';
import BucketListDashboard from '../components/bucketListDashboard';


const BucketListPage = styled.div`
    
`

function BucketList()
{
    return (
        <BucketListPage>
            <NavbarComponent active='bucket-list' />
            <BucketListDashboard />
        </BucketListPage>
    );
}


export default BucketList;
------------------------------
Title of Explore.js:
style
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import EmojiImg from '../components/EmojiImg';
import ExploreDestinations from '../components/Explore/ExploreDestinations';
import ExploreFilter from '../components/Explore/ExploreFilter';
import ExploreFilterValues from '../components/Explore/ExploreFilterValues';
import ExploreSearch from '../components/Explore/ExploreSearch';
import NavbarComponent from '../components/Navbar';
import destinations from './ExploreData';


const ExplorePage = styled.div`
  min-height: 100vh;
`

const ExplorePageContainer = styled.div`
  padding: 30px 30px 0px 30px;
  position: relative;
  height: inherit;
  /* background-color: lightblue; */
`

const ExploreHeading = styled.h1`
  font-family: 'Lora', serif;
  font-weight: 700;
  opacity: 1;
  display: inline;
  margin: 0px;
`

const HeadingContainer = styled.div`
  display: flex;
  flex-direction: row;

`

const NewTripButton = styled.button`
  font-size: 1.1rem;
  border-radius: 7px;
  padding: 7.5px 15px;
  font-family: "Sen", sans-serif;
  color: #fff;
  border: none;
  background-color: #1746A2;
  transition: all 0.2s ease;
  outline: 1px solid var(--darkBlue);
  height: 40px;
  margin-left: 50px;
  margin-top: auto;
  margin-bottom: auto;

  &:hover {
      background-color: transparent;
      color: var(--darkBlue);
  }

  &:focus {
      background-color: transparent ;
      color: var(--darkBlue);
      border: 1px solid var(--darkBlue);
  }
`

const ExploreContent = styled.div`
  display: flex;
  flex-direction: row-reverse;

  @media screen and (max-width: 1200px) {
    flex-direction: column;
  }  
`


// Filter style
const ExploreFilterContainer = styled.div`
    width: 280px;
    /* posit/ion: relative; */
    margin-top: -50px;
    margin-left: 20px;
    height: calc(100vh - 140px);
    /* background-color: tomato; */
    /* position: fixed; */
    /* right: 15px;
    bottom: 15px; */
    border-radius: 15px;
    -webkit-box-shadow: 5px 5px 12px 5px rgba(0,0,0,0.17); 
    box-shadow: 5px 5px 12px 5px rgba(0,0,0,0.17);
    font-family: 'Sen', sans-serif;
    overflow-y: scroll;
    &::-webkit-scrollbar {
      display: none;
    }

    @media screen and (max-width: 1200px) {
      margin-top: 20px;
      margin-left: 0px;
      width: 100%;
      height: auto;
    }
`

const ExploreForm = styled.form`
  padding: 0px 15px;
  @media(max-width: 1200px) {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-evenly;
    padding: 20px 0px;
    height: auto;
  }
`

const CheckboxContainer = styled.div`
  margin: 10px;
`

const SectionItems = styled.div`
  display: flex;
  flex-direction: column;
`

const ExploreCheckbox = styled.input`
    margin-right: 11px;
    transform: scale(1.4);
`

const CheckboxLabel = styled.label`

`

const SectionLabel = styled.p`
  color: #505050;
  font-size: 1em;
  text-transform: uppercase;
  font-weight: 600;
  margin-top: 15px;
`

const FiltersExpand = styled.button`
  display: none;

  @media(max-width: 991px) {
    display: block;
  }
`

const FilterSection = styled.div`
  margin: 0px 15px;
`
// End of filter style


// Function to check if set2 is subset of set1
function subset(set1, set2) {
  let isSubset = true;
  for (let item of set1) {
    if (!set2.has(item)) {
      isSubset = false;
      break;
    }
  }
  return isSubset;
}

function Explore() {

  const [ destinationsFilter, setDestinations ] = useState(destinations);
  const [filters, setFilters] = useState(ExploreFilterValues);
  const [ triggerState, setTriggerState ] = useState(false);


  useEffect(() => {
    // getting a list of all selected filters
    var selectedFilters = []
    var allFilters = Array.prototype.slice.call(document.getElementsByClassName('filter-checkbox'));
    
    allFilters.map((item, index) => {
      if (item.checked) {
        selectedFilters.push(item.value);
      }
    })

    if (selectedFilters.length == 0) {
      setDestinations(destinations)
    } else {
      var newDestinations = [];
      var filtersSet = new Set(selectedFilters)
      console.log(filtersSet)
      destinations.map((item, index) => {
        console.log(new Set(item.tags))
        if (subset(filtersSet, new Set(item.tags))) {
          newDestinations.push(item)
        }
      })

      setDestinations(newDestinations);
    }

    console.log('trigger')
  }, [triggerState])

  useEffect(() => {
    document.title = `Explore`
  }, [])

  return (
      <ExplorePage>
        <NavbarComponent active='explore' />
        <ExplorePageContainer>
          <HeadingContainer>
            <ExploreHeading>Explore <EmojiImg size="45px" emoji="🧭"/></ExploreHeading>
            {/* <NewTripButton>New Template</NewTripButton> */}
          </HeadingContainer>
          <ExploreContent>
            <ExploreFilterContainer>
              <ExploreForm>
                {
                  Object.keys(filters).map((key, index) =>  {
                    return (
                      <FilterSection key={index}>
                        <SectionLabel>{key}</SectionLabel>
                        <SectionItems>
                          {filters[key].map((filter, index2) => (
                              <CheckboxContainer key={index2}>
                                <ExploreCheckbox className='filter-checkbox' onChange={() => setTriggerState(!triggerState)} id={filter.value} type="checkbox" value={filter.value}/>
                                <CheckboxLabel><EmojiImg emoji={filter.emoji}/> {filter.title}</CheckboxLabel>
                              </CheckboxContainer>
                          ))}
                        </SectionItems>
                      </FilterSection>
                    )
                  })
                }
              </ExploreForm>
              {/* <FiltersExpand>Filters</FiltersExpand> */}
            </ExploreFilterContainer>
            <ExploreDestinations destinations={destinationsFilter}/>
          </ExploreContent>
        </ExplorePageContainer>
        
        {/* <ExploreSearch/> */}
        
        
        {/* <div className="container">
          <div className="row">
            <div className="col-lg-3"></div>
            <div className="col-lg-9"></div>
          </div>
        </div> */}
      </ExplorePage>
  );
}

export default Explore;

------------------------------
Title of ExploreData.js:
No Title Found
const destinations = [
    {
      title : "Rio de Janeiro",
      region : "Brazil",
      description : "Rio de Janeiro is a huge seaside city in Brazil, famed for its Copacabana and Ipanema beaches, 38m Christ the Redeemer statue atop Mount Corcovado and for Sugarloaf Mountain.",
      tags : ["type-beach", "type-city", "society-sightseeing", "society-museums", "society-culinary", "society-sports", "society-night", "location-america"],
      images : [
        "https://images.unsplash.com/photo-1593995863951-57c27e518295?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80",
        "https://images.unsplash.com/photo-1663467673813-169dcfc7a04e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2664&q=80",
        "https://images.unsplash.com/photo-1576547849475-57662ff255ec?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
      ]
    },
    {
      title : "Barcelona",
      region : "Spain",
      description : "Barcelona, the cosmopolitan capital of Spain’s Catalonia region, is known for its art and architecture. The fantastical Sagrada Família church and other modernist landmarks designed by Antoni Gaudí dot the city.",
      tags : ["type-beach", "type-city", "society-sightseeing", "society-museums", "society-architecture", "society-sports", "society-night", "location-europe", "society-kid"],
      images : [
        "https://images.unsplash.com/photo-1523531294919-4bcd7c65e216?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80",
        "https://images.unsplash.com/photo-1539037116277-4db20889f2d4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80",
        "https://images.unsplash.com/photo-1579282240050-352db0a14c21?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=704&q=80"
      ]
    },
    {
      title: "Toronto",
      region: "Canada",
      description: "Toronto is the capital city of the Canadian province of Ontario. It's a major Canadian city known for its iconic CN Tower, diverse neighborhoods, and cultural attractions.",
      tags: [
        "type-city",
        "society-architecture",
        "society-sightseeing",
        "society-museums",
        "society-culinary",
        "society-sports",
        "society-night",
        "location-america",
        "society-kid"
      ],
      images: [
        "https://images.unsplash.com/photo-1507992781348-310259076fe0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2670&q=80",
        "https://images.unsplash.com/photo-1517090504586-fde19ea6066f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80",
        "https://images.unsplash.com/photo-1542704792-e30dac463c90?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
      ]
    },
    {
      title: "Tokyo",
      region: "Japan",
      description: "Tokyo is the capital of Japan, and is known for its bright lights, bustling streets, and modern architecture. From the Imperial Palace to the iconic Tokyo Tower, there is plenty to see and do in this vibrant city.",
      tags: ["type-city", "society-sightseeing", "society-museums", "society-culinary", "society-night", "location-asiaoceania"],
      images: [
        "https://images.unsplash.com/photo-1570521462033-3015e76e7432?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1771&q=80",
        "https://images.unsplash.com/photo-1570543922355-c64a19ab2bc7?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80",
        "https://images.unsplash.com/photo-1634110555127-12685786b487?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
      ]
    },
    {
      title: "Cape Town",
      region: "South Africa",
      description: "Cape Town is a coastal city in South Africa, known for its stunning natural scenery, including Table Mountain and the nearby Cape of Good Hope. Visitors can also enjoy the city's beaches, vineyards, and vibrant cultural scene.",
      tags: ["type-beach", "type-city", "type-nature", "society-sightseeing", "society-museums", "society-culinary", "location-africa"],
      images: [
        "https://images.unsplash.com/photo-1580060839134-75a5edca2e99?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1771&q=80",
        "https://images.unsplash.com/photo-1576485290814-1c72aa4bbb8e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80",
        "https://images.unsplash.com/photo-1599407384144-77deae48a47a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80"
      ]
    },
    {
      title: "Sydney",
      region: "Australia",
      description: "Sydney is a bustling city on Australia's east coast, known for its iconic landmarks such as the Sydney Opera House and Harbour Bridge. Visitors can also enjoy the city's beaches, parks, and lively arts scene.",
      tags: ["type-beach", "type-city", "society-sightseeing", "society-museums", "society-culinary", "society-night", "location-asiaoceania"],
      images: [
        "https://images.unsplash.com/photo-1506973035872-a4ec16b8e8d9?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80",
        "https://images.unsplash.com/photo-1530276371031-2511efff9d5a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80",
        "https://images.unsplash.com/photo-1559651868-066bcc28f358?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80"
      ]
    },
    {
      title: "Venice",
      region: "Italy",
      description: "Venice is a picturesque city in northeastern Italy, known for its canals, historic architecture, and artistic heritage. Visitors can take a gondola ride, visit the famous St. Mark's Basilica, and enjoy the city's many museums and galleries.",
      tags: ["type-city", "society-architecture", "society-sightseeing", "society-museums", "society-culinary", "location-europe"],
      images: [
        "https://images.unsplash.com/photo-1523906834658-6e24ef2386f9?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=766&q=80",
        "https://images.unsplash.com/photo-1514890547357-a9ee288728e0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80",
        "https://images.unsplash.com/photo-1553342385-111fd6bc6ab3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"
      ]
    },
    {
      title: "Marrakech",
      region: "Morocco",
      description: "Marrakech is a vibrant city in Morocco, known for its bustling markets, historic architecture, and lively cultural scene. Visitors can explore the medina, visit the stunning Bahia Palace, and sample delicious Moroccan cuisine.",
      tags: ["type-city", "society-architecture", "society-sightseeing", "society-culinary", "society-night", "location-africa"],
      images: [
        "https://images.unsplash.com/photo-1580746738099-1cb74f972feb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80",
        "https://images.unsplash.com/photo-1587974928442-77dc3e0dba72?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1848&q=80",
        "https://images.unsplash.com/photo-1597212618440-806262de4f6b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1773&q=80"
      ]
    },
    {
        title: "Seychelles",
        region: "East Africa",
        description: "Seychelles is an archipelago of 115 islands in the Indian Ocean, known for its stunning beaches, coral reefs, and nature reserves. Visitors can go snorkeling, hiking, or simply relax on the beach.",
        tags: ["type-beach", "type-nature", "location-africa", "society-culinary"],
        images: ["https://images.unsplash.com/photo-1553829176-61484f865ac3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2748&q=80", "https://images.unsplash.com/photo-1595773382291-06d1b6cbc43b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OHx8U2V5Y2hlbGxlc3xlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1593427264193-1d7bba99d577?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTV8fFNleWNoZWxsZXN8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Bali",
        region: "Indonesia",
        description: "Bali is a popular destination in Indonesia, known for its beautiful beaches, rice paddies, and Hindu temples. Visitors can enjoy water sports, cultural performances, or simply relax in a luxurious resort.",
        tags: ["type-beach", "type-nature", "society-architecture", "location-asiaoceania"],
        images: ["https://images.unsplash.com/photo-1537996194471-e657df975ab4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8QmFsaXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1577717903315-1691ae25ab3f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8QmFsaXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1555400038-63f5ba517a47?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8QmFsaXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Lapland",
        region: "Finland",
        description: "Lapland is a region in northern Finland, known for its snowy landscapes, the Northern Lights, and Santa Claus. Visitors can go skiing, snowmobiling, or visit reindeer farms and ice hotels.",
        tags: ["type-winter", "type-nature", "location-europe", "society-sports"],
        images: ["https://images.unsplash.com/photo-1594279761639-cb1787798b52?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8TGFwbGFuZHxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1568607689150-17e625c1586e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8TGFwbGFuZHxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1536999606895-b6c1971676c4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTB8fExhcGxhbmR8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Cartagena",
        region: "Colombia",
        description: "Cartagena is a historic city on the Caribbean coast of Colombia, known for its colorful colonial architecture, vibrant street life, and delicious cuisine. Visitors can explore the Old Town, visit museums and galleries, or simply enjoy the tropical climate.",
        tags: ["type-city", "society-architecture", "society-sightseeing", "society-culinary", "location-america"],
        images: ["https://images.unsplash.com/photo-1534943441045-1009d7cb0bb9?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8Q2FydGFnZW5hfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1566948758347-4f2c98c2db40?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTh8fENhcnRhZ2VuYXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1536308037887-165852797016?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8Q2FydGFnZW5hfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Queenstown",
        region: "New Zealand",
        description: "Queenstown is a resort town in New Zealand, known for its stunning natural scenery, adventure sports, and vibrant nightlife. Visitors can go bungee jumping, skiing, or hiking, or simply enjoy the beauty of Lake Wakatipu.",
        tags: ["type-nature", "society-sports", "society-night", "location-asiaoceania"],
        images: ["https://images.unsplash.com/photo-1593755673003-8ca8dbf906c2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8UXVlZW5zdG93bnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1512017615494-fdf6146235ff?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8UXVlZW5zdG93bnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1600593830144-a29f2855730e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OHx8UXVlZW5zdG93bnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Santorini",
        region: "Greece",
        description: "Santorini is a volcanic island known for its picturesque white-washed buildings with blue domed roofs, offering a breathtaking view of the Aegean Sea. Take a dip in the warm waters of the Mediterranean, indulge in traditional Greek cuisine and explore the island's ancient ruins.",
        tags: ["type-beach", "society-architecture", "society-sightseeing", "location-europe"],
        images: ["https://images.unsplash.com/photo-1533104816931-20fa691ff6ca?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OHx8U2FudG9yaW5pfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1563789031959-4c02bcb41319?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OXx8U2FudG9yaW5pfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1560703649-e3055f28bcf8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTF8fFNhbnRvcmluaXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Patagonia",
        region: "Argentina/Chile",
        description: "Patagonia is a sparsely populated region at the southern end of South America, spanning parts of Argentina and Chile. It's known for its glaciers, mountains, and wildlife, including penguins and guanacos. Visitors can go hiking, kayaking, or simply enjoy the stunning landscapes.",
        tags: ["type-nature", "location-america", 'society-sightseeing', 'society-culinary'],
        images: ["https://images.unsplash.com/photo-1546569397-ab326af881f5?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8cGF0YWdvbmlhfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1551632811-561732d1e306?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OHx8cGF0YWdvbmlhfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1494783329112-4a6795291178?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTF8fHBhdGFnb25pYXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Dubrovnik",
        region: "Croatia",
        description: "Dubrovnik is a beautiful coastal city in Croatia, known for its stunning architecture, rich history, and picturesque beaches. Visitors can explore the old town, walk along the city walls for breathtaking views, and take a day trip to the nearby islands.",
        tags: ["type-city", "society-architecture", "society-sightseeing", "type-beach", "location-europe"],
        images: ["https://images.unsplash.com/photo-1555990793-da11153b2473?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8RHVicm92bmlrfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1610104052927-ed67e7faefc3?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OHx8RHVicm92bmlrfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1565784623727-8cebf4712b2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OXx8RHVicm92bmlrfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Siem Reap",
        region: "Cambodia",
        description: "Siem Reap is a city in Cambodia, known for being the gateway to the famous Angkor Wat temple complex. Visitors can explore the temples, visit the floating villages, and experience the vibrant local culture and cuisine.",
        tags: ["type-city", "society-sightseeing", "society-culinary", "location-asiaoceania"],
        images: ["https://images.unsplash.com/photo-1609949165382-2e442783c8d5?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8U2llbSUyMFJlYXB8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1568715281772-74fa7a5e6e72?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTJ8fFNpZW0lMjBSZWFwfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1583500553362-2ae891162e78?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTB8fFNpZW0lMjBSZWFwfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Bavaria",
        region: "Germany",
        description: "Bavaria is a region in southern Germany known for its stunning natural beauty, picturesque towns and villages, and rich history. Visitors can explore the famous Neuschwanstein Castle, hike in the Bavarian Alps, and enjoy traditional Bavarian food and beer.",
        tags: ["type-nature", "society-sightseeing", "society-culinary", "society-culinary", "location-europe", "society-kid"],
        images: ["https://images.unsplash.com/photo-1551290470-554bf3a4fa80?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8YmF2YXJpYXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1593158596286-e4914dab130a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8YmF2YXJpYXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1571937032383-ba58c30f1653?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OHx8YmF2YXJpYXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Aspen",
        region: "USA",
        description: "Aspen is a popular winter destination in Colorado, known for its world-class ski resorts and stunning natural scenery. Visitors can hit the slopes, relax in hot springs, and explore the charming downtown area.",
        tags: ["type-winter", "society-sports", "society-culinary", "location-america", "society-kid"],
        images: ["https://images.unsplash.com/photo-1613864557842-388228d9cbf4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OXx8YXNwZW58ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1521849741078-8dae9b55289b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjJ8fGFzcGVufGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1580319204908-eff9d6f0bd68?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MjN8fGFzcGVufGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Zermatt",
        region: "Switzerland",
        description: "Zermatt is a picturesque village in the Swiss Alps, known for its excellent skiing and stunning views of the Matterhorn. Visitors can hit the slopes, enjoy the local cuisine and wine, and take in the stunning alpine scenery.",
        tags: ["type-winter", "society-sports", "society-culinary", "location-europe", "society-kid"],
        images: ["https://images.unsplash.com/photo-1530841344029-ec3ae0fa4cc4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8WmVybWF0dHxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1571274834067-3a24675547b4?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8WmVybWF0dHxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1535224206242-487f7090b5bb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTV8fFplcm1hdHR8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Maui",
        region: "Hawaii, USA",
        description: "Maui is a stunning Hawaiian island known for its beautiful beaches, scenic drives, and outdoor activities. Visitors can drive along the Road to Hana, watch the sunrise at Haleakala, or relax on the beaches of Kaanapali or Wailea.",
        tags: ["type-beach", "type-nature", "society-sports", "society-kid", "location-america"],
        images: ["https://images.unsplash.com/photo-1450045439515-ff27c2f2e6b1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8TWF1aSUyMGhhd2FpaXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1558983731-16245204a27d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8TWF1aSUyMGhhd2FpaXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1607896477968-0acc886e30f8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTF8fE1hdWklMjBoYXdhaWl8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Kruger National Park",
        region: "South Africa",
        description: "Kruger National Park is a wildlife sanctuary that boasts an impressive array of African wildlife, including the Big Five (lions, elephants, leopards, rhinos, and buffalos). Visitors can go on game drives, guided walks, or even hot air balloon rides to see these majestic animals in their natural habitat.",
        tags: ["type-nature", "society-sightseeing", "society-kid", "location-africa"],
        images: ["https://images.unsplash.com/photo-1594916105020-b28f829993b7?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8S3J1Z2VyJTIwTmF0aW9uYWwlMjBQYXJrfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1612703252506-e2f1f674752d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8S3J1Z2VyJTIwTmF0aW9uYWwlMjBQYXJrfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1621963319398-40c4b226ffa8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8S3J1Z2VyJTIwTmF0aW9uYWwlMjBQYXJrfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Yellowstone National Park",
        region: "Wyoming, USA",
        description: "Yellowstone National Park is a natural wonderland that features a diverse range of geothermal features, including hot springs, geysers, and mud pots. Visitors can explore the park's scenic trails, witness the famous Old Faithful geyser, or observe the park's unique wildlife, such as bison, elk, and wolves.",
        tags: ["type-nature", "society-sightseeing", "society-kid", "location-america"],
        images: ["https://images.unsplash.com/photo-1629985692757-48648f4f1fc1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8WWVsbG93c3RvbmUlMjBOYXRpb25hbCUyMFBhcmt8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1608233695800-34245ba7274f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8WWVsbG93c3RvbmUlMjBOYXRpb25hbCUyMFBhcmt8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1569545957151-ad2f428c2242?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTB8fFllbGxvd3N0b25lJTIwTmF0aW9uYWwlMjBQYXJrfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Dublin",
        region: "Ireland",
        description: "Dublin is a city steeped in history and culture, from its iconic literary legacy to its ancient cathedrals and castles. Visitors can experience the city's vibrant nightlife, delicious cuisine, and friendly locals.",
        tags: ["type-city", "society-night", "society-culinary", "location-europe"],
        images: ["https://images.unsplash.com/photo-1602061464448-5859b31eb1b8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OHx8ZHVibGlufGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1605969353711-234dea348ce1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8ZHVibGlufGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1586724229931-cd4cd3b50ddc?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OXx8ZHVibGlufGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "New York City",
        region: "New York, USA",
        description: "New York City is a city that never sleeps, offering endless entertainment options from world-renowned museums and theaters to bustling nightlife and diverse cuisine. Visitors can experience the iconic landmarks such as the Statue of Liberty and the Empire State Building or explore the city's distinct neighborhoods.",
        tags: ["type-city", "society-sightseeing", "society-night", "society-culinary", "society-sports", "location-america"],
        images: ["https://images.unsplash.com/photo-1580752300969-1ceaaa1f3039?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8bnljfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1518235506717-e1ed3306a89b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8bnljfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1582760548598-0bccdf815aa2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8dGltZXMlMjBzcXVhcmV8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60"]
      },
      {
        title: "Cancun",
        region: "Mexico",
        description: "Cancun is a tropical paradise known for its stunning beaches, turquoise waters, and vibrant nightlife. Visitors can relax on the beach, explore the nearby Mayan ruins, or experience the local cuisine and culture.",
        tags: ["type-beach", "society-night", "society-culinary", "location-america"],
        images: ["https://images.unsplash.com/photo-1570737543098-0983d88f796d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8Q2FuY3VufGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1568402102990-bc541580b59f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTF8fENhbmN1bnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1552074284-5e88ef1aef18?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTR8fENhbmN1bnxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60"],
      },
      {
        title: "Malé",
        region: "Maldives",
        description: "Malé is the bustling capital city of the Maldives, known for its stunning beaches, crystal-clear waters, and vibrant culture. Visitors can explore the city's historic landmarks, enjoy water sports such as snorkeling and diving, or simply relax on the beach.",
        tags: ["type-beach", "society-sightseeing", "society-sports", "location-asiaoceania"],
        images: ["https://images.unsplash.com/photo-1514282401047-d79a71a590e8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8bWFsZGl2ZXN8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1578922746465-3a80a228f223?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8bWFsZGl2ZXN8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60", "https://images.unsplash.com/photo-1523632117739-12cc7fa95ad0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTB8fG1hbGRpdmVzfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=800&q=60"]
      }
]

export default destinations;
------------------------------
Title of Trip.js:
No Title Found
import React, { useState, useEffect, useCallback } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { useLocation, useNavigate } from 'react-router-dom'
import TripBanner from '../../components/Trip/TripBanner';
import TripOverview from '../../components/Trip/TripOverview';
import TripLists from '../../components/Trip/TripLists';
import TripChecklist from '../../components/Trip/TripChecklist';
import TripBudget from '../../components/Trip/TripBudget';
import TripFlights from '../../components/Trip/TripFlights';
import TripActivities from '../../components/Trip/TripActivities';
import { db } from '../../firebase';
import { doc, getDoc, onSnapshot } from 'firebase/firestore';


const TripPage = styled.div`

`

const NavList = styled.ul`
    list-style: none;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: middle;
    height: 50px;
    background-color: #EEE;
    border-top: 2.5px #000 solid;
    padding-left: 0px;
    margin: 0px;
`

const NavItem = styled.li`
    line-height: 50px;
    padding: 0px 15px;
    font-family: "Sen", sans-serif;
    font-weight: 700;
    cursor: pointer;

    @media (max-width: 480px) {
        font-size: 0.9em;
        font-weight: 600;
        padding: 0px 7.5px;
    }

    @media (max-width: 350px) {
        font-size: 0.8em;
    }
`


function Trip(props) {
    const location = useLocation();
    const navigate = useNavigate();
    const [ status, setStatus ] = useState("loading")
    const [trip, setTrip] = useState(null);
    const [page, setPage] = useState('overview');
    const [currentPage, setCurrentPage] = useState(<>not updated</>);
    const [newDate, setNewDate] = useState(false);

    useEffect(() => {
        if (!location.state || !location.state.trip || !location.state.trip.date) {
            console.log("rerouting");
            navigate("/trips");
        } else {
            console.log(location.state.trip.date)
            setTrip(location.state.trip);
            document.title = `Trip to ${location.state.trip.title}`
        }
    }, [location.state.trip, page, trip]);

    async function getTrip() {
        console.log('getting trip')
        const tripRef = doc(db, "trips", location.state.id) // query(collection(db, "trips"), where("id", "array-contains", currentUser.uid));
        const docSnap = await getDoc(tripRef)
        if (docSnap.exists()) {
            setTrip(docSnap.data());
        } else {
            console.log("No such document!");
        }
    }

    const updateTrip = useCallback((newTrip) => {
        setTrip(newTrip);
    }, []);

    const updateChecklist = useCallback((newChecklist) => {
        setTrip(prevState => ({
            ...prevState,
            checklist: location.state.trip.checklist.concat(newChecklist)
        }));
    }, []);

    const refreshTrip = useCallback(() => {
        console.log("Refreshing for sure")
        getTrip();
    }, []);

    const updateDate = useCallback((newD) => {
        console.log('dawmn')
        setNewDate(newD);
    }, []);

    
    function pageClick(e) {
        let pages = ['overview', 'lists', 'checklist', 'flights']
        for (let i = 0; i < pages.length; i++) {
            document.getElementById(pages[i]).classList.remove("active-underline")
        }

        document.getElementById(e.target.id).classList.add("active-underline");
        setPage(e.target.id);

        if (e.target.id === 'overview') {
            setPage("overview");
            // setCurrentPage(<TripOverview key={status} trip={trip}/>);
        } else if (e.target.id === 'lists') {
            setPage("lists");
            // setCurrentPage(<TripLists trip={trip}/>);
        } 
        // else if (e.target.id === 'budget') {
        //     setPage("budget");
            // setCurrentPage(<TripChecklist trip={trip}/>)
        // } 
        else if (e.target.id === 'checklist') {
            setPage("checklist");
            // setCurrentPage(<TripChecklist trip={trip}/>)
        }
        else if (e.target.id === 'flights') {
            setPage("flights");
            // setCurrentPage(<TripChecklist trip={trip}/>)
        }

        setStatus("loaded")
    }


    return (
        (trip != null) ?
        <TripPage>
            <TripBanner updateDate={updateDate} refreshTrip={refreshTrip} updateTrip={updateTrip} id={location.state.id} trip={trip}/>
            <NavList>
                <NavItem onClick={pageClick} className='active-underline' id="overview">Overview</NavItem>
                <NavItem onClick={pageClick} id="lists">Lists</NavItem>
                <NavItem onClick={pageClick} id="checklist">Checklist</NavItem>
                {/* <NavItem onClick={pageClick} id="budget">Budget</NavItem> */}
                <NavItem onClick={pageClick} id="flights">Flights</NavItem>
            </NavList>
            {
                page ?
                <>
                    <TripOverview refreshTrip={refreshTrip} display={page === 'overview' ? 'block' : 'none'} id={location.state.id} trip={trip}/>
                    <TripLists refreshTrip={refreshTrip} updateTrip={updateTrip} display={page === 'lists' ? 'flex' : 'none'} id={location.state.id} trip={trip}/>
                    <TripFlights newDate={newDate} display={page === 'flights' ? 'block' : 'none'} id={location.state.id} trip={trip}/>
                    <TripChecklist display={page === 'checklist' ? 'block' : 'none'} updateChecklist={updateChecklist} id={location.state.id} trip={trip}/>
                </>
                :
                <></>
            }
            </TripPage>
        :
        <></>
    );
}

export default Trip;

------------------------------
Title of GetUnsplashImages.js:
No Title Found
export async function getImages(query) {
    try {
        let access_key = 'v62XpTNqGJQX-5B60jvaM-y2Fwpkk4Z0qOZ-WvT_2o0'
        const response = await fetch(`https://api.unsplash.com/search/photos?query=${query}&client_id=v62XpTNqGJQX-5B60jvaM-y2Fwpkk4Z0qOZ-WvT_2o0&per_page=9`)

        return await response.json();
    } catch(error) {
        return [];
    }
}
------------------------------
